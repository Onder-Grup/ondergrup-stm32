
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c64c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d64c  0800d64c  000209a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d64c  0800d64c  000209a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d64c  0800d64c  000209a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d64c  0800d64c  0001d64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a4  20000000  0800d654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000141c  200009a4  0800dff8  000209a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc0  0800dff8  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184fe  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000331c  00000000  00000000  00038f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003c230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001158  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b855  00000000  00000000  0003e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0ba  00000000  00000000  0005a1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7830  00000000  00000000  000752a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006140  00000000  00000000  0011cad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00122c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200009a4 	.word	0x200009a4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800c824 	.word	0x0800c824

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200009a8 	.word	0x200009a8
 800022c:	0800c824 	.word	0x0800c824

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	200009c0 	.word	0x200009c0
 800026c:	20000a14 	.word	0x20000a14

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <lcd_send_cmd+0x78>)
 80002b4:	f008 fd89 	bl	8008dca <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 80002be:	bf00      	nop
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <lcd_send_cmd+0x78>)
 80002c2:	f008 fd75 	bl	8008db0 <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2304      	movs	r3, #4
 80002d6:	214e      	movs	r1, #78	; 0x4e
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <lcd_send_cmd+0x78>)
 80002da:	f008 f909 	bl	80084f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000e3c 	.word	0x20000e3c

080002ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f023 030f 	bic.w	r3, r3, #15
 80002fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f043 030d 	orr.w	r3, r3, #13
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f043 0309 	orr.w	r3, r3, #9
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800032c:	bf00      	nop
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <lcd_send_data+0x78>)
 8000330:	f008 fd4b 	bl	8008dca <HAL_I2C_GetError>
 8000334:	4603      	mov	r3, r0
 8000336:	2b04      	cmp	r3, #4
 8000338:	d0f9      	beq.n	800032e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800033a:	bf00      	nop
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <lcd_send_data+0x78>)
 800033e:	f008 fd37 	bl	8008db0 <HAL_I2C_GetState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b20      	cmp	r3, #32
 8000346:	d1f9      	bne.n	800033c <lcd_send_data+0x50>
	  }
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	214e      	movs	r1, #78	; 0x4e
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <lcd_send_data+0x78>)
 8000356:	f008 f8cb 	bl	80084f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000e3c 	.word	0x20000e3c

08000368 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000370:	e006      	b.n	8000380 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb6 	bl	80002ec <lcd_send_data>
	while (*str)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f4      	bne.n	8000372 <lcd_send_string+0xa>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcd_init>:

void lcd_init (void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000396:	2002      	movs	r0, #2
 8000398:	f7ff ff6a 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f7ff ff67 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ff64 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f7ff ff61 	bl	8000270 <lcd_send_cmd>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <lcd_gotoxy+0x24>
 {
  lcd_send_cmd(0x80 + (column - 1));
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	337f      	adds	r3, #127	; 0x7f
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <lcd_send_cmd>
 }
 else if(row == 2)
 {
  lcd_send_cmd(0xC0 + (column - 1));
 }
}
 80003d4:	e008      	b.n	80003e8 <lcd_gotoxy+0x36>
 else if(row == 2)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d105      	bne.n	80003e8 <lcd_gotoxy+0x36>
  lcd_send_cmd(0xC0 + (column - 1));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	603a      	str	r2, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	460b      	mov	r3, r1
 80003fe:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffd3 	bl	80003b2 <lcd_gotoxy>
 lcd_send_string(str);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffab 	bl	8000368 <lcd_send_string>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_clear>:

void lcd_clear(void) {
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0

 lcd_send_cmd(_CLEAR);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff26 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 fa19 	bl	800785c <HAL_Delay>

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000434:	f3bf 8f4f 	dsb	sy
}
 8000438:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <__NVIC_SystemReset+0x24>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000442:	4904      	ldr	r1, [pc, #16]	; (8000454 <__NVIC_SystemReset+0x24>)
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <__NVIC_SystemReset+0x28>)
 8000446:	4313      	orrs	r3, r2
 8000448:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <__NVIC_SystemReset+0x20>
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	05fa0004 	.word	0x05fa0004

0800045c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff fee3 	bl	8000230 <strlen>
 800046a:	4603      	mov	r3, r0
 800046c:	3301      	adds	r3, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f00c f888 	bl	800c584 <malloc>
 8000474:	4603      	mov	r3, r0
 8000476:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <copyText+0x2a>
        strcpy(result, text);
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f00c f9b9 	bl	800c7f8 <strcpy>
    }
    return result;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000494:	2101      	movs	r1, #1
 8000496:	488f      	ldr	r0, [pc, #572]	; (80006d4 <menu+0x244>)
 8000498:	f007 fe6e 	bl	8008178 <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 808e 	bne.w	80005c0 <menu+0x130>
 80004a4:	4b8c      	ldr	r3, [pc, #560]	; (80006d8 <menu+0x248>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	f083 0301 	eor.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f000 8086 	beq.w	80005c0 <menu+0x130>
		menuSayac = menuSayac+1;
 80004b4:	4b89      	ldr	r3, [pc, #548]	; (80006dc <menu+0x24c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b87      	ldr	r3, [pc, #540]	; (80006dc <menu+0x24c>)
 80004be:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80004c0:	4b86      	ldr	r3, [pc, #536]	; (80006dc <menu+0x24c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b20      	cmp	r3, #32
 80004c6:	d102      	bne.n	80004ce <menu+0x3e>
			menuSayac = 1;
 80004c8:	4b84      	ldr	r3, [pc, #528]	; (80006dc <menu+0x24c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80004ce:	4b83      	ldr	r3, [pc, #524]	; (80006dc <menu+0x24c>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b12      	cmp	r3, #18
 80004d4:	d106      	bne.n	80004e4 <menu+0x54>
 80004d6:	4b82      	ldr	r3, [pc, #520]	; (80006e0 <menu+0x250>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d102      	bne.n	80004e4 <menu+0x54>
			menuSayac = 21;
 80004de:	4b7f      	ldr	r3, [pc, #508]	; (80006dc <menu+0x24c>)
 80004e0:	2215      	movs	r2, #21
 80004e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80004e4:	4b7d      	ldr	r3, [pc, #500]	; (80006dc <menu+0x24c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	d106      	bne.n	80004fa <menu+0x6a>
 80004ec:	4b7d      	ldr	r3, [pc, #500]	; (80006e4 <menu+0x254>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <menu+0x6a>
			menuSayac = 16;
 80004f4:	4b79      	ldr	r3, [pc, #484]	; (80006dc <menu+0x24c>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80004fa:	4b78      	ldr	r3, [pc, #480]	; (80006dc <menu+0x24c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b0d      	cmp	r3, #13
 8000500:	d106      	bne.n	8000510 <menu+0x80>
 8000502:	4b78      	ldr	r3, [pc, #480]	; (80006e4 <menu+0x254>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d102      	bne.n	8000510 <menu+0x80>
			menuSayac = 16;
 800050a:	4b74      	ldr	r3, [pc, #464]	; (80006dc <menu+0x24c>)
 800050c:	2210      	movs	r2, #16
 800050e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000510:	4b72      	ldr	r3, [pc, #456]	; (80006dc <menu+0x24c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b09      	cmp	r3, #9
 8000516:	d106      	bne.n	8000526 <menu+0x96>
 8000518:	4b72      	ldr	r3, [pc, #456]	; (80006e4 <menu+0x254>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d102      	bne.n	8000526 <menu+0x96>
			menuSayac = 13;
 8000520:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <menu+0x24c>)
 8000522:	220d      	movs	r2, #13
 8000524:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000526:	4b6d      	ldr	r3, [pc, #436]	; (80006dc <menu+0x24c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b0a      	cmp	r3, #10
 800052c:	d10a      	bne.n	8000544 <menu+0xb4>
 800052e:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <menu+0x258>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d003      	beq.n	800053e <menu+0xae>
 8000536:	4b6c      	ldr	r3, [pc, #432]	; (80006e8 <menu+0x258>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d102      	bne.n	8000544 <menu+0xb4>
			menuSayac = 11;
 800053e:	4b67      	ldr	r3, [pc, #412]	; (80006dc <menu+0x24c>)
 8000540:	220b      	movs	r2, #11
 8000542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000544:	4b65      	ldr	r3, [pc, #404]	; (80006dc <menu+0x24c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b0c      	cmp	r3, #12
 800054a:	d10e      	bne.n	800056a <menu+0xda>
 800054c:	4b67      	ldr	r3, [pc, #412]	; (80006ec <menu+0x25c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d003      	beq.n	800055c <menu+0xcc>
 8000554:	4b65      	ldr	r3, [pc, #404]	; (80006ec <menu+0x25c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d106      	bne.n	800056a <menu+0xda>
 800055c:	4b61      	ldr	r3, [pc, #388]	; (80006e4 <menu+0x254>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <menu+0xda>
			menuSayac = 16;
 8000564:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <menu+0x24c>)
 8000566:	2210      	movs	r2, #16
 8000568:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800056a:	4b5c      	ldr	r3, [pc, #368]	; (80006dc <menu+0x24c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b0c      	cmp	r3, #12
 8000570:	d10e      	bne.n	8000590 <menu+0x100>
 8000572:	4b5e      	ldr	r3, [pc, #376]	; (80006ec <menu+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d003      	beq.n	8000582 <menu+0xf2>
 800057a:	4b5c      	ldr	r3, [pc, #368]	; (80006ec <menu+0x25c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d106      	bne.n	8000590 <menu+0x100>
 8000582:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <menu+0x254>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d102      	bne.n	8000590 <menu+0x100>
			menuSayac = 13;
 800058a:	4b54      	ldr	r3, [pc, #336]	; (80006dc <menu+0x24c>)
 800058c:	220d      	movs	r2, #13
 800058e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000590:	4b52      	ldr	r3, [pc, #328]	; (80006dc <menu+0x24c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d106      	bne.n	80005a6 <menu+0x116>
 8000598:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <menu+0x260>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d102      	bne.n	80005a6 <menu+0x116>
			menuSayac = 16;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <menu+0x24c>)
 80005a2:	2210      	movs	r2, #16
 80005a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80005a6:	4b4d      	ldr	r3, [pc, #308]	; (80006dc <menu+0x24c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b18      	cmp	r3, #24
 80005ac:	d106      	bne.n	80005bc <menu+0x12c>
 80005ae:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <menu+0x250>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <menu+0x12c>
			menuSayac = 26;
 80005b6:	4b49      	ldr	r3, [pc, #292]	; (80006dc <menu+0x24c>)
 80005b8:	221a      	movs	r2, #26
 80005ba:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80005bc:	f003 fecc 	bl	8004358 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80005c0:	2108      	movs	r1, #8
 80005c2:	484c      	ldr	r0, [pc, #304]	; (80006f4 <menu+0x264>)
 80005c4:	f007 fdd8 	bl	8008178 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d175      	bne.n	80006ba <menu+0x22a>
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <menu+0x248>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d06e      	beq.n	80006ba <menu+0x22a>
		if (menuSayac <= 1) {
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <menu+0x24c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d802      	bhi.n	80005ea <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <menu+0x24c>)
 80005e6:	2220      	movs	r2, #32
 80005e8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <menu+0x24c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <menu+0x24c>)
 80005f4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <menu+0x24c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b14      	cmp	r3, #20
 80005fc:	d106      	bne.n	800060c <menu+0x17c>
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <menu+0x250>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <menu+0x17c>
			menuSayac = 17;
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <menu+0x24c>)
 8000608:	2211      	movs	r2, #17
 800060a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <menu+0x24c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d106      	bne.n	8000622 <menu+0x192>
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <menu+0x254>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <menu+0x192>
			menuSayac = 7;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <menu+0x24c>)
 800061e:	2207      	movs	r2, #7
 8000620:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <menu+0x24c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d106      	bne.n	8000638 <menu+0x1a8>
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <menu+0x254>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <menu+0x1a8>
			menuSayac = 12;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <menu+0x24c>)
 8000634:	220c      	movs	r2, #12
 8000636:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <menu+0x24c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b0c      	cmp	r3, #12
 800063e:	d106      	bne.n	800064e <menu+0x1be>
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <menu+0x254>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d102      	bne.n	800064e <menu+0x1be>
			menuSayac = 8;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <menu+0x24c>)
 800064a:	2208      	movs	r2, #8
 800064c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <menu+0x24c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d10a      	bne.n	800066c <menu+0x1dc>
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <menu+0x258>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <menu+0x1d6>
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <menu+0x258>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d102      	bne.n	800066c <menu+0x1dc>
			menuSayac = 9;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <menu+0x24c>)
 8000668:	2209      	movs	r2, #9
 800066a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <menu+0x24c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b0c      	cmp	r3, #12
 8000672:	d10a      	bne.n	800068a <menu+0x1fa>
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <menu+0x25c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d003      	beq.n	8000684 <menu+0x1f4>
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <menu+0x25c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <menu+0x1fa>
			menuSayac = 11;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <menu+0x24c>)
 8000686:	220b      	movs	r2, #11
 8000688:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <menu+0x24c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d106      	bne.n	80006a0 <menu+0x210>
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <menu+0x260>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d102      	bne.n	80006a0 <menu+0x210>
			menuSayac = 14;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <menu+0x24c>)
 800069c:	220e      	movs	r2, #14
 800069e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <menu+0x24c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b19      	cmp	r3, #25
 80006a6:	d106      	bne.n	80006b6 <menu+0x226>
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <menu+0x250>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <menu+0x226>
			menuSayac = 23;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <menu+0x24c>)
 80006b2:	2217      	movs	r2, #23
 80006b4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006b6:	f003 fe4f 	bl	8004358 <bekle>
	}

	if (menuSayac == 0) {
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <menu+0x24c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d134      	bne.n	800072c <menu+0x29c>
		if(dilSecim == 0) {
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <menu+0x268>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d122      	bne.n	8000710 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <menu+0x26c>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	e016      	b.n	8000700 <menu+0x270>
 80006d2:	bf00      	nop
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000caa 	.word	0x20000caa
 80006dc:	20000c7c 	.word	0x20000c7c
 80006e0:	20000c8b 	.word	0x20000c8b
 80006e4:	20000c84 	.word	0x20000c84
 80006e8:	20000c85 	.word	0x20000c85
 80006ec:	20000c86 	.word	0x20000c86
 80006f0:	20000c87 	.word	0x20000c87
 80006f4:	40011000 	.word	0x40011000
 80006f8:	20000c9c 	.word	0x20000c9c
 80006fc:	0800c83c 	.word	0x0800c83c
 8000700:	f7ff fe76 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000704:	4a94      	ldr	r2, [pc, #592]	; (8000958 <menu+0x4c8>)
 8000706:	2101      	movs	r1, #1
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fe71 	bl	80003f0 <lcd_print>
 800070e:	e00d      	b.n	800072c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000710:	4b92      	ldr	r3, [pc, #584]	; (800095c <menu+0x4cc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d109      	bne.n	800072c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <menu+0x4d0>)
 800071a:	2101      	movs	r1, #1
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fe67 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000722:	4a90      	ldr	r2, [pc, #576]	; (8000964 <menu+0x4d4>)
 8000724:	2101      	movs	r1, #1
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fe62 	bl	80003f0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800072c:	4b8e      	ldr	r3, [pc, #568]	; (8000968 <menu+0x4d8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 82b5 	bne.w	8000ca0 <menu+0x810>
		if(dilSecim == 0) {
 8000736:	4b89      	ldr	r3, [pc, #548]	; (800095c <menu+0x4cc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800073e:	4a8b      	ldr	r2, [pc, #556]	; (800096c <menu+0x4dc>)
 8000740:	2101      	movs	r1, #1
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe54 	bl	80003f0 <lcd_print>
 8000748:	e008      	b.n	800075c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800074a:	4b84      	ldr	r3, [pc, #528]	; (800095c <menu+0x4cc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d104      	bne.n	800075c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000752:	4a87      	ldr	r2, [pc, #540]	; (8000970 <menu+0x4e0>)
 8000754:	2101      	movs	r1, #1
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fe4a 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800075c:	4b85      	ldr	r3, [pc, #532]	; (8000974 <menu+0x4e4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d123      	bne.n	80007ac <menu+0x31c>
			if(dilSecim == 0) {
 8000764:	4b7d      	ldr	r3, [pc, #500]	; (800095c <menu+0x4cc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800076c:	4a82      	ldr	r2, [pc, #520]	; (8000978 <menu+0x4e8>)
 800076e:	2101      	movs	r1, #1
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff fe3d 	bl	80003f0 <lcd_print>
 8000776:	e008      	b.n	800078a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <menu+0x4cc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d104      	bne.n	800078a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000780:	4a7e      	ldr	r2, [pc, #504]	; (800097c <menu+0x4ec>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f7ff fe33 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800078a:	4a7d      	ldr	r2, [pc, #500]	; (8000980 <menu+0x4f0>)
 800078c:	210f      	movs	r1, #15
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fe2e 	bl	80003f0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000794:	4b7b      	ldr	r3, [pc, #492]	; (8000984 <menu+0x4f4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	220a      	movs	r2, #10
 800079a:	497b      	ldr	r1, [pc, #492]	; (8000988 <menu+0x4f8>)
 800079c:	4618      	mov	r0, r3
 800079e:	f00b feef 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 80007a2:	4a79      	ldr	r2, [pc, #484]	; (8000988 <menu+0x4f8>)
 80007a4:	210e      	movs	r1, #14
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fe22 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80007ac:	4b71      	ldr	r3, [pc, #452]	; (8000974 <menu+0x4e4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d123      	bne.n	80007fc <menu+0x36c>
			if(dilSecim == 0) {
 80007b4:	4b69      	ldr	r3, [pc, #420]	; (800095c <menu+0x4cc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d105      	bne.n	80007c8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80007bc:	4a73      	ldr	r2, [pc, #460]	; (800098c <menu+0x4fc>)
 80007be:	2101      	movs	r1, #1
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff fe15 	bl	80003f0 <lcd_print>
 80007c6:	e008      	b.n	80007da <menu+0x34a>
			} else if(dilSecim == 1) {
 80007c8:	4b64      	ldr	r3, [pc, #400]	; (800095c <menu+0x4cc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d104      	bne.n	80007da <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80007d0:	4a6f      	ldr	r2, [pc, #444]	; (8000990 <menu+0x500>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff fe0b 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80007da:	4a6e      	ldr	r2, [pc, #440]	; (8000994 <menu+0x504>)
 80007dc:	210f      	movs	r1, #15
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fe06 	bl	80003f0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80007e4:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <menu+0x508>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	220a      	movs	r2, #10
 80007ea:	4967      	ldr	r1, [pc, #412]	; (8000988 <menu+0x4f8>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00b fec7 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 80007f2:	4a65      	ldr	r2, [pc, #404]	; (8000988 <menu+0x4f8>)
 80007f4:	210e      	movs	r1, #14
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff fdfa 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80007fc:	4b5d      	ldr	r3, [pc, #372]	; (8000974 <menu+0x4e4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d123      	bne.n	800084c <menu+0x3bc>
			if(dilSecim == 0) {
 8000804:	4b55      	ldr	r3, [pc, #340]	; (800095c <menu+0x4cc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d105      	bne.n	8000818 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800080c:	4a63      	ldr	r2, [pc, #396]	; (800099c <menu+0x50c>)
 800080e:	2101      	movs	r1, #1
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fded 	bl	80003f0 <lcd_print>
 8000816:	e008      	b.n	800082a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000818:	4b50      	ldr	r3, [pc, #320]	; (800095c <menu+0x4cc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d104      	bne.n	800082a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000820:	4a5f      	ldr	r2, [pc, #380]	; (80009a0 <menu+0x510>)
 8000822:	2101      	movs	r1, #1
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff fde3 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800082a:	4a5a      	ldr	r2, [pc, #360]	; (8000994 <menu+0x504>)
 800082c:	210f      	movs	r1, #15
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fdde 	bl	80003f0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000834:	4b5b      	ldr	r3, [pc, #364]	; (80009a4 <menu+0x514>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	220a      	movs	r2, #10
 800083a:	4953      	ldr	r1, [pc, #332]	; (8000988 <menu+0x4f8>)
 800083c:	4618      	mov	r0, r3
 800083e:	f00b fe9f 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 8000842:	4a51      	ldr	r2, [pc, #324]	; (8000988 <menu+0x4f8>)
 8000844:	210e      	movs	r1, #14
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fdd2 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <menu+0x4e4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d123      	bne.n	800089c <menu+0x40c>
			if(dilSecim == 0) {
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <menu+0x4cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800085c:	4a52      	ldr	r2, [pc, #328]	; (80009a8 <menu+0x518>)
 800085e:	2101      	movs	r1, #1
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fdc5 	bl	80003f0 <lcd_print>
 8000866:	e008      	b.n	800087a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000870:	4a4e      	ldr	r2, [pc, #312]	; (80009ac <menu+0x51c>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fdbb 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800087a:	4a46      	ldr	r2, [pc, #280]	; (8000994 <menu+0x504>)
 800087c:	210f      	movs	r1, #15
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff fdb6 	bl	80003f0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000884:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <menu+0x520>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	220a      	movs	r2, #10
 800088a:	493f      	ldr	r1, [pc, #252]	; (8000988 <menu+0x4f8>)
 800088c:	4618      	mov	r0, r3
 800088e:	f00b fe77 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 8000892:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <menu+0x4f8>)
 8000894:	210e      	movs	r1, #14
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fdaa 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <menu+0x4e4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d123      	bne.n	80008ec <menu+0x45c>
			if(dilSecim == 0) {
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <menu+0x4cc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80008ac:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <menu+0x524>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fd9d 	bl	80003f0 <lcd_print>
 80008b6:	e008      	b.n	80008ca <menu+0x43a>
			} else if(dilSecim == 1) {
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80008c0:	4a3d      	ldr	r2, [pc, #244]	; (80009b8 <menu+0x528>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fd93 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <menu+0x504>)
 80008cc:	210f      	movs	r1, #15
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fd8e 	bl	80003f0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <menu+0x52c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	220a      	movs	r2, #10
 80008da:	492b      	ldr	r1, [pc, #172]	; (8000988 <menu+0x4f8>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b fe4f 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 80008e2:	4a29      	ldr	r2, [pc, #164]	; (8000988 <menu+0x4f8>)
 80008e4:	210e      	movs	r1, #14
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fd82 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <menu+0x4e4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	d123      	bne.n	800093c <menu+0x4ac>
			if(dilSecim == 0) {
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <menu+0x4cc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80008fc:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <menu+0x530>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fd75 	bl	80003f0 <lcd_print>
 8000906:	e008      	b.n	800091a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000910:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <menu+0x534>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fd6b 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <menu+0x504>)
 800091c:	210f      	movs	r1, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fd66 	bl	80003f0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <menu+0x538>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	220a      	movs	r2, #10
 800092a:	4917      	ldr	r1, [pc, #92]	; (8000988 <menu+0x4f8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fe27 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <menu+0x4f8>)
 8000934:	210e      	movs	r1, #14
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fd5a 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <menu+0x4e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b06      	cmp	r3, #6
 8000942:	d15f      	bne.n	8000a04 <menu+0x574>
			if(dilSecim == 0) {
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <menu+0x4cc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d141      	bne.n	80009d0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <menu+0x53c>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fd4d 	bl	80003f0 <lcd_print>
 8000956:	e044      	b.n	80009e2 <menu+0x552>
 8000958:	0800c850 	.word	0x0800c850
 800095c:	20000c9c 	.word	0x20000c9c
 8000960:	0800c864 	.word	0x0800c864
 8000964:	0800c878 	.word	0x0800c878
 8000968:	20000c7c 	.word	0x20000c7c
 800096c:	0800c88c 	.word	0x0800c88c
 8000970:	0800c8a0 	.word	0x0800c8a0
 8000974:	20000c7e 	.word	0x20000c7e
 8000978:	0800c8b4 	.word	0x0800c8b4
 800097c:	0800c8c4 	.word	0x0800c8c4
 8000980:	0800c8d4 	.word	0x0800c8d4
 8000984:	20000c9d 	.word	0x20000c9d
 8000988:	20000c54 	.word	0x20000c54
 800098c:	0800c8d8 	.word	0x0800c8d8
 8000990:	0800c8e8 	.word	0x0800c8e8
 8000994:	0800c8f8 	.word	0x0800c8f8
 8000998:	20000c9e 	.word	0x20000c9e
 800099c:	0800c8fc 	.word	0x0800c8fc
 80009a0:	0800c90c 	.word	0x0800c90c
 80009a4:	20000c9f 	.word	0x20000c9f
 80009a8:	0800c91c 	.word	0x0800c91c
 80009ac:	0800c92c 	.word	0x0800c92c
 80009b0:	20000ca0 	.word	0x20000ca0
 80009b4:	0800c93c 	.word	0x0800c93c
 80009b8:	0800c94c 	.word	0x0800c94c
 80009bc:	20000ca1 	.word	0x20000ca1
 80009c0:	0800c95c 	.word	0x0800c95c
 80009c4:	0800c96c 	.word	0x0800c96c
 80009c8:	20000ca2 	.word	0x20000ca2
 80009cc:	0800c97c 	.word	0x0800c97c
			} else if(dilSecim == 1) {
 80009d0:	4b4f      	ldr	r3, [pc, #316]	; (8000b10 <menu+0x680>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d104      	bne.n	80009e2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <menu+0x684>)
 80009da:	2101      	movs	r1, #1
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff fd07 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80009e2:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <menu+0x688>)
 80009e4:	210f      	movs	r1, #15
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff fd02 	bl	80003f0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <menu+0x68c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	220a      	movs	r2, #10
 80009f2:	494b      	ldr	r1, [pc, #300]	; (8000b20 <menu+0x690>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00b fdc3 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <menu+0x690>)
 80009fc:	210e      	movs	r1, #14
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff fcf6 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000a04:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <menu+0x694>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	d123      	bne.n	8000a54 <menu+0x5c4>
			if(dilSecim == 0) {
 8000a0c:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <menu+0x680>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d105      	bne.n	8000a20 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000a14:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <menu+0x698>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fce9 	bl	80003f0 <lcd_print>
 8000a1e:	e008      	b.n	8000a32 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <menu+0x680>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d104      	bne.n	8000a32 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <menu+0x69c>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fcdf 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a32:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <menu+0x688>)
 8000a34:	210f      	movs	r1, #15
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fcda 	bl	80003f0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <menu+0x6a0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	220a      	movs	r2, #10
 8000a42:	4937      	ldr	r1, [pc, #220]	; (8000b20 <menu+0x690>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fd9b 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 8000a4a:	4a35      	ldr	r2, [pc, #212]	; (8000b20 <menu+0x690>)
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fcce 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <menu+0x694>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d123      	bne.n	8000aa4 <menu+0x614>
			if(dilSecim == 0) {
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <menu+0x680>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000a64:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <menu+0x6a4>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff fcc1 	bl	80003f0 <lcd_print>
 8000a6e:	e008      	b.n	8000a82 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <menu+0x680>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d104      	bne.n	8000a82 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <menu+0x6a8>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fcb7 	bl	80003f0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <menu+0x688>)
 8000a84:	210f      	movs	r1, #15
 8000a86:	2002      	movs	r0, #2
 8000a88:	f7ff fcb2 	bl	80003f0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <menu+0x6ac>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	220a      	movs	r2, #10
 8000a92:	4923      	ldr	r1, [pc, #140]	; (8000b20 <menu+0x690>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00b fd73 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <menu+0x690>)
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fca6 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <menu+0x694>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	d123      	bne.n	8000af4 <menu+0x664>
			if(dilSecim == 0) {
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <menu+0x680>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <menu+0x6b0>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff fc99 	bl	80003f0 <lcd_print>
 8000abe:	e008      	b.n	8000ad2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <menu+0x680>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <menu+0x6b4>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fc8f 	bl	80003f0 <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <menu+0x6b8>)
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fc8a 	bl	80003f0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <menu+0x6bc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	490f      	ldr	r1, [pc, #60]	; (8000b20 <menu+0x690>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fd4b 	bl	800c580 <itoa>
			lcd_print(2, 15, snum);
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <menu+0x690>)
 8000aec:	210f      	movs	r1, #15
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fc7e 	bl	80003f0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <menu+0x694>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	d134      	bne.n	8000b66 <menu+0x6d6>
			if(dilSecim == 0) {
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <menu+0x680>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d127      	bne.n	8000b54 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <menu+0x6c0>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fc71 	bl	80003f0 <lcd_print>
 8000b0e:	e02a      	b.n	8000b66 <menu+0x6d6>
 8000b10:	20000c9c 	.word	0x20000c9c
 8000b14:	0800c98c 	.word	0x0800c98c
 8000b18:	0800c8f8 	.word	0x0800c8f8
 8000b1c:	20000ca3 	.word	0x20000ca3
 8000b20:	20000c54 	.word	0x20000c54
 8000b24:	20000c7e 	.word	0x20000c7e
 8000b28:	0800c99c 	.word	0x0800c99c
 8000b2c:	0800c9ac 	.word	0x0800c9ac
 8000b30:	20000ca4 	.word	0x20000ca4
 8000b34:	0800c9bc 	.word	0x0800c9bc
 8000b38:	0800c9cc 	.word	0x0800c9cc
 8000b3c:	20000ca5 	.word	0x20000ca5
 8000b40:	0800c9dc 	.word	0x0800c9dc
 8000b44:	0800c9ec 	.word	0x0800c9ec
 8000b48:	0800c9fc 	.word	0x0800c9fc
 8000b4c:	20000ca6 	.word	0x20000ca6
 8000b50:	0800ca00 	.word	0x0800ca00
			} else if(dilSecim == 1) {
 8000b54:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <menu+0x8d0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000b5c:	4a81      	ldr	r2, [pc, #516]	; (8000d64 <menu+0x8d4>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fc45 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000b66:	2102      	movs	r1, #2
 8000b68:	487f      	ldr	r0, [pc, #508]	; (8000d68 <menu+0x8d8>)
 8000b6a:	f007 fb05 	bl	8008178 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d119      	bne.n	8000ba8 <menu+0x718>
 8000b74:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <menu+0x8dc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d012      	beq.n	8000ba8 <menu+0x718>
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <menu+0x8e0>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10e      	bne.n	8000ba8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000b8a:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <menu+0x8e4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b78      	ldr	r3, [pc, #480]	; (8000d74 <menu+0x8e4>)
 8000b94:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000b96:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <menu+0x8e4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d902      	bls.n	8000ba4 <menu+0x714>
				hataGostermeSirasi = 0;
 8000b9e:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <menu+0x8e4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ba4:	f003 fbd8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ba8:	2104      	movs	r1, #4
 8000baa:	486f      	ldr	r0, [pc, #444]	; (8000d68 <menu+0x8d8>)
 8000bac:	f007 fae4 	bl	8008178 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d119      	bne.n	8000bea <menu+0x75a>
 8000bb6:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <menu+0x8dc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <menu+0x75a>
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <menu+0x8e0>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10e      	bne.n	8000bea <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000bcc:	4b69      	ldr	r3, [pc, #420]	; (8000d74 <menu+0x8e4>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b67      	ldr	r3, [pc, #412]	; (8000d74 <menu+0x8e4>)
 8000bd6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000bd8:	4b66      	ldr	r3, [pc, #408]	; (8000d74 <menu+0x8e4>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b0b      	cmp	r3, #11
 8000bde:	d902      	bls.n	8000be6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000be0:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <menu+0x8e4>)
 8000be2:	220a      	movs	r2, #10
 8000be4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000be6:	f003 fbb7 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000bea:	2108      	movs	r1, #8
 8000bec:	485e      	ldr	r0, [pc, #376]	; (8000d68 <menu+0x8d8>)
 8000bee:	f007 fac3 	bl	8008178 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d153      	bne.n	8000ca0 <menu+0x810>
 8000bf8:	4b5c      	ldr	r3, [pc, #368]	; (8000d6c <menu+0x8dc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d04c      	beq.n	8000ca0 <menu+0x810>
 8000c06:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <menu+0x8e4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b0a      	cmp	r3, #10
 8000c0c:	d148      	bne.n	8000ca0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000c0e:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <menu+0x8e8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <menu+0x8ec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <menu+0x8f0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <menu+0x8ec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000c2a:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <menu+0x8f4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <menu+0x8ec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <menu+0x8f8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <menu+0x8ec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <menu+0x8fc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <menu+0x8ec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000c54:	4b4e      	ldr	r3, [pc, #312]	; (8000d90 <menu+0x900>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <menu+0x8ec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000c62:	4b4c      	ldr	r3, [pc, #304]	; (8000d94 <menu+0x904>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <menu+0x8ec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <menu+0x908>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <menu+0x8ec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <menu+0x90c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <menu+0x8ec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <menu+0x910>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <menu+0x8ec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <menu+0x914>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000ca0:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <menu+0x918>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	f040 80fc 	bne.w	8000ea2 <menu+0xa12>
		if(dilSecim == 0) {
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <menu+0x8d0>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d105      	bne.n	8000cbe <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <menu+0x91c>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fb9a 	bl	80003f0 <lcd_print>
 8000cbc:	e008      	b.n	8000cd0 <menu+0x840>
		} else if(dilSecim == 1) {
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <menu+0x8d0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d104      	bne.n	8000cd0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000cc6:	4a3a      	ldr	r2, [pc, #232]	; (8000db0 <menu+0x920>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fb90 	bl	80003f0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <menu+0x8e0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d003      	beq.n	8000ce0 <menu+0x850>
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <menu+0x8e0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d112      	bne.n	8000d06 <menu+0x876>
			if(dilSecim == 0) {
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <menu+0x8d0>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000ce8:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <menu+0x924>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	2002      	movs	r0, #2
 8000cee:	f7ff fb7f 	bl	80003f0 <lcd_print>
 8000cf2:	e008      	b.n	8000d06 <menu+0x876>
			} else if(dilSecim == 1) {
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <menu+0x8d0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d104      	bne.n	8000d06 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <menu+0x928>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fb75 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <menu+0x92c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d116      	bne.n	8000d3c <menu+0x8ac>
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <menu+0x8e0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d112      	bne.n	8000d3c <menu+0x8ac>
			if(dilSecim == 0) {
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <menu+0x8d0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d105      	bne.n	8000d2a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <menu+0x930>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff fb64 	bl	80003f0 <lcd_print>
 8000d28:	e008      	b.n	8000d3c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <menu+0x8d0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d104      	bne.n	8000d3c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <menu+0x934>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fb5a 	bl	80003f0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <menu+0x92c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d14c      	bne.n	8000dde <menu+0x94e>
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <menu+0x8e0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d148      	bne.n	8000dde <menu+0x94e>
			if(dilSecim == 0) {
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <menu+0x8d0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d13b      	bne.n	8000dcc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <menu+0x938>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fb49 	bl	80003f0 <lcd_print>
 8000d5e:	e03e      	b.n	8000dde <menu+0x94e>
 8000d60:	20000c9c 	.word	0x20000c9c
 8000d64:	0800ca14 	.word	0x0800ca14
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	20000caa 	.word	0x20000caa
 8000d70:	20000c8b 	.word	0x20000c8b
 8000d74:	20000c7e 	.word	0x20000c7e
 8000d78:	20000c9d 	.word	0x20000c9d
 8000d7c:	20000c14 	.word	0x20000c14
 8000d80:	20000c9e 	.word	0x20000c9e
 8000d84:	20000c9f 	.word	0x20000c9f
 8000d88:	20000ca0 	.word	0x20000ca0
 8000d8c:	20000ca1 	.word	0x20000ca1
 8000d90:	20000ca2 	.word	0x20000ca2
 8000d94:	20000ca3 	.word	0x20000ca3
 8000d98:	20000ca4 	.word	0x20000ca4
 8000d9c:	20000ca5 	.word	0x20000ca5
 8000da0:	20000ca6 	.word	0x20000ca6
 8000da4:	20000ca7 	.word	0x20000ca7
 8000da8:	20000c7c 	.word	0x20000c7c
 8000dac:	0800ca28 	.word	0x0800ca28
 8000db0:	0800ca3c 	.word	0x0800ca3c
 8000db4:	0800ca50 	.word	0x0800ca50
 8000db8:	0800ca64 	.word	0x0800ca64
 8000dbc:	20000c7d 	.word	0x20000c7d
 8000dc0:	0800ca78 	.word	0x0800ca78
 8000dc4:	0800ca88 	.word	0x0800ca88
 8000dc8:	0800ca98 	.word	0x0800ca98
			} else if(dilSecim == 1) {
 8000dcc:	4b98      	ldr	r3, [pc, #608]	; (8001030 <menu+0xba0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8000dd4:	4a97      	ldr	r2, [pc, #604]	; (8001034 <menu+0xba4>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fb09 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000dde:	2102      	movs	r1, #2
 8000de0:	4895      	ldr	r0, [pc, #596]	; (8001038 <menu+0xba8>)
 8000de2:	f007 f9c9 	bl	8008178 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d119      	bne.n	8000e20 <menu+0x990>
 8000dec:	4b93      	ldr	r3, [pc, #588]	; (800103c <menu+0xbac>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f083 0301 	eor.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d012      	beq.n	8000e20 <menu+0x990>
 8000dfa:	4b91      	ldr	r3, [pc, #580]	; (8001040 <menu+0xbb0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10e      	bne.n	8000e20 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8000e02:	4b90      	ldr	r3, [pc, #576]	; (8001044 <menu+0xbb4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <menu+0xbb4>)
 8000e0c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000e0e:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <menu+0xbb4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d902      	bls.n	8000e1c <menu+0x98c>
				calismaSekli = 0;
 8000e16:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <menu+0xbb4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000e1c:	f003 fa9c 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e20:	2104      	movs	r1, #4
 8000e22:	4885      	ldr	r0, [pc, #532]	; (8001038 <menu+0xba8>)
 8000e24:	f007 f9a8 	bl	8008178 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d119      	bne.n	8000e62 <menu+0x9d2>
 8000e2e:	4b83      	ldr	r3, [pc, #524]	; (800103c <menu+0xbac>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f083 0301 	eor.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d012      	beq.n	8000e62 <menu+0x9d2>
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <menu+0xbb0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10e      	bne.n	8000e62 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8000e44:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <menu+0xbb4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b7d      	ldr	r3, [pc, #500]	; (8001044 <menu+0xbb4>)
 8000e4e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000e50:	4b7c      	ldr	r3, [pc, #496]	; (8001044 <menu+0xbb4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <menu+0x9ce>
	    		calismaSekli = 1;
 8000e58:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <menu+0xbb4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000e5e:	f003 fa7b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000e62:	2108      	movs	r1, #8
 8000e64:	4874      	ldr	r0, [pc, #464]	; (8001038 <menu+0xba8>)
 8000e66:	f007 f987 	bl	8008178 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d118      	bne.n	8000ea2 <menu+0xa12>
 8000e70:	4b72      	ldr	r3, [pc, #456]	; (800103c <menu+0xbac>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8000e7e:	4b71      	ldr	r3, [pc, #452]	; (8001044 <menu+0xbb4>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b71      	ldr	r3, [pc, #452]	; (8001048 <menu+0xbb8>)
 8000e84:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <menu+0xbb4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <menu+0xa0c>
				altLimit = 1;
 8000e8e:	4b6f      	ldr	r3, [pc, #444]	; (800104c <menu+0xbbc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <menu+0xbbc>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <menu+0xbb8>)
 8000e9a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz=1;
 8000e9c:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <menu+0xbc0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000ea2:	4b6c      	ldr	r3, [pc, #432]	; (8001054 <menu+0xbc4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	f040 8083 	bne.w	8000fb2 <menu+0xb22>
		if(dilSecim == 0) {
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <menu+0xba0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000eb4:	4a68      	ldr	r2, [pc, #416]	; (8001058 <menu+0xbc8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fa99 	bl	80003f0 <lcd_print>
 8000ebe:	e008      	b.n	8000ed2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <menu+0xba0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d104      	bne.n	8000ed2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000ec8:	4a64      	ldr	r2, [pc, #400]	; (800105c <menu+0xbcc>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fa8f 	bl	80003f0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000ed2:	4b63      	ldr	r3, [pc, #396]	; (8001060 <menu+0xbd0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d113      	bne.n	8000f02 <menu+0xa72>
			if(dilSecim == 0) {
 8000eda:	4b55      	ldr	r3, [pc, #340]	; (8001030 <menu+0xba0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8000ee2:	4a60      	ldr	r2, [pc, #384]	; (8001064 <menu+0xbd4>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fa82 	bl	80003f0 <lcd_print>
 8000eec:	e012      	b.n	8000f14 <menu+0xa84>
			} else if(dilSecim == 1) {
 8000eee:	4b50      	ldr	r3, [pc, #320]	; (8001030 <menu+0xba0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8000ef6:	4a5c      	ldr	r2, [pc, #368]	; (8001068 <menu+0xbd8>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fa78 	bl	80003f0 <lcd_print>
 8000f00:	e008      	b.n	8000f14 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <menu+0xbd0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d104      	bne.n	8000f14 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8000f0a:	4a58      	ldr	r2, [pc, #352]	; (800106c <menu+0xbdc>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fa6e 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f14:	2102      	movs	r1, #2
 8000f16:	4848      	ldr	r0, [pc, #288]	; (8001038 <menu+0xba8>)
 8000f18:	f007 f92e 	bl	8008178 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d115      	bne.n	8000f4e <menu+0xabe>
 8000f22:	4b46      	ldr	r3, [pc, #280]	; (800103c <menu+0xbac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00e      	beq.n	8000f4e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <menu+0xbd0>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <menu+0xbd0>)
 8000f3a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <menu+0xbd0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d902      	bls.n	8000f4a <menu+0xaba>
				emniyetCercevesi = 0;
 8000f44:	4b46      	ldr	r3, [pc, #280]	; (8001060 <menu+0xbd0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000f4a:	f003 fa05 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4839      	ldr	r0, [pc, #228]	; (8001038 <menu+0xba8>)
 8000f52:	f007 f911 	bl	8008178 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d115      	bne.n	8000f88 <menu+0xaf8>
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <menu+0xbac>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00e      	beq.n	8000f88 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <menu+0xbd0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <menu+0xbd0>)
 8000f74:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <menu+0xbd0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <menu+0xbd0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8000f84:	f003 f9e8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8000f88:	2108      	movs	r1, #8
 8000f8a:	482b      	ldr	r0, [pc, #172]	; (8001038 <menu+0xba8>)
 8000f8c:	f007 f8f4 	bl	8008178 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10d      	bne.n	8000fb2 <menu+0xb22>
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <menu+0xbac>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <menu+0xbd0>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <menu+0xbb8>)
 8000faa:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <menu+0xbc0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <menu+0xbc4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	f040 80ba 	bne.w	8001130 <menu+0xca0>
		if(dilSecim == 0) {
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <menu+0xba0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <menu+0xbe0>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fa11 	bl	80003f0 <lcd_print>
 8000fce:	e008      	b.n	8000fe2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <menu+0xba0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d104      	bne.n	8000fe2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <menu+0xbe4>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fa07 	bl	80003f0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <menu+0xbe8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d113      	bne.n	8001012 <menu+0xb82>
			if(dilSecim == 0) {
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <menu+0xba0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <menu+0xbd4>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f7ff f9fa 	bl	80003f0 <lcd_print>
 8000ffc:	e049      	b.n	8001092 <menu+0xc02>
			} else if(dilSecim == 1) {
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <menu+0xba0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d145      	bne.n	8001092 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <menu+0xbd8>)
 8001008:	2101      	movs	r1, #1
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff f9f0 	bl	80003f0 <lcd_print>
 8001010:	e03f      	b.n	8001092 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <menu+0xbe8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d13b      	bne.n	8001092 <menu+0xc02>
			if(dilSecim == 0) {
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <menu+0xba0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d12e      	bne.n	8001080 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <menu+0xbec>)
 8001024:	2101      	movs	r1, #1
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff f9e2 	bl	80003f0 <lcd_print>
 800102c:	e031      	b.n	8001092 <menu+0xc02>
 800102e:	bf00      	nop
 8001030:	20000c9c 	.word	0x20000c9c
 8001034:	0800caa8 	.word	0x0800caa8
 8001038:	40010800 	.word	0x40010800
 800103c:	20000caa 	.word	0x20000caa
 8001040:	20000c8b 	.word	0x20000c8b
 8001044:	20000c7d 	.word	0x20000c7d
 8001048:	20000c14 	.word	0x20000c14
 800104c:	20000c82 	.word	0x20000c82
 8001050:	20000ca7 	.word	0x20000ca7
 8001054:	20000c7c 	.word	0x20000c7c
 8001058:	0800cab8 	.word	0x0800cab8
 800105c:	0800cacc 	.word	0x0800cacc
 8001060:	20000c80 	.word	0x20000c80
 8001064:	0800cae0 	.word	0x0800cae0
 8001068:	0800caf4 	.word	0x0800caf4
 800106c:	0800cb08 	.word	0x0800cb08
 8001070:	0800cb18 	.word	0x0800cb18
 8001074:	0800cb2c 	.word	0x0800cb2c
 8001078:	20000c81 	.word	0x20000c81
 800107c:	0800cb40 	.word	0x0800cb40
			} else if(dilSecim == 1) {
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <menu+0xe3c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d104      	bne.n	8001092 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001088:	4a91      	ldr	r2, [pc, #580]	; (80012d0 <menu+0xe40>)
 800108a:	2101      	movs	r1, #1
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff f9af 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001092:	2102      	movs	r1, #2
 8001094:	488f      	ldr	r0, [pc, #572]	; (80012d4 <menu+0xe44>)
 8001096:	f007 f86f 	bl	8008178 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d115      	bne.n	80010cc <menu+0xc3c>
 80010a0:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <menu+0xe48>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00e      	beq.n	80010cc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <menu+0xe4c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b89      	ldr	r3, [pc, #548]	; (80012dc <menu+0xe4c>)
 80010b8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <menu+0xe4c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d902      	bls.n	80010c8 <menu+0xc38>
				yavaslamaLimit = 0;
 80010c2:	4b86      	ldr	r3, [pc, #536]	; (80012dc <menu+0xe4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80010c8:	f003 f946 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80010cc:	2104      	movs	r1, #4
 80010ce:	4881      	ldr	r0, [pc, #516]	; (80012d4 <menu+0xe44>)
 80010d0:	f007 f852 	bl	8008178 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d115      	bne.n	8001106 <menu+0xc76>
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <menu+0xe48>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00e      	beq.n	8001106 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <menu+0xe4c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <menu+0xe4c>)
 80010f2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80010f4:	4b79      	ldr	r3, [pc, #484]	; (80012dc <menu+0xe4c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80010fc:	4b77      	ldr	r3, [pc, #476]	; (80012dc <menu+0xe4c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001102:	f003 f929 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001106:	2108      	movs	r1, #8
 8001108:	4872      	ldr	r0, [pc, #456]	; (80012d4 <menu+0xe44>)
 800110a:	f007 f835 	bl	8008178 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10d      	bne.n	8001130 <menu+0xca0>
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <menu+0xe48>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001122:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <menu+0xe4c>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <menu+0xe50>)
 8001128:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <menu+0xe54>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001130:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <menu+0xe58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b05      	cmp	r3, #5
 8001136:	f040 80b9 	bne.w	80012ac <menu+0xe1c>
		if(dilSecim == 0) {
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <menu+0xe3c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001142:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <menu+0xe5c>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff f952 	bl	80003f0 <lcd_print>
 800114c:	e008      	b.n	8001160 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <menu+0xe3c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001156:	4a66      	ldr	r2, [pc, #408]	; (80012f0 <menu+0xe60>)
 8001158:	2101      	movs	r1, #1
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff f948 	bl	80003f0 <lcd_print>
		}

		if(altLimit == 0) {
 8001160:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <menu+0xe64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d113      	bne.n	8001190 <menu+0xd00>
			if(dilSecim == 0) {
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <menu+0xe3c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001170:	4a61      	ldr	r2, [pc, #388]	; (80012f8 <menu+0xe68>)
 8001172:	2101      	movs	r1, #1
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff f93b 	bl	80003f0 <lcd_print>
 800117a:	e020      	b.n	80011be <menu+0xd2e>
			} else if(dilSecim == 1) {
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <menu+0xe3c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d11c      	bne.n	80011be <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <menu+0xe6c>)
 8001186:	2101      	movs	r1, #1
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff f931 	bl	80003f0 <lcd_print>
 800118e:	e016      	b.n	80011be <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001190:	4b58      	ldr	r3, [pc, #352]	; (80012f4 <menu+0xe64>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d112      	bne.n	80011be <menu+0xd2e>
			if(dilSecim == 0){
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <menu+0xe3c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80011a0:	4a57      	ldr	r2, [pc, #348]	; (8001300 <menu+0xe70>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff f923 	bl	80003f0 <lcd_print>
 80011aa:	e008      	b.n	80011be <menu+0xd2e>
			} else if(dilSecim == 1){
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <menu+0xe3c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d104      	bne.n	80011be <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <menu+0xe40>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff f919 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80011be:	2102      	movs	r1, #2
 80011c0:	4844      	ldr	r0, [pc, #272]	; (80012d4 <menu+0xe44>)
 80011c2:	f006 ffd9 	bl	8008178 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d119      	bne.n	8001200 <menu+0xd70>
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <menu+0xe48>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <menu+0xd70>
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <menu+0xe74>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <menu+0xd70>
			altLimit = altLimit + 1;
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <menu+0xe64>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <menu+0xe64>)
 80011ec:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <menu+0xe64>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d902      	bls.n	80011fc <menu+0xd6c>
				altLimit = 0;
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <menu+0xe64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011fc:	f003 f8ac 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001200:	2104      	movs	r1, #4
 8001202:	4834      	ldr	r0, [pc, #208]	; (80012d4 <menu+0xe44>)
 8001204:	f006 ffb8 	bl	8008178 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d119      	bne.n	8001242 <menu+0xdb2>
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <menu+0xe48>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	f083 0301 	eor.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d012      	beq.n	8001242 <menu+0xdb2>
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <menu+0xe74>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10e      	bne.n	8001242 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <menu+0xe64>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <menu+0xe64>)
 800122e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <menu+0xe64>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <menu+0xdae>
		   		altLimit = 1;
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <menu+0xe64>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800123e:	f003 f88b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001242:	2108      	movs	r1, #8
 8001244:	4823      	ldr	r0, [pc, #140]	; (80012d4 <menu+0xe44>)
 8001246:	f006 ff97 	bl	8008178 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12d      	bne.n	80012ac <menu+0xe1c>
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <menu+0xe48>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d026      	beq.n	80012ac <menu+0xe1c>
			eepromData[5] = altLimit;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <menu+0xe64>)
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <menu+0xe50>)
 8001264:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <menu+0xe64>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d110      	bne.n	8001290 <menu+0xe00>
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <menu+0xe78>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <menu+0xdee>
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <menu+0xe78>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d108      	bne.n	8001290 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <menu+0xe78>)
 8001280:	2203      	movs	r2, #3
 8001282:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <menu+0xe78>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <menu+0xe50>)
 800128a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800128e:	e00a      	b.n	80012a6 <menu+0xe16>
			} else if(altLimit == 0) {
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <menu+0xe64>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <menu+0xe16>
				platformSilindirTipi = 0;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <menu+0xe7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <menu+0xe7c>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <menu+0xe50>)
 80012a4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz=1;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <menu+0xe54>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <menu+0xe58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	f040 80b6 	bne.w	8001422 <menu+0xf92>
		if(dilSecim == 0) {
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <menu+0xe3c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d12a      	bne.n	8001314 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <menu+0xe80>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff f894 	bl	80003f0 <lcd_print>
 80012c8:	e02d      	b.n	8001326 <menu+0xe96>
 80012ca:	bf00      	nop
 80012cc:	20000c9c 	.word	0x20000c9c
 80012d0:	0800cb54 	.word	0x0800cb54
 80012d4:	40010800 	.word	0x40010800
 80012d8:	20000caa 	.word	0x20000caa
 80012dc:	20000c81 	.word	0x20000c81
 80012e0:	20000c14 	.word	0x20000c14
 80012e4:	20000ca7 	.word	0x20000ca7
 80012e8:	20000c7c 	.word	0x20000c7c
 80012ec:	0800cb68 	.word	0x0800cb68
 80012f0:	0800cb7c 	.word	0x0800cb7c
 80012f4:	20000c82 	.word	0x20000c82
 80012f8:	0800cae0 	.word	0x0800cae0
 80012fc:	0800caf4 	.word	0x0800caf4
 8001300:	0800cb40 	.word	0x0800cb40
 8001304:	20000c7d 	.word	0x20000c7d
 8001308:	20000c89 	.word	0x20000c89
 800130c:	20000c8f 	.word	0x20000c8f
 8001310:	0800cb90 	.word	0x0800cb90
		} else if(dilSecim == 1){
 8001314:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <menu+0x1070>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d104      	bne.n	8001326 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <menu+0x1074>)
 800131e:	2101      	movs	r1, #1
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff f865 	bl	80003f0 <lcd_print>
		}
		if(basincSalteri == 0){
 8001326:	4b78      	ldr	r3, [pc, #480]	; (8001508 <menu+0x1078>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d113      	bne.n	8001356 <menu+0xec6>
			if(dilSecim == 0) {
 800132e:	4b74      	ldr	r3, [pc, #464]	; (8001500 <menu+0x1070>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001336:	4a75      	ldr	r2, [pc, #468]	; (800150c <menu+0x107c>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff f858 	bl	80003f0 <lcd_print>
 8001340:	e020      	b.n	8001384 <menu+0xef4>
			} else if(dilSecim == 1){
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <menu+0x1070>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d11c      	bne.n	8001384 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800134a:	4a71      	ldr	r2, [pc, #452]	; (8001510 <menu+0x1080>)
 800134c:	2101      	movs	r1, #1
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff f84e 	bl	80003f0 <lcd_print>
 8001354:	e016      	b.n	8001384 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001356:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <menu+0x1078>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d112      	bne.n	8001384 <menu+0xef4>
			if(dilSecim == 0) {
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <menu+0x1070>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001366:	4a6b      	ldr	r2, [pc, #428]	; (8001514 <menu+0x1084>)
 8001368:	2101      	movs	r1, #1
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff f840 	bl	80003f0 <lcd_print>
 8001370:	e008      	b.n	8001384 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <menu+0x1070>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800137a:	4a67      	ldr	r2, [pc, #412]	; (8001518 <menu+0x1088>)
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff f836 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001384:	2102      	movs	r1, #2
 8001386:	4865      	ldr	r0, [pc, #404]	; (800151c <menu+0x108c>)
 8001388:	f006 fef6 	bl	8008178 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d115      	bne.n	80013be <menu+0xf2e>
 8001392:	4b63      	ldr	r3, [pc, #396]	; (8001520 <menu+0x1090>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <menu+0x1078>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <menu+0x1078>)
 80013aa:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <menu+0x1078>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d902      	bls.n	80013ba <menu+0xf2a>
				basincSalteri = 0;
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <menu+0x1078>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013ba:	f002 ffcd 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013be:	2104      	movs	r1, #4
 80013c0:	4856      	ldr	r0, [pc, #344]	; (800151c <menu+0x108c>)
 80013c2:	f006 fed9 	bl	8008178 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d115      	bne.n	80013f8 <menu+0xf68>
 80013cc:	4b54      	ldr	r3, [pc, #336]	; (8001520 <menu+0x1090>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00e      	beq.n	80013f8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80013da:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <menu+0x1078>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <menu+0x1078>)
 80013e4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <menu+0x1078>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <menu+0xf64>
		   		basincSalteri = 1;
 80013ee:	4b46      	ldr	r3, [pc, #280]	; (8001508 <menu+0x1078>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80013f4:	f002 ffb0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80013f8:	2108      	movs	r1, #8
 80013fa:	4848      	ldr	r0, [pc, #288]	; (800151c <menu+0x108c>)
 80013fc:	f006 febc 	bl	8008178 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <menu+0xf92>
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <menu+0x1090>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <menu+0x1078>)
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <menu+0x1094>)
 800141a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <menu+0x1098>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <menu+0x109c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b07      	cmp	r3, #7
 8001428:	f040 80f5 	bne.w	8001616 <menu+0x1186>
		if(dilSecim == 0) {
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <menu+0x1070>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <menu+0x10a0>)
 8001436:	2101      	movs	r1, #1
 8001438:	2001      	movs	r0, #1
 800143a:	f7fe ffd9 	bl	80003f0 <lcd_print>
 800143e:	e008      	b.n	8001452 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <menu+0x1070>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d104      	bne.n	8001452 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001448:	4a3a      	ldr	r2, [pc, #232]	; (8001534 <menu+0x10a4>)
 800144a:	2101      	movs	r1, #1
 800144c:	2001      	movs	r0, #1
 800144e:	f7fe ffcf 	bl	80003f0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <menu+0x10a8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d113      	bne.n	8001482 <menu+0xff2>
			if(dilSecim == 0) {
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <menu+0x1070>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <menu+0x107c>)
 8001464:	2101      	movs	r1, #1
 8001466:	2002      	movs	r0, #2
 8001468:	f7fe ffc2 	bl	80003f0 <lcd_print>
 800146c:	e079      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1){
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <menu+0x1070>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d175      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <menu+0x1080>)
 8001478:	2101      	movs	r1, #1
 800147a:	2002      	movs	r0, #2
 800147c:	f7fe ffb8 	bl	80003f0 <lcd_print>
 8001480:	e06f      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <menu+0x10a8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d113      	bne.n	80014b2 <menu+0x1022>
			if(dilSecim == 0) {
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <menu+0x1070>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001492:	4a2a      	ldr	r2, [pc, #168]	; (800153c <menu+0x10ac>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f7fe ffaa 	bl	80003f0 <lcd_print>
 800149c:	e061      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <menu+0x1070>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d15d      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <menu+0x10b0>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7fe ffa0 	bl	80003f0 <lcd_print>
 80014b0:	e057      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <menu+0x10a8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d113      	bne.n	80014e2 <menu+0x1052>
			if(dilSecim == 0) {
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <menu+0x1070>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <menu+0x10b4>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7fe ff92 	bl	80003f0 <lcd_print>
 80014cc:	e049      	b.n	8001562 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <menu+0x1070>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d145      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <menu+0x10b8>)
 80014d8:	2101      	movs	r1, #1
 80014da:	2002      	movs	r0, #2
 80014dc:	f7fe ff88 	bl	80003f0 <lcd_print>
 80014e0:	e03f      	b.n	8001562 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <menu+0x10a8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d13b      	bne.n	8001562 <menu+0x10d2>
			if(dilSecim == 0) {
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <menu+0x1070>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d12e      	bne.n	8001550 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <menu+0x10bc>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	2002      	movs	r0, #2
 80014f8:	f7fe ff7a 	bl	80003f0 <lcd_print>
 80014fc:	e031      	b.n	8001562 <menu+0x10d2>
 80014fe:	bf00      	nop
 8001500:	20000c9c 	.word	0x20000c9c
 8001504:	0800cba0 	.word	0x0800cba0
 8001508:	20000c83 	.word	0x20000c83
 800150c:	0800cae0 	.word	0x0800cae0
 8001510:	0800caf4 	.word	0x0800caf4
 8001514:	0800cb40 	.word	0x0800cb40
 8001518:	0800cb54 	.word	0x0800cb54
 800151c:	40010800 	.word	0x40010800
 8001520:	20000caa 	.word	0x20000caa
 8001524:	20000c14 	.word	0x20000c14
 8001528:	20000ca7 	.word	0x20000ca7
 800152c:	20000c7c 	.word	0x20000c7c
 8001530:	0800cbb0 	.word	0x0800cbb0
 8001534:	0800cbc4 	.word	0x0800cbc4
 8001538:	20000c84 	.word	0x20000c84
 800153c:	0800cbd8 	.word	0x0800cbd8
 8001540:	0800cbec 	.word	0x0800cbec
 8001544:	0800cc00 	.word	0x0800cc00
 8001548:	0800cc14 	.word	0x0800cc14
 800154c:	0800cc28 	.word	0x0800cc28
			} else if(dilSecim == 1){
 8001550:	4b99      	ldr	r3, [pc, #612]	; (80017b8 <menu+0x1328>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d104      	bne.n	8001562 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001558:	4a98      	ldr	r2, [pc, #608]	; (80017bc <menu+0x132c>)
 800155a:	2101      	movs	r1, #1
 800155c:	2002      	movs	r0, #2
 800155e:	f7fe ff47 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001562:	2102      	movs	r1, #2
 8001564:	4896      	ldr	r0, [pc, #600]	; (80017c0 <menu+0x1330>)
 8001566:	f006 fe07 	bl	8008178 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d115      	bne.n	800159c <menu+0x110c>
 8001570:	4b94      	ldr	r3, [pc, #592]	; (80017c4 <menu+0x1334>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800157e:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <menu+0x1338>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <menu+0x1338>)
 8001588:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800158a:	4b8f      	ldr	r3, [pc, #572]	; (80017c8 <menu+0x1338>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d902      	bls.n	8001598 <menu+0x1108>
				kapiSecimleri = 0;
 8001592:	4b8d      	ldr	r3, [pc, #564]	; (80017c8 <menu+0x1338>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001598:	f002 fede 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800159c:	2104      	movs	r1, #4
 800159e:	4888      	ldr	r0, [pc, #544]	; (80017c0 <menu+0x1330>)
 80015a0:	f006 fdea 	bl	8008178 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d115      	bne.n	80015d6 <menu+0x1146>
 80015aa:	4b86      	ldr	r3, [pc, #536]	; (80017c4 <menu+0x1334>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00e      	beq.n	80015d6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80015b8:	4b83      	ldr	r3, [pc, #524]	; (80017c8 <menu+0x1338>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <menu+0x1338>)
 80015c2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80015c4:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <menu+0x1338>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d902      	bls.n	80015d2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80015cc:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <menu+0x1338>)
 80015ce:	2203      	movs	r2, #3
 80015d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80015d2:	f002 fec1 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80015d6:	2108      	movs	r1, #8
 80015d8:	4879      	ldr	r0, [pc, #484]	; (80017c0 <menu+0x1330>)
 80015da:	f006 fdcd 	bl	8008178 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d118      	bne.n	8001616 <menu+0x1186>
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <menu+0x1334>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d011      	beq.n	8001616 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <menu+0x1338>)
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	4b75      	ldr	r3, [pc, #468]	; (80017cc <menu+0x133c>)
 80015f8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <menu+0x1338>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <menu+0x1180>
				altLimit = 1;
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <menu+0x1340>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <menu+0x1340>)
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <menu+0x133c>)
 800160e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001610:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <menu+0x1344>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <menu+0x1348>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b08      	cmp	r3, #8
 800161c:	f040 8092 	bne.w	8001744 <menu+0x12b4>
		if(dilSecim == 0) {
 8001620:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <menu+0x1328>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001628:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <menu+0x134c>)
 800162a:	2101      	movs	r1, #1
 800162c:	2001      	movs	r0, #1
 800162e:	f7fe fedf 	bl	80003f0 <lcd_print>
 8001632:	e008      	b.n	8001646 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001634:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <menu+0x1328>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800163c:	4a68      	ldr	r2, [pc, #416]	; (80017e0 <menu+0x1350>)
 800163e:	2101      	movs	r1, #1
 8001640:	2001      	movs	r0, #1
 8001642:	f7fe fed5 	bl	80003f0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <menu+0x1354>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <menu+0x11e6>
			if(dilSecim == 0) {
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <menu+0x1328>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001656:	4a64      	ldr	r2, [pc, #400]	; (80017e8 <menu+0x1358>)
 8001658:	2101      	movs	r1, #1
 800165a:	2002      	movs	r0, #2
 800165c:	f7fe fec8 	bl	80003f0 <lcd_print>
 8001660:	e020      	b.n	80016a4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <menu+0x1328>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11c      	bne.n	80016a4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800166a:	4a60      	ldr	r2, [pc, #384]	; (80017ec <menu+0x135c>)
 800166c:	2101      	movs	r1, #1
 800166e:	2002      	movs	r0, #2
 8001670:	f7fe febe 	bl	80003f0 <lcd_print>
 8001674:	e016      	b.n	80016a4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <menu+0x1354>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d112      	bne.n	80016a4 <menu+0x1214>
			if(dilSecim == 0){
 800167e:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <menu+0x1328>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <menu+0x1360>)
 8001688:	2101      	movs	r1, #1
 800168a:	2002      	movs	r0, #2
 800168c:	f7fe feb0 	bl	80003f0 <lcd_print>
 8001690:	e008      	b.n	80016a4 <menu+0x1214>
			} else if(dilSecim == 1){
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <menu+0x1328>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800169a:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <menu+0x1364>)
 800169c:	2101      	movs	r1, #1
 800169e:	2002      	movs	r0, #2
 80016a0:	f7fe fea6 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80016a4:	2102      	movs	r1, #2
 80016a6:	4846      	ldr	r0, [pc, #280]	; (80017c0 <menu+0x1330>)
 80016a8:	f006 fd66 	bl	8008178 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d115      	bne.n	80016de <menu+0x124e>
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <menu+0x1334>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f083 0301 	eor.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80016c0:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <menu+0x1354>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <menu+0x1354>)
 80016ca:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <menu+0x1354>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d902      	bls.n	80016da <menu+0x124a>
				kapiAcTipi = 0;
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <menu+0x1354>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016da:	f002 fe3d 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016de:	2104      	movs	r1, #4
 80016e0:	4837      	ldr	r0, [pc, #220]	; (80017c0 <menu+0x1330>)
 80016e2:	f006 fd49 	bl	8008178 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d115      	bne.n	8001718 <menu+0x1288>
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <menu+0x1334>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00e      	beq.n	8001718 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <menu+0x1354>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <menu+0x1354>)
 8001704:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <menu+0x1354>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <menu+0x1284>
		   		kapiAcTipi = 1;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <menu+0x1354>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001714:	f002 fe20 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001718:	2108      	movs	r1, #8
 800171a:	4829      	ldr	r0, [pc, #164]	; (80017c0 <menu+0x1330>)
 800171c:	f006 fd2c 	bl	8008178 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10e      	bne.n	8001744 <menu+0x12b4>
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <menu+0x1334>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <menu+0x1354>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <menu+0x133c>)
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <menu+0x1344>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <menu+0x1348>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b09      	cmp	r3, #9
 800174a:	f040 80b9 	bne.w	80018c0 <menu+0x1430>
		if(dilSecim == 0){
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <menu+0x1328>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <menu+0x1368>)
 8001758:	2101      	movs	r1, #1
 800175a:	2001      	movs	r0, #1
 800175c:	f7fe fe48 	bl	80003f0 <lcd_print>
 8001760:	e008      	b.n	8001774 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <menu+0x1328>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d104      	bne.n	8001774 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <menu+0x136c>)
 800176c:	2101      	movs	r1, #1
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe fe3e 	bl	80003f0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <menu+0x1370>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <menu+0x1374>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f7fe fe35 	bl	80003f0 <lcd_print>
 8001786:	e04c      	b.n	8001822 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <menu+0x1370>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d13f      	bne.n	8001810 <menu+0x1380>
			if(dilSecim == 0){
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <menu+0x1328>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <menu+0x1378>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f7fe fe27 	bl	80003f0 <lcd_print>
 80017a2:	e03e      	b.n	8001822 <menu+0x1392>
			} else if(dilSecim == 1) {
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <menu+0x1328>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d13a      	bne.n	8001822 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <menu+0x137c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7fe fe1d 	bl	80003f0 <lcd_print>
 80017b6:	e034      	b.n	8001822 <menu+0x1392>
 80017b8:	20000c9c 	.word	0x20000c9c
 80017bc:	0800cc3c 	.word	0x0800cc3c
 80017c0:	40010800 	.word	0x40010800
 80017c4:	20000caa 	.word	0x20000caa
 80017c8:	20000c84 	.word	0x20000c84
 80017cc:	20000c14 	.word	0x20000c14
 80017d0:	20000c82 	.word	0x20000c82
 80017d4:	20000ca7 	.word	0x20000ca7
 80017d8:	20000c7c 	.word	0x20000c7c
 80017dc:	0800cc50 	.word	0x0800cc50
 80017e0:	0800cc64 	.word	0x0800cc64
 80017e4:	20000c88 	.word	0x20000c88
 80017e8:	0800cc78 	.word	0x0800cc78
 80017ec:	0800cc88 	.word	0x0800cc88
 80017f0:	0800cc98 	.word	0x0800cc98
 80017f4:	0800ccac 	.word	0x0800ccac
 80017f8:	0800ccc0 	.word	0x0800ccc0
 80017fc:	0800ccd4 	.word	0x0800ccd4
 8001800:	20000c85 	.word	0x20000c85
 8001804:	0800cce8 	.word	0x0800cce8
 8001808:	0800ccfc 	.word	0x0800ccfc
 800180c:	0800cd0c 	.word	0x0800cd0c
			}
		} else if(kapi1Tip == 2) {
 8001810:	4b8a      	ldr	r3, [pc, #552]	; (8001a3c <menu+0x15ac>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d104      	bne.n	8001822 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001818:	4a89      	ldr	r2, [pc, #548]	; (8001a40 <menu+0x15b0>)
 800181a:	2101      	movs	r1, #1
 800181c:	2002      	movs	r0, #2
 800181e:	f7fe fde7 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001822:	2102      	movs	r1, #2
 8001824:	4887      	ldr	r0, [pc, #540]	; (8001a44 <menu+0x15b4>)
 8001826:	f006 fca7 	bl	8008178 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d115      	bne.n	800185c <menu+0x13cc>
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <menu+0x15b8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00e      	beq.n	800185c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800183e:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <menu+0x15ac>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <menu+0x15ac>)
 8001848:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800184a:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <menu+0x15ac>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d902      	bls.n	8001858 <menu+0x13c8>
				kapi1Tip = 0;
 8001852:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <menu+0x15ac>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001858:	f002 fd7e 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800185c:	2104      	movs	r1, #4
 800185e:	4879      	ldr	r0, [pc, #484]	; (8001a44 <menu+0x15b4>)
 8001860:	f006 fc8a 	bl	8008178 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	d115      	bne.n	8001896 <menu+0x1406>
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <menu+0x15b8>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f083 0301 	eor.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001878:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <menu+0x15ac>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <menu+0x15ac>)
 8001882:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001884:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <menu+0x15ac>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d902      	bls.n	8001892 <menu+0x1402>
		   		kapi1Tip = 2;
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <menu+0x15ac>)
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001892:	f002 fd61 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001896:	2108      	movs	r1, #8
 8001898:	486a      	ldr	r0, [pc, #424]	; (8001a44 <menu+0x15b4>)
 800189a:	f006 fc6d 	bl	8008178 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10d      	bne.n	80018c0 <menu+0x1430>
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <menu+0x15b8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f083 0301 	eor.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <menu+0x15ac>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <menu+0x15bc>)
 80018b8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <menu+0x15c0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <menu+0x15c4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d17f      	bne.n	80019c8 <menu+0x1538>
		if(dilSecim == 0) {
 80018c8:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <menu+0x15c8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80018d0:	4a62      	ldr	r2, [pc, #392]	; (8001a5c <menu+0x15cc>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7fe fd8b 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80018da:	4a61      	ldr	r2, [pc, #388]	; (8001a60 <menu+0x15d0>)
 80018dc:	2101      	movs	r1, #1
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fd86 	bl	80003f0 <lcd_print>
 80018e4:	e00d      	b.n	8001902 <menu+0x1472>
		} else if(dilSecim == 1) {
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <menu+0x15c8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d109      	bne.n	8001902 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <menu+0x15d4>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7fe fd7c 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80018f8:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <menu+0x15d8>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f7fe fd77 	bl	80003f0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <menu+0x15dc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	220a      	movs	r2, #10
 8001908:	4959      	ldr	r1, [pc, #356]	; (8001a70 <menu+0x15e0>)
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fe38 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <menu+0x15e0>)
 8001912:	2110      	movs	r1, #16
 8001914:	2002      	movs	r0, #2
 8001916:	f7fe fd6b 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800191a:	2102      	movs	r1, #2
 800191c:	4849      	ldr	r0, [pc, #292]	; (8001a44 <menu+0x15b4>)
 800191e:	f006 fc2b 	bl	8008178 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d119      	bne.n	800195c <menu+0x14cc>
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <menu+0x15b8>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <menu+0x14cc>
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <menu+0x15ac>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <menu+0x15dc>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <menu+0x15dc>)
 8001948:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <menu+0x15dc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d902      	bls.n	8001958 <menu+0x14c8>
				kapi1AcSure = 0;
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <menu+0x15dc>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001958:	f002 fcfe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800195c:	2104      	movs	r1, #4
 800195e:	4839      	ldr	r0, [pc, #228]	; (8001a44 <menu+0x15b4>)
 8001960:	f006 fc0a 	bl	8008178 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d119      	bne.n	800199e <menu+0x150e>
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <menu+0x15b8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <menu+0x150e>
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <menu+0x15ac>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10e      	bne.n	800199e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <menu+0x15dc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <menu+0x15dc>)
 800198a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <menu+0x15dc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d902      	bls.n	800199a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <menu+0x15dc>)
 8001996:	2205      	movs	r2, #5
 8001998:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800199a:	f002 fcdd 	bl	8004358 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800199e:	2108      	movs	r1, #8
 80019a0:	4828      	ldr	r0, [pc, #160]	; (8001a44 <menu+0x15b4>)
 80019a2:	f006 fbe9 	bl	8008178 <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10d      	bne.n	80019c8 <menu+0x1538>
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <menu+0x15b8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <menu+0x15dc>)
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <menu+0x15bc>)
 80019c0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <menu+0x15c0>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <menu+0x15c4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b0b      	cmp	r3, #11
 80019ce:	f040 80b5 	bne.w	8001b3c <menu+0x16ac>
		if(dilSecim == 0) {
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <menu+0x15c8>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <menu+0x15e4>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f7fe fd06 	bl	80003f0 <lcd_print>
 80019e4:	e008      	b.n	80019f8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <menu+0x15c8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d104      	bne.n	80019f8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <menu+0x15e8>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7fe fcfc 	bl	80003f0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <menu+0x15ec>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <menu+0x15f0>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7fe fcf3 	bl	80003f0 <lcd_print>
 8001a0a:	e048      	b.n	8001a9e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <menu+0x15ec>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d13b      	bne.n	8001a8c <menu+0x15fc>
			if(dilSecim == 0) {
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <menu+0x15c8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <menu+0x15f4>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7fe fce5 	bl	80003f0 <lcd_print>
 8001a26:	e03a      	b.n	8001a9e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <menu+0x15c8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d136      	bne.n	8001a9e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <menu+0x15f8>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe fcdb 	bl	80003f0 <lcd_print>
 8001a3a:	e030      	b.n	8001a9e <menu+0x160e>
 8001a3c:	20000c85 	.word	0x20000c85
 8001a40:	0800cd20 	.word	0x0800cd20
 8001a44:	40010800 	.word	0x40010800
 8001a48:	20000caa 	.word	0x20000caa
 8001a4c:	20000c14 	.word	0x20000c14
 8001a50:	20000ca7 	.word	0x20000ca7
 8001a54:	20000c7c 	.word	0x20000c7c
 8001a58:	20000c9c 	.word	0x20000c9c
 8001a5c:	0800cd30 	.word	0x0800cd30
 8001a60:	0800cd44 	.word	0x0800cd44
 8001a64:	0800cd54 	.word	0x0800cd54
 8001a68:	0800cd68 	.word	0x0800cd68
 8001a6c:	20000c95 	.word	0x20000c95
 8001a70:	20000c54 	.word	0x20000c54
 8001a74:	0800cd78 	.word	0x0800cd78
 8001a78:	0800cd8c 	.word	0x0800cd8c
 8001a7c:	20000c86 	.word	0x20000c86
 8001a80:	0800cce8 	.word	0x0800cce8
 8001a84:	0800ccfc 	.word	0x0800ccfc
 8001a88:	0800cd0c 	.word	0x0800cd0c
			}
		} else if(kapi2Tip == 2) {
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <menu+0x1828>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d104      	bne.n	8001a9e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001a94:	4a89      	ldr	r2, [pc, #548]	; (8001cbc <menu+0x182c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7fe fca9 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4887      	ldr	r0, [pc, #540]	; (8001cc0 <menu+0x1830>)
 8001aa2:	f006 fb69 	bl	8008178 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d115      	bne.n	8001ad8 <menu+0x1648>
 8001aac:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <menu+0x1834>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <menu+0x1828>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <menu+0x1828>)
 8001ac4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <menu+0x1828>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <menu+0x1644>
				kapi2Tip = 0;
 8001ace:	4b7a      	ldr	r3, [pc, #488]	; (8001cb8 <menu+0x1828>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ad4:	f002 fc40 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4879      	ldr	r0, [pc, #484]	; (8001cc0 <menu+0x1830>)
 8001adc:	f006 fb4c 	bl	8008178 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d115      	bne.n	8001b12 <menu+0x1682>
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <menu+0x1834>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001af4:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <menu+0x1828>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <menu+0x1828>)
 8001afe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <menu+0x1828>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d902      	bls.n	8001b0e <menu+0x167e>
		   		kapi2Tip = 2;
 8001b08:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <menu+0x1828>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b0e:	f002 fc23 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b12:	2108      	movs	r1, #8
 8001b14:	486a      	ldr	r0, [pc, #424]	; (8001cc0 <menu+0x1830>)
 8001b16:	f006 fb2f 	bl	8008178 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10d      	bne.n	8001b3c <menu+0x16ac>
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <menu+0x1834>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001b2e:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <menu+0x1828>)
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <menu+0x1838>)
 8001b34:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <menu+0x183c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <menu+0x1840>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b0c      	cmp	r3, #12
 8001b42:	d17f      	bne.n	8001c44 <menu+0x17b4>
		if(dilSecim == 0) {
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <menu+0x1844>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001b4c:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <menu+0x1848>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7fe fc4d 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001b56:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <menu+0x184c>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fc48 	bl	80003f0 <lcd_print>
 8001b60:	e00d      	b.n	8001b7e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <menu+0x1844>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d109      	bne.n	8001b7e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <menu+0x1850>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7fe fc3e 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001b74:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <menu+0x1854>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7fe fc39 	bl	80003f0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001b7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <menu+0x1858>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	220a      	movs	r2, #10
 8001b84:	4959      	ldr	r1, [pc, #356]	; (8001cec <menu+0x185c>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00a fcfa 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8001b8c:	4a57      	ldr	r2, [pc, #348]	; (8001cec <menu+0x185c>)
 8001b8e:	2110      	movs	r1, #16
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7fe fc2d 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001b96:	2102      	movs	r1, #2
 8001b98:	4849      	ldr	r0, [pc, #292]	; (8001cc0 <menu+0x1830>)
 8001b9a:	f006 faed 	bl	8008178 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <menu+0x1748>
 8001ba4:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <menu+0x1834>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <menu+0x1748>
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <menu+0x1828>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <menu+0x1858>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <menu+0x1858>)
 8001bc4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <menu+0x1858>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d902      	bls.n	8001bd4 <menu+0x1744>
				kapi2AcSure = 0;
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <menu+0x1858>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd4:	f002 fbc0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <menu+0x1830>)
 8001bdc:	f006 facc 	bl	8008178 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d119      	bne.n	8001c1a <menu+0x178a>
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <menu+0x1834>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <menu+0x178a>
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <menu+0x1828>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <menu+0x1858>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <menu+0x1858>)
 8001c06:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <menu+0x1858>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d902      	bls.n	8001c16 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <menu+0x1858>)
 8001c12:	2205      	movs	r2, #5
 8001c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c16:	f002 fb9f 	bl	8004358 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <menu+0x1830>)
 8001c1e:	f006 faab 	bl	8008178 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <menu+0x17b4>
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <menu+0x1834>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <menu+0x1858>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <menu+0x1838>)
 8001c3c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <menu+0x183c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <menu+0x1840>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b0d      	cmp	r3, #13
 8001c4a:	f040 80b5 	bne.w	8001db8 <menu+0x1928>
		if(dilSecim == 0) {
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <menu+0x1844>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <menu+0x1860>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fbc8 	bl	80003f0 <lcd_print>
 8001c60:	e008      	b.n	8001c74 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <menu+0x1844>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d104      	bne.n	8001c74 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001c6a:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <menu+0x1864>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7fe fbbe 	bl	80003f0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <menu+0x1868>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <menu+0x186c>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fbb5 	bl	80003f0 <lcd_print>
 8001c86:	e048      	b.n	8001d1a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <menu+0x1868>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d13b      	bne.n	8001d08 <menu+0x1878>
			if(dilSecim == 0) {
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <menu+0x1844>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <menu+0x1870>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7fe fba7 	bl	80003f0 <lcd_print>
 8001ca2:	e03a      	b.n	8001d1a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <menu+0x1844>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d136      	bne.n	8001d1a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001cac:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <menu+0x1874>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7fe fb9d 	bl	80003f0 <lcd_print>
 8001cb6:	e030      	b.n	8001d1a <menu+0x188a>
 8001cb8:	20000c86 	.word	0x20000c86
 8001cbc:	0800cd20 	.word	0x0800cd20
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	20000caa 	.word	0x20000caa
 8001cc8:	20000c14 	.word	0x20000c14
 8001ccc:	20000ca7 	.word	0x20000ca7
 8001cd0:	20000c7c 	.word	0x20000c7c
 8001cd4:	20000c9c 	.word	0x20000c9c
 8001cd8:	0800cda0 	.word	0x0800cda0
 8001cdc:	0800cd44 	.word	0x0800cd44
 8001ce0:	0800cdb4 	.word	0x0800cdb4
 8001ce4:	0800cd68 	.word	0x0800cd68
 8001ce8:	20000c96 	.word	0x20000c96
 8001cec:	20000c54 	.word	0x20000c54
 8001cf0:	0800cdc8 	.word	0x0800cdc8
 8001cf4:	0800cddc 	.word	0x0800cddc
 8001cf8:	20000c87 	.word	0x20000c87
 8001cfc:	0800cce8 	.word	0x0800cce8
 8001d00:	0800ccfc 	.word	0x0800ccfc
 8001d04:	0800cd0c 	.word	0x0800cd0c
			}
		} else if(kapitablaTip == 2) {
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <menu+0x19e8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d104      	bne.n	8001d1a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8001d10:	4a5a      	ldr	r2, [pc, #360]	; (8001e7c <menu+0x19ec>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7fe fb6b 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4858      	ldr	r0, [pc, #352]	; (8001e80 <menu+0x19f0>)
 8001d1e:	f006 fa2b 	bl	8008178 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d115      	bne.n	8001d54 <menu+0x18c4>
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <menu+0x19f4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8001d36:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <menu+0x19e8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <menu+0x19e8>)
 8001d40:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <menu+0x19e8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d902      	bls.n	8001d50 <menu+0x18c0>
				kapitablaTip = 0;
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <menu+0x19e8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d50:	f002 fb02 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d54:	2104      	movs	r1, #4
 8001d56:	484a      	ldr	r0, [pc, #296]	; (8001e80 <menu+0x19f0>)
 8001d58:	f006 fa0e 	bl	8008178 <HAL_GPIO_ReadPin>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d115      	bne.n	8001d8e <menu+0x18fe>
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <menu+0x19f4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <menu+0x19e8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <menu+0x19e8>)
 8001d7a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <menu+0x19e8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d902      	bls.n	8001d8a <menu+0x18fa>
		   		kapitablaTip = 2;
 8001d84:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <menu+0x19e8>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d8a:	f002 fae5 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d8e:	2108      	movs	r1, #8
 8001d90:	483b      	ldr	r0, [pc, #236]	; (8001e80 <menu+0x19f0>)
 8001d92:	f006 f9f1 	bl	8008178 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10d      	bne.n	8001db8 <menu+0x1928>
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <menu+0x19f4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <menu+0x19e8>)
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <menu+0x19f8>)
 8001db0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <menu+0x19fc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <menu+0x1a00>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b0e      	cmp	r3, #14
 8001dbe:	f040 80f2 	bne.w	8001fa6 <menu+0x1b16>
		if(dilSecim == 0) {
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <menu+0x1a04>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <menu+0x1a08>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7fe fb0e 	bl	80003f0 <lcd_print>
 8001dd4:	e008      	b.n	8001de8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <menu+0x1a04>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <menu+0x1a0c>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7fe fb04 	bl	80003f0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <menu+0x1a10>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <menu+0x1988>
			if(dilSecim == 0){
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <menu+0x1a04>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <menu+0x1a14>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7fe faf7 	bl	80003f0 <lcd_print>
 8001e02:	e071      	b.n	8001ee8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <menu+0x1a04>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d16d      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <menu+0x1a18>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7fe faed 	bl	80003f0 <lcd_print>
 8001e16:	e067      	b.n	8001ee8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <menu+0x1a10>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d112      	bne.n	8001e46 <menu+0x19b6>
			if(dilSecim == 0){
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <menu+0x1a04>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <menu+0x1a1c>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7fe fadf 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <menu+0x1a04>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d156      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <menu+0x1a20>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f7fe fad6 	bl	80003f0 <lcd_print>
 8001e44:	e050      	b.n	8001ee8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <menu+0x1a10>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d136      	bne.n	8001ebc <menu+0x1a2c>
			if(dilSecim == 0){
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <menu+0x1a04>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <menu+0x1a24>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fac8 	bl	80003f0 <lcd_print>
 8001e60:	e042      	b.n	8001ee8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <menu+0x1a04>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d13e      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <menu+0x1a28>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7fe fabe 	bl	80003f0 <lcd_print>
 8001e74:	e038      	b.n	8001ee8 <menu+0x1a58>
 8001e76:	bf00      	nop
 8001e78:	20000c87 	.word	0x20000c87
 8001e7c:	0800cd20 	.word	0x0800cd20
 8001e80:	40010800 	.word	0x40010800
 8001e84:	20000caa 	.word	0x20000caa
 8001e88:	20000c14 	.word	0x20000c14
 8001e8c:	20000ca7 	.word	0x20000ca7
 8001e90:	20000c7c 	.word	0x20000c7c
 8001e94:	20000c9c 	.word	0x20000c9c
 8001e98:	0800cdf0 	.word	0x0800cdf0
 8001e9c:	0800ce04 	.word	0x0800ce04
 8001ea0:	20000c89 	.word	0x20000c89
 8001ea4:	0800ce18 	.word	0x0800ce18
 8001ea8:	0800ce28 	.word	0x0800ce28
 8001eac:	0800ce38 	.word	0x0800ce38
 8001eb0:	0800ce48 	.word	0x0800ce48
 8001eb4:	0800ce58 	.word	0x0800ce58
 8001eb8:	0800ce6c 	.word	0x0800ce6c
			}
		} else if(kapiTablaAcKonum == 3) {
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	; (800212c <menu+0x1c9c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d111      	bne.n	8001ee8 <menu+0x1a58>
			if(dilSecim == 0) {
 8001ec4:	4b9a      	ldr	r3, [pc, #616]	; (8002130 <menu+0x1ca0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8001ecc:	4a99      	ldr	r2, [pc, #612]	; (8002134 <menu+0x1ca4>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fa8d 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8001ed6:	4b96      	ldr	r3, [pc, #600]	; (8002130 <menu+0x1ca0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d104      	bne.n	8001ee8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8001ede:	4a96      	ldr	r2, [pc, #600]	; (8002138 <menu+0x1ca8>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7fe fa84 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4894      	ldr	r0, [pc, #592]	; (800213c <menu+0x1cac>)
 8001eec:	f006 f944 	bl	8008178 <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d115      	bne.n	8001f22 <menu+0x1a92>
 8001ef6:	4b92      	ldr	r3, [pc, #584]	; (8002140 <menu+0x1cb0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001f04:	4b89      	ldr	r3, [pc, #548]	; (800212c <menu+0x1c9c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b87      	ldr	r3, [pc, #540]	; (800212c <menu+0x1c9c>)
 8001f0e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <menu+0x1c9c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d902      	bls.n	8001f1e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <menu+0x1c9c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f1e:	f002 fa1b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2104      	movs	r1, #4
 8001f24:	4885      	ldr	r0, [pc, #532]	; (800213c <menu+0x1cac>)
 8001f26:	f006 f927 	bl	8008178 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0x1acc>
 8001f30:	4b83      	ldr	r3, [pc, #524]	; (8002140 <menu+0x1cb0>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	; (800212c <menu+0x1c9c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b79      	ldr	r3, [pc, #484]	; (800212c <menu+0x1c9c>)
 8001f48:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001f4a:	4b78      	ldr	r3, [pc, #480]	; (800212c <menu+0x1c9c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d902      	bls.n	8001f58 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <menu+0x1c9c>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f58:	f002 f9fe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	4877      	ldr	r0, [pc, #476]	; (800213c <menu+0x1cac>)
 8001f60:	f006 f90a 	bl	8008178 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11d      	bne.n	8001fa6 <menu+0x1b16>
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <menu+0x1cb0>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <menu+0x1c9c>)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <menu+0x1cb4>)
 8001f7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <menu+0x1c9c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <menu+0x1b02>
 8001f8a:	4b68      	ldr	r3, [pc, #416]	; (800212c <menu+0x1c9c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d106      	bne.n	8001fa0 <menu+0x1b10>
				altLimit = 1;
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <menu+0x1cb8>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <menu+0x1cb8>)
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <menu+0x1cb4>)
 8001f9e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <menu+0x1cbc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <menu+0x1cc0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d17f      	bne.n	80020ae <menu+0x1c1e>
		if(dilSecim == 0) {
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <menu+0x1ca0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8001fb6:	4a67      	ldr	r2, [pc, #412]	; (8002154 <menu+0x1cc4>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7fe fa18 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001fc0:	4a65      	ldr	r2, [pc, #404]	; (8002158 <menu+0x1cc8>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fa13 	bl	80003f0 <lcd_print>
 8001fca:	e00d      	b.n	8001fe8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8001fcc:	4b58      	ldr	r3, [pc, #352]	; (8002130 <menu+0x1ca0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d109      	bne.n	8001fe8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8001fd4:	4a61      	ldr	r2, [pc, #388]	; (800215c <menu+0x1ccc>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe fa09 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001fde:	4a60      	ldr	r2, [pc, #384]	; (8002160 <menu+0x1cd0>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7fe fa04 	bl	80003f0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <menu+0x1cd4>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	220a      	movs	r2, #10
 8001fee:	495e      	ldr	r1, [pc, #376]	; (8002168 <menu+0x1cd8>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00a fac5 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	; (8002168 <menu+0x1cd8>)
 8001ff8:	2110      	movs	r1, #16
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7fe f9f8 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002000:	2102      	movs	r1, #2
 8002002:	484e      	ldr	r0, [pc, #312]	; (800213c <menu+0x1cac>)
 8002004:	f006 f8b8 	bl	8008178 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d119      	bne.n	8002042 <menu+0x1bb2>
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <menu+0x1cb0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <menu+0x1bb2>
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <menu+0x1cdc>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10e      	bne.n	8002042 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <menu+0x1cd4>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <menu+0x1cd4>)
 800202e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <menu+0x1cd4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d902      	bls.n	800203e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <menu+0x1cd4>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203e:	f002 f98b 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002042:	2104      	movs	r1, #4
 8002044:	483d      	ldr	r0, [pc, #244]	; (800213c <menu+0x1cac>)
 8002046:	f006 f897 	bl	8008178 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d119      	bne.n	8002084 <menu+0x1bf4>
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <menu+0x1cb0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <menu+0x1bf4>
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <menu+0x1cdc>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <menu+0x1cd4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3b01      	subs	r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <menu+0x1cd4>)
 8002070:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <menu+0x1cd4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <menu+0x1cd4>)
 800207c:	2205      	movs	r2, #5
 800207e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002080:	f002 f96a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002084:	2108      	movs	r1, #8
 8002086:	482d      	ldr	r0, [pc, #180]	; (800213c <menu+0x1cac>)
 8002088:	f006 f876 	bl	8008178 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10d      	bne.n	80020ae <menu+0x1c1e>
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <menu+0x1cb0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <menu+0x1cd4>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <menu+0x1cb4>)
 80020a6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <menu+0x1cbc>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <menu+0x1cc0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	f040 80bc 	bne.w	8002230 <menu+0x1da0>
		if(dilSecim == 0) {
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <menu+0x1ca0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <menu+0x1ce0>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7fe f993 	bl	80003f0 <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <menu+0x1ca0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <menu+0x1ce4>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe f989 	bl	80003f0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <menu+0x1ce8>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <menu+0x1c7e>
			if(dilSecim == 0) {
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <menu+0x1ca0>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <menu+0x1ca4>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	2002      	movs	r0, #2
 80020f4:	f7fe f97c 	bl	80003f0 <lcd_print>
 80020f8:	e04b      	b.n	8002192 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <menu+0x1ca0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d147      	bne.n	8002192 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <menu+0x1ca8>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f7fe f972 	bl	80003f0 <lcd_print>
 800210c:	e041      	b.n	8002192 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <menu+0x1ce8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d13d      	bne.n	8002192 <menu+0x1d02>
			if(dilSecim == 0) {
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <menu+0x1ca0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d130      	bne.n	8002180 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <menu+0x1cec>)
 8002120:	2101      	movs	r1, #1
 8002122:	2002      	movs	r0, #2
 8002124:	f7fe f964 	bl	80003f0 <lcd_print>
 8002128:	e033      	b.n	8002192 <menu+0x1d02>
 800212a:	bf00      	nop
 800212c:	20000c89 	.word	0x20000c89
 8002130:	20000c9c 	.word	0x20000c9c
 8002134:	0800cae0 	.word	0x0800cae0
 8002138:	0800caf4 	.word	0x0800caf4
 800213c:	40010800 	.word	0x40010800
 8002140:	20000caa 	.word	0x20000caa
 8002144:	20000c14 	.word	0x20000c14
 8002148:	20000c82 	.word	0x20000c82
 800214c:	20000ca7 	.word	0x20000ca7
 8002150:	20000c7c 	.word	0x20000c7c
 8002154:	0800ce80 	.word	0x0800ce80
 8002158:	0800cd44 	.word	0x0800cd44
 800215c:	0800ce94 	.word	0x0800ce94
 8002160:	0800cd68 	.word	0x0800cd68
 8002164:	20000c97 	.word	0x20000c97
 8002168:	20000c54 	.word	0x20000c54
 800216c:	20000c87 	.word	0x20000c87
 8002170:	0800cea8 	.word	0x0800cea8
 8002174:	0800cebc 	.word	0x0800cebc
 8002178:	20000c8a 	.word	0x20000c8a
 800217c:	0800cb40 	.word	0x0800cb40
			} else if(dilSecim == 1) {
 8002180:	4b99      	ldr	r3, [pc, #612]	; (80023e8 <menu+0x1f58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002188:	4a98      	ldr	r2, [pc, #608]	; (80023ec <menu+0x1f5c>)
 800218a:	2101      	movs	r1, #1
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe f92f 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002192:	2102      	movs	r1, #2
 8002194:	4896      	ldr	r0, [pc, #600]	; (80023f0 <menu+0x1f60>)
 8002196:	f005 ffef 	bl	8008178 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d115      	bne.n	80021cc <menu+0x1d3c>
 80021a0:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <menu+0x1f64>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00e      	beq.n	80021cc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80021ae:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <menu+0x1f68>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b90      	ldr	r3, [pc, #576]	; (80023f8 <menu+0x1f68>)
 80021b8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80021ba:	4b8f      	ldr	r3, [pc, #572]	; (80023f8 <menu+0x1f68>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d902      	bls.n	80021c8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80021c2:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <menu+0x1f68>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c8:	f002 f8c6 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021cc:	2104      	movs	r1, #4
 80021ce:	4888      	ldr	r0, [pc, #544]	; (80023f0 <menu+0x1f60>)
 80021d0:	f005 ffd2 	bl	8008178 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d115      	bne.n	8002206 <menu+0x1d76>
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <menu+0x1f64>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80021e8:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <menu+0x1f68>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <menu+0x1f68>)
 80021f2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80021f4:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <menu+0x1f68>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <menu+0x1f68>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002202:	f002 f8a9 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002206:	2108      	movs	r1, #8
 8002208:	4879      	ldr	r0, [pc, #484]	; (80023f0 <menu+0x1f60>)
 800220a:	f005 ffb5 	bl	8008178 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10d      	bne.n	8002230 <menu+0x1da0>
 8002214:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <menu+0x1f64>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002222:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <menu+0x1f68>)
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	4b75      	ldr	r3, [pc, #468]	; (80023fc <menu+0x1f6c>)
 8002228:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800222a:	4b75      	ldr	r3, [pc, #468]	; (8002400 <menu+0x1f70>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <menu+0x1f74>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b11      	cmp	r3, #17
 8002236:	f040 80c3 	bne.w	80023c0 <menu+0x1f30>
		if(dilSecim == 0) {
 800223a:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <menu+0x1f58>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <menu+0x1f78>)
 8002244:	2101      	movs	r1, #1
 8002246:	2001      	movs	r0, #1
 8002248:	f7fe f8d2 	bl	80003f0 <lcd_print>
 800224c:	e008      	b.n	8002260 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <menu+0x1f58>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d104      	bne.n	8002260 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002256:	4a6d      	ldr	r2, [pc, #436]	; (800240c <menu+0x1f7c>)
 8002258:	2101      	movs	r1, #1
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe f8c8 	bl	80003f0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <menu+0x1f80>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d113      	bne.n	8002290 <menu+0x1e00>
			if(dilSecim == 0){
 8002268:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <menu+0x1f58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002270:	4a68      	ldr	r2, [pc, #416]	; (8002414 <menu+0x1f84>)
 8002272:	2101      	movs	r1, #1
 8002274:	2002      	movs	r0, #2
 8002276:	f7fe f8bb 	bl	80003f0 <lcd_print>
 800227a:	e038      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1){
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <menu+0x1f58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d134      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <menu+0x1f88>)
 8002286:	2101      	movs	r1, #1
 8002288:	2002      	movs	r0, #2
 800228a:	f7fe f8b1 	bl	80003f0 <lcd_print>
 800228e:	e02e      	b.n	80022ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002290:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <menu+0x1f80>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d113      	bne.n	80022c0 <menu+0x1e30>
			if(dilSecim == 0){
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <menu+0x1f58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <menu+0x1f8c>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7fe f8a3 	bl	80003f0 <lcd_print>
 80022aa:	e020      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <menu+0x1f58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11c      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80022b4:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <menu+0x1f90>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	2002      	movs	r0, #2
 80022ba:	f7fe f899 	bl	80003f0 <lcd_print>
 80022be:	e016      	b.n	80022ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <menu+0x1f80>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d112      	bne.n	80022ee <menu+0x1e5e>
			if(dilSecim == 0) {
 80022c8:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <menu+0x1f58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80022d0:	4a54      	ldr	r2, [pc, #336]	; (8002424 <menu+0x1f94>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7fe f88b 	bl	80003f0 <lcd_print>
 80022da:	e008      	b.n	80022ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <menu+0x1f58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d104      	bne.n	80022ee <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80022e4:	4a50      	ldr	r2, [pc, #320]	; (8002428 <menu+0x1f98>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	2002      	movs	r0, #2
 80022ea:	f7fe f881 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ee:	2102      	movs	r1, #2
 80022f0:	483f      	ldr	r0, [pc, #252]	; (80023f0 <menu+0x1f60>)
 80022f2:	f005 ff41 	bl	8008178 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d115      	bne.n	8002328 <menu+0x1e98>
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <menu+0x1f64>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <menu+0x1f80>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <menu+0x1f80>)
 8002314:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <menu+0x1f80>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <menu+0x1f80>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002324:	f002 f818 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002328:	2104      	movs	r1, #4
 800232a:	4831      	ldr	r0, [pc, #196]	; (80023f0 <menu+0x1f60>)
 800232c:	f005 ff24 	bl	8008178 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d115      	bne.n	8002362 <menu+0x1ed2>
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <menu+0x1f64>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <menu+0x1ed2>
			devirmeYuruyusSecim=devirmeYuruyusSecim-1;
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <menu+0x1f80>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <menu+0x1f80>)
 800234e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <menu+0x1f80>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d902      	bls.n	800235e <menu+0x1ece>
		   		devirmeYuruyusSecim=2;
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <menu+0x1f80>)
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800235e:	f001 fffb 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2108      	movs	r1, #8
 8002364:	4822      	ldr	r0, [pc, #136]	; (80023f0 <menu+0x1f60>)
 8002366:	f005 ff07 	bl	8008178 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d127      	bne.n	80023c0 <menu+0x1f30>
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <menu+0x1f64>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d020      	beq.n	80023c0 <menu+0x1f30>
			eepromData[15]=devirmeYuruyusSecim;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <menu+0x1f80>)
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <menu+0x1f6c>)
 8002384:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <menu+0x1f80>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <menu+0x1f06>
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <menu+0x1f80>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <menu+0x1f14>
				calismaSekli = 0;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <menu+0x1f9c>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <menu+0x1f9c>)
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <menu+0x1f6c>)
 80023a2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <menu+0x1f80>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <menu+0x1fa0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <menu+0x1fa0>)
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <menu+0x1f6c>)
 80023b8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <menu+0x1f70>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <menu+0x1f74>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	f040 80d5 	bne.w	8002574 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <menu+0x1f80>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d13c      	bne.n	800244c <menu+0x1fbc>
			if(dilSecim == 0) {
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <menu+0x1f58>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12e      	bne.n	8002438 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <menu+0x1fa4>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe f806 	bl	80003f0 <lcd_print>
 80023e4:	e048      	b.n	8002478 <menu+0x1fe8>
 80023e6:	bf00      	nop
 80023e8:	20000c9c 	.word	0x20000c9c
 80023ec:	0800cb54 	.word	0x0800cb54
 80023f0:	40010800 	.word	0x40010800
 80023f4:	20000caa 	.word	0x20000caa
 80023f8:	20000c8a 	.word	0x20000c8a
 80023fc:	20000c14 	.word	0x20000c14
 8002400:	20000ca7 	.word	0x20000ca7
 8002404:	20000c7c 	.word	0x20000c7c
 8002408:	0800ced0 	.word	0x0800ced0
 800240c:	0800cee4 	.word	0x0800cee4
 8002410:	20000c8b 	.word	0x20000c8b
 8002414:	0800cef8 	.word	0x0800cef8
 8002418:	0800cf08 	.word	0x0800cf08
 800241c:	0800cf18 	.word	0x0800cf18
 8002420:	0800cf28 	.word	0x0800cf28
 8002424:	0800cae0 	.word	0x0800cae0
 8002428:	0800caf4 	.word	0x0800caf4
 800242c:	20000c7d 	.word	0x20000c7d
 8002430:	20000c8e 	.word	0x20000c8e
 8002434:	0800cf38 	.word	0x0800cf38
			} else if(dilSecim == 1) {
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <menu+0x2198>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d11b      	bne.n	8002478 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <menu+0x219c>)
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f7fd ffd3 	bl	80003f0 <lcd_print>
 800244a:	e015      	b.n	8002478 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800244c:	4b78      	ldr	r3, [pc, #480]	; (8002630 <menu+0x21a0>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d111      	bne.n	8002478 <menu+0x1fe8>
			if(dilSecim == 0){
 8002454:	4b74      	ldr	r3, [pc, #464]	; (8002628 <menu+0x2198>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800245c:	4a75      	ldr	r2, [pc, #468]	; (8002634 <menu+0x21a4>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f7fd ffc5 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1){
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <menu+0x2198>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d104      	bne.n	8002478 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800246e:	4a72      	ldr	r2, [pc, #456]	; (8002638 <menu+0x21a8>)
 8002470:	2101      	movs	r1, #1
 8002472:	2001      	movs	r0, #1
 8002474:	f7fd ffbc 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <menu+0x21ac>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <menu+0x2018>
			if(dilSecim == 0) {
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <menu+0x2198>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8002488:	4a6d      	ldr	r2, [pc, #436]	; (8002640 <menu+0x21b0>)
 800248a:	2101      	movs	r1, #1
 800248c:	2002      	movs	r0, #2
 800248e:	f7fd ffaf 	bl	80003f0 <lcd_print>
 8002492:	e020      	b.n	80024d6 <menu+0x2046>
			} else if(dilSecim == 1){
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <menu+0x2198>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d11c      	bne.n	80024d6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800249c:	4a69      	ldr	r2, [pc, #420]	; (8002644 <menu+0x21b4>)
 800249e:	2101      	movs	r1, #1
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7fd ffa5 	bl	80003f0 <lcd_print>
 80024a6:	e016      	b.n	80024d6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <menu+0x21ac>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d112      	bne.n	80024d6 <menu+0x2046>
			if(dilSecim == 0){
 80024b0:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <menu+0x2198>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <menu+0x21b8>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2002      	movs	r0, #2
 80024be:	f7fd ff97 	bl	80003f0 <lcd_print>
 80024c2:	e008      	b.n	80024d6 <menu+0x2046>
			} else if(dilSecim == 1){
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <menu+0x2198>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d104      	bne.n	80024d6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <menu+0x21bc>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7fd ff8d 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d6:	2102      	movs	r1, #2
 80024d8:	485d      	ldr	r0, [pc, #372]	; (8002650 <menu+0x21c0>)
 80024da:	f005 fe4d 	bl	8008178 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d115      	bne.n	8002510 <menu+0x2080>
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <menu+0x21c4>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <menu+0x21ac>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b50      	ldr	r3, [pc, #320]	; (800263c <menu+0x21ac>)
 80024fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <menu+0x21ac>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d902      	bls.n	800250c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002506:	4b4d      	ldr	r3, [pc, #308]	; (800263c <menu+0x21ac>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800250c:	f001 ff24 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2104      	movs	r1, #4
 8002512:	484f      	ldr	r0, [pc, #316]	; (8002650 <menu+0x21c0>)
 8002514:	f005 fe30 	bl	8008178 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d115      	bne.n	800254a <menu+0x20ba>
 800251e:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <menu+0x21c4>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <menu+0x21ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3b01      	subs	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <menu+0x21ac>)
 8002536:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <menu+0x21ac>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <menu+0x21ac>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002546:	f001 ff07 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800254a:	2108      	movs	r1, #8
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <menu+0x21c0>)
 800254e:	f005 fe13 	bl	8008178 <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10d      	bne.n	8002574 <menu+0x20e4>
 8002558:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <menu+0x21c4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <menu+0x21ac>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <menu+0x21c8>)
 800256c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <menu+0x21cc>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <menu+0x21d0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b13      	cmp	r3, #19
 800257a:	f040 80d5 	bne.w	8002728 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <menu+0x21a0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d113      	bne.n	80025ae <menu+0x211e>
			if(dilSecim == 0) {
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <menu+0x2198>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <menu+0x21d4>)
 8002590:	2101      	movs	r1, #1
 8002592:	2001      	movs	r0, #1
 8002594:	f7fd ff2c 	bl	80003f0 <lcd_print>
 8002598:	e01f      	b.n	80025da <menu+0x214a>
			} else if(dilSecim == 1) {
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <menu+0x2198>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d11b      	bne.n	80025da <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80025a2:	4a31      	ldr	r2, [pc, #196]	; (8002668 <menu+0x21d8>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7fd ff22 	bl	80003f0 <lcd_print>
 80025ac:	e015      	b.n	80025da <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <menu+0x21a0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d111      	bne.n	80025da <menu+0x214a>
			if(dilSecim == 0) {
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <menu+0x2198>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <menu+0x21dc>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fd ff14 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <menu+0x2198>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d104      	bne.n	80025da <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <menu+0x21e0>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fd ff0b 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <menu+0x21e4>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <menu+0x217a>
			if(dilSecim == 0) {
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <menu+0x2198>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <menu+0x21b0>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	2002      	movs	r0, #2
 80025f0:	f7fd fefe 	bl	80003f0 <lcd_print>
 80025f4:	e049      	b.n	800268a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <menu+0x2198>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d145      	bne.n	800268a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80025fe:	4a11      	ldr	r2, [pc, #68]	; (8002644 <menu+0x21b4>)
 8002600:	2101      	movs	r1, #1
 8002602:	2002      	movs	r0, #2
 8002604:	f7fd fef4 	bl	80003f0 <lcd_print>
 8002608:	e03f      	b.n	800268a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <menu+0x21e4>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d13b      	bne.n	800268a <menu+0x21fa>
			if(dilSecim == 0) {
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <menu+0x2198>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12e      	bne.n	8002678 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <menu+0x21b8>)
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f7fd fee6 	bl	80003f0 <lcd_print>
 8002624:	e031      	b.n	800268a <menu+0x21fa>
 8002626:	bf00      	nop
 8002628:	20000c9c 	.word	0x20000c9c
 800262c:	0800cf4c 	.word	0x0800cf4c
 8002630:	20000c8b 	.word	0x20000c8b
 8002634:	0800cf5c 	.word	0x0800cf5c
 8002638:	0800cf70 	.word	0x0800cf70
 800263c:	20000c8c 	.word	0x20000c8c
 8002640:	0800cae0 	.word	0x0800cae0
 8002644:	0800caf4 	.word	0x0800caf4
 8002648:	0800cb40 	.word	0x0800cb40
 800264c:	0800cb54 	.word	0x0800cb54
 8002650:	40010800 	.word	0x40010800
 8002654:	20000caa 	.word	0x20000caa
 8002658:	20000c14 	.word	0x20000c14
 800265c:	20000ca7 	.word	0x20000ca7
 8002660:	20000c7c 	.word	0x20000c7c
 8002664:	0800cf84 	.word	0x0800cf84
 8002668:	0800cf98 	.word	0x0800cf98
 800266c:	0800cfac 	.word	0x0800cfac
 8002670:	0800cfc0 	.word	0x0800cfc0
 8002674:	20000c8d 	.word	0x20000c8d
			} else if(dilSecim == 1) {
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <menu+0x242c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d104      	bne.n	800268a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002680:	4a8f      	ldr	r2, [pc, #572]	; (80028c0 <menu+0x2430>)
 8002682:	2101      	movs	r1, #1
 8002684:	2002      	movs	r0, #2
 8002686:	f7fd feb3 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800268a:	2102      	movs	r1, #2
 800268c:	488d      	ldr	r0, [pc, #564]	; (80028c4 <menu+0x2434>)
 800268e:	f005 fd73 	bl	8008178 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d115      	bne.n	80026c4 <menu+0x2234>
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <menu+0x2438>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00e      	beq.n	80026c4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <menu+0x243c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b87      	ldr	r3, [pc, #540]	; (80028cc <menu+0x243c>)
 80026b0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80026b2:	4b86      	ldr	r3, [pc, #536]	; (80028cc <menu+0x243c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d902      	bls.n	80026c0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80026ba:	4b84      	ldr	r3, [pc, #528]	; (80028cc <menu+0x243c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c0:	f001 fe4a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c4:	2104      	movs	r1, #4
 80026c6:	487f      	ldr	r0, [pc, #508]	; (80028c4 <menu+0x2434>)
 80026c8:	f005 fd56 	bl	8008178 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d115      	bne.n	80026fe <menu+0x226e>
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <menu+0x2438>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80026e0:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x243c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <menu+0x243c>)
 80026ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80026ec:	4b77      	ldr	r3, [pc, #476]	; (80028cc <menu+0x243c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <menu+0x243c>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026fa:	f001 fe2d 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fe:	2108      	movs	r1, #8
 8002700:	4870      	ldr	r0, [pc, #448]	; (80028c4 <menu+0x2434>)
 8002702:	f005 fd39 	bl	8008178 <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10d      	bne.n	8002728 <menu+0x2298>
 800270c:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <menu+0x2438>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <menu+0x243c>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <menu+0x2440>)
 8002720:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <menu+0x2444>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <menu+0x2448>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b14      	cmp	r3, #20
 800272e:	f040 80b5 	bne.w	800289c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <menu+0x244c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d113      	bne.n	8002762 <menu+0x22d2>
			if(dilSecim == 0) {
 800273a:	4b60      	ldr	r3, [pc, #384]	; (80028bc <menu+0x242c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <menu+0x2450>)
 8002744:	2101      	movs	r1, #1
 8002746:	2001      	movs	r0, #1
 8002748:	f7fd fe52 	bl	80003f0 <lcd_print>
 800274c:	e020      	b.n	8002790 <menu+0x2300>
			} else if(dilSecim == 1) {
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <menu+0x242c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d11c      	bne.n	8002790 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <menu+0x2454>)
 8002758:	2101      	movs	r1, #1
 800275a:	2001      	movs	r0, #1
 800275c:	f7fd fe48 	bl	80003f0 <lcd_print>
 8002760:	e016      	b.n	8002790 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <menu+0x244c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d112      	bne.n	8002790 <menu+0x2300>
			if(dilSecim == 0) {
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <menu+0x242c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002772:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <menu+0x2458>)
 8002774:	2101      	movs	r1, #1
 8002776:	2001      	movs	r0, #1
 8002778:	f7fd fe3a 	bl	80003f0 <lcd_print>
 800277c:	e008      	b.n	8002790 <menu+0x2300>
			} else if(dilSecim == 1) {
 800277e:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <menu+0x242c>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d104      	bne.n	8002790 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002786:	4a59      	ldr	r2, [pc, #356]	; (80028ec <menu+0x245c>)
 8002788:	2101      	movs	r1, #1
 800278a:	2001      	movs	r0, #1
 800278c:	f7fd fe30 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <menu+0x2460>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d113      	bne.n	80027c0 <menu+0x2330>
			if(dilSecim == 0) {
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <menu+0x242c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80027a0:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <menu+0x2464>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	2002      	movs	r0, #2
 80027a6:	f7fd fe23 	bl	80003f0 <lcd_print>
 80027aa:	e020      	b.n	80027ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <menu+0x242c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d11c      	bne.n	80027ee <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <menu+0x2468>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2002      	movs	r0, #2
 80027ba:	f7fd fe19 	bl	80003f0 <lcd_print>
 80027be:	e016      	b.n	80027ee <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <menu+0x2460>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d112      	bne.n	80027ee <menu+0x235e>
			if(dilSecim == 0) {
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <menu+0x242c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80027d0:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <menu+0x246c>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7fd fe0b 	bl	80003f0 <lcd_print>
 80027da:	e008      	b.n	80027ee <menu+0x235e>
			} else if(dilSecim == 1) {
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <menu+0x242c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d104      	bne.n	80027ee <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80027e4:	4a46      	ldr	r2, [pc, #280]	; (8002900 <menu+0x2470>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	2002      	movs	r0, #2
 80027ea:	f7fd fe01 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80027ee:	2102      	movs	r1, #2
 80027f0:	4834      	ldr	r0, [pc, #208]	; (80028c4 <menu+0x2434>)
 80027f2:	f005 fcc1 	bl	8008178 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d119      	bne.n	8002830 <menu+0x23a0>
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <menu+0x2438>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <menu+0x23a0>
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <menu+0x244c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d10e      	bne.n	8002830 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <menu+0x2460>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <menu+0x2460>)
 800281c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <menu+0x2460>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d902      	bls.n	800282c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <menu+0x2460>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800282c:	f001 fd94 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002830:	2104      	movs	r1, #4
 8002832:	4824      	ldr	r0, [pc, #144]	; (80028c4 <menu+0x2434>)
 8002834:	f005 fca0 	bl	8008178 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d119      	bne.n	8002872 <menu+0x23e2>
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <menu+0x2438>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <menu+0x23e2>
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x244c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d10e      	bne.n	8002872 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <menu+0x2460>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <menu+0x2460>)
 800285e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <menu+0x2460>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <menu+0x2460>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286e:	f001 fd73 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2108      	movs	r1, #8
 8002874:	4813      	ldr	r0, [pc, #76]	; (80028c4 <menu+0x2434>)
 8002876:	f005 fc7f 	bl	8008178 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10d      	bne.n	800289c <menu+0x240c>
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <menu+0x2438>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <menu+0x2460>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <menu+0x2440>)
 8002894:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <menu+0x2444>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <menu+0x2448>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b15      	cmp	r3, #21
 80028a2:	f040 80c2 	bne.w	8002a2a <menu+0x259a>
		if(dilSecim == 0) {
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <menu+0x242c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12c      	bne.n	8002908 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <menu+0x2474>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7fd fd9c 	bl	80003f0 <lcd_print>
 80028b8:	e02f      	b.n	800291a <menu+0x248a>
 80028ba:	bf00      	nop
 80028bc:	20000c9c 	.word	0x20000c9c
 80028c0:	0800cb54 	.word	0x0800cb54
 80028c4:	40010800 	.word	0x40010800
 80028c8:	20000caa 	.word	0x20000caa
 80028cc:	20000c8d 	.word	0x20000c8d
 80028d0:	20000c14 	.word	0x20000c14
 80028d4:	20000ca7 	.word	0x20000ca7
 80028d8:	20000c7c 	.word	0x20000c7c
 80028dc:	20000c8b 	.word	0x20000c8b
 80028e0:	0800cfd4 	.word	0x0800cfd4
 80028e4:	0800cfe8 	.word	0x0800cfe8
 80028e8:	0800cffc 	.word	0x0800cffc
 80028ec:	0800d010 	.word	0x0800d010
 80028f0:	20000c8e 	.word	0x20000c8e
 80028f4:	0800d024 	.word	0x0800d024
 80028f8:	0800d038 	.word	0x0800d038
 80028fc:	0800d048 	.word	0x0800d048
 8002900:	0800d05c 	.word	0x0800d05c
 8002904:	0800d06c 	.word	0x0800d06c
		} else if(dilSecim == 1) {
 8002908:	4b9c      	ldr	r3, [pc, #624]	; (8002b7c <menu+0x26ec>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d104      	bne.n	800291a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002910:	4a9b      	ldr	r2, [pc, #620]	; (8002b80 <menu+0x26f0>)
 8002912:	2101      	movs	r1, #1
 8002914:	2001      	movs	r0, #1
 8002916:	f7fd fd6b 	bl	80003f0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800291a:	4b9a      	ldr	r3, [pc, #616]	; (8002b84 <menu+0x26f4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d112      	bne.n	8002948 <menu+0x24b8>
			if(dilSecim == 0) {
 8002922:	4b96      	ldr	r3, [pc, #600]	; (8002b7c <menu+0x26ec>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800292a:	4a97      	ldr	r2, [pc, #604]	; (8002b88 <menu+0x26f8>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd fd5e 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002934:	4b91      	ldr	r3, [pc, #580]	; (8002b7c <menu+0x26ec>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d11c      	bne.n	8002976 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800293c:	4a93      	ldr	r2, [pc, #588]	; (8002b8c <menu+0x26fc>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f7fd fd55 	bl	80003f0 <lcd_print>
 8002946:	e016      	b.n	8002976 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002948:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <menu+0x26f4>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d112      	bne.n	8002976 <menu+0x24e6>
			if(dilSecim == 0) {
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <menu+0x26ec>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002958:	4a8d      	ldr	r2, [pc, #564]	; (8002b90 <menu+0x2700>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f7fd fd47 	bl	80003f0 <lcd_print>
 8002962:	e008      	b.n	8002976 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002964:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <menu+0x26ec>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d104      	bne.n	8002976 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800296c:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <menu+0x2704>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f7fd fd3d 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002976:	2102      	movs	r1, #2
 8002978:	4887      	ldr	r0, [pc, #540]	; (8002b98 <menu+0x2708>)
 800297a:	f005 fbfd 	bl	8008178 <HAL_GPIO_ReadPin>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d115      	bne.n	80029b0 <menu+0x2520>
 8002984:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <menu+0x270c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f083 0301 	eor.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002992:	4b7c      	ldr	r3, [pc, #496]	; (8002b84 <menu+0x26f4>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <menu+0x26f4>)
 800299c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800299e:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <menu+0x26f4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d902      	bls.n	80029ac <menu+0x251c>
				platformSilindirTipi = 0;
 80029a6:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <menu+0x26f4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029ac:	f001 fcd4 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b0:	2104      	movs	r1, #4
 80029b2:	4879      	ldr	r0, [pc, #484]	; (8002b98 <menu+0x2708>)
 80029b4:	f005 fbe0 	bl	8008178 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d115      	bne.n	80029ea <menu+0x255a>
 80029be:	4b77      	ldr	r3, [pc, #476]	; (8002b9c <menu+0x270c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <menu+0x26f4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <menu+0x26f4>)
 80029d6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <menu+0x26f4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <menu+0x26f4>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e6:	f001 fcb7 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ea:	2108      	movs	r1, #8
 80029ec:	486a      	ldr	r0, [pc, #424]	; (8002b98 <menu+0x2708>)
 80029ee:	f005 fbc3 	bl	8008178 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d118      	bne.n	8002a2a <menu+0x259a>
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <menu+0x270c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <menu+0x26f4>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <menu+0x2710>)
 8002a0c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <menu+0x26f4>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d106      	bne.n	8002a24 <menu+0x2594>
				altLimit = 1;
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <menu+0x2714>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <menu+0x2714>)
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <menu+0x2710>)
 8002a22:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002a24:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <menu+0x2718>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002a2a:	4b60      	ldr	r3, [pc, #384]	; (8002bac <menu+0x271c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b16      	cmp	r3, #22
 8002a30:	f040 8081 	bne.w	8002b36 <menu+0x26a6>
		if(dilSecim == 0) {
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <menu+0x26ec>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002a3c:	4a5c      	ldr	r2, [pc, #368]	; (8002bb0 <menu+0x2720>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7fd fcd5 	bl	80003f0 <lcd_print>
 8002a46:	e008      	b.n	8002a5a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <menu+0x26ec>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d104      	bne.n	8002a5a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <menu+0x2724>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fd fccb 	bl	80003f0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <menu+0x26ec>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002a62:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <menu+0x2728>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fd fcc2 	bl	80003f0 <lcd_print>
 8002a6c:	e008      	b.n	8002a80 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <menu+0x26ec>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002a76:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <menu+0x272c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fd fcb8 	bl	80003f0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <menu+0x2730>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	220a      	movs	r2, #10
 8002a86:	494f      	ldr	r1, [pc, #316]	; (8002bc4 <menu+0x2734>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 fd79 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <menu+0x2734>)
 8002a90:	2110      	movs	r1, #16
 8002a92:	2002      	movs	r0, #2
 8002a94:	f7fd fcac 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a98:	2102      	movs	r1, #2
 8002a9a:	483f      	ldr	r0, [pc, #252]	; (8002b98 <menu+0x2708>)
 8002a9c:	f005 fb6c 	bl	8008178 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d115      	bne.n	8002ad2 <menu+0x2642>
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <menu+0x270c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <menu+0x2730>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <menu+0x2730>)
 8002abe:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <menu+0x2730>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d902      	bls.n	8002ace <menu+0x263e>
				yukariValfTmr = 0;
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <menu+0x2730>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ace:	f001 fc43 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4830      	ldr	r0, [pc, #192]	; (8002b98 <menu+0x2708>)
 8002ad6:	f005 fb4f 	bl	8008178 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d115      	bne.n	8002b0c <menu+0x267c>
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <menu+0x270c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <menu+0x2730>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <menu+0x2730>)
 8002af8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <menu+0x2730>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <menu+0x2730>)
 8002b04:	2205      	movs	r2, #5
 8002b06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b08:	f001 fc26 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0c:	2108      	movs	r1, #8
 8002b0e:	4822      	ldr	r0, [pc, #136]	; (8002b98 <menu+0x2708>)
 8002b10:	f005 fb32 	bl	8008178 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <menu+0x26a6>
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <menu+0x270c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <menu+0x2730>)
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <menu+0x2710>)
 8002b2e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <menu+0x2718>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <menu+0x271c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b17      	cmp	r3, #23
 8002b3c:	f040 80ac 	bne.w	8002c98 <menu+0x2808>
		if(dilSecim == 0) {
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <menu+0x26ec>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <menu+0x2738>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7fd fc4f 	bl	80003f0 <lcd_print>
 8002b52:	e008      	b.n	8002b66 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <menu+0x26ec>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d104      	bne.n	8002b66 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <menu+0x273c>)
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fd fc45 	bl	80003f0 <lcd_print>
		}

		if(asagiValfTmr>=0) {
			if(dilSecim == 0) {
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <menu+0x26ec>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d130      	bne.n	8002bd0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <menu+0x2728>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	2002      	movs	r0, #2
 8002b74:	f7fd fc3c 	bl	80003f0 <lcd_print>
 8002b78:	e033      	b.n	8002be2 <menu+0x2752>
 8002b7a:	bf00      	nop
 8002b7c:	20000c9c 	.word	0x20000c9c
 8002b80:	0800d080 	.word	0x0800d080
 8002b84:	20000c8f 	.word	0x20000c8f
 8002b88:	0800d024 	.word	0x0800d024
 8002b8c:	0800d038 	.word	0x0800d038
 8002b90:	0800d048 	.word	0x0800d048
 8002b94:	0800d05c 	.word	0x0800d05c
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	20000caa 	.word	0x20000caa
 8002ba0:	20000c14 	.word	0x20000c14
 8002ba4:	20000c82 	.word	0x20000c82
 8002ba8:	20000ca7 	.word	0x20000ca7
 8002bac:	20000c7c 	.word	0x20000c7c
 8002bb0:	0800d090 	.word	0x0800d090
 8002bb4:	0800d0a4 	.word	0x0800d0a4
 8002bb8:	0800cd44 	.word	0x0800cd44
 8002bbc:	0800d0b8 	.word	0x0800d0b8
 8002bc0:	20000c90 	.word	0x20000c90
 8002bc4:	20000c54 	.word	0x20000c54
 8002bc8:	0800d0c8 	.word	0x0800d0c8
 8002bcc:	0800d0dc 	.word	0x0800d0dc
			} else if(dilSecim == 1) {
 8002bd0:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <menu+0x29a4>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d104      	bne.n	8002be2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002bd8:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <menu+0x29a8>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7fd fc07 	bl	80003f0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002be2:	4b96      	ldr	r3, [pc, #600]	; (8002e3c <menu+0x29ac>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	220a      	movs	r2, #10
 8002be8:	4995      	ldr	r1, [pc, #596]	; (8002e40 <menu+0x29b0>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f009 fcc8 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8002bf0:	4a93      	ldr	r2, [pc, #588]	; (8002e40 <menu+0x29b0>)
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f7fd fbfb 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4891      	ldr	r0, [pc, #580]	; (8002e44 <menu+0x29b4>)
 8002bfe:	f005 fabb 	bl	8008178 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d115      	bne.n	8002c34 <menu+0x27a4>
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <menu+0x29b8>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <menu+0x29ac>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b87      	ldr	r3, [pc, #540]	; (8002e3c <menu+0x29ac>)
 8002c20:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <menu+0x29ac>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d902      	bls.n	8002c30 <menu+0x27a0>
				asagiValfTmr = 0;
 8002c2a:	4b84      	ldr	r3, [pc, #528]	; (8002e3c <menu+0x29ac>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c30:	f001 fb92 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c34:	2104      	movs	r1, #4
 8002c36:	4883      	ldr	r0, [pc, #524]	; (8002e44 <menu+0x29b4>)
 8002c38:	f005 fa9e 	bl	8008178 <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d115      	bne.n	8002c6e <menu+0x27de>
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <menu+0x29b8>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002c50:	4b7a      	ldr	r3, [pc, #488]	; (8002e3c <menu+0x29ac>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <menu+0x29ac>)
 8002c5a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002c5c:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <menu+0x29ac>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d902      	bls.n	8002c6a <menu+0x27da>
		   		asagiValfTmr = 5;
 8002c64:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <menu+0x29ac>)
 8002c66:	2205      	movs	r2, #5
 8002c68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c6a:	f001 fb75 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6e:	2108      	movs	r1, #8
 8002c70:	4874      	ldr	r0, [pc, #464]	; (8002e44 <menu+0x29b4>)
 8002c72:	f005 fa81 	bl	8008178 <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <menu+0x2808>
 8002c7c:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <menu+0x29b8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <menu+0x29ac>)
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <menu+0x29bc>)
 8002c90:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <menu+0x29c0>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002c98:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <menu+0x29c4>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b18      	cmp	r3, #24
 8002c9e:	f040 809d 	bne.w	8002ddc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <menu+0x29c8>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d113      	bne.n	8002cd2 <menu+0x2842>
			if(dilSecim == 0) {
 8002caa:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <menu+0x29a4>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002cb2:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <menu+0x29cc>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fd fb9a 	bl	80003f0 <lcd_print>
 8002cbc:	e020      	b.n	8002d00 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <menu+0x29a4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11c      	bne.n	8002d00 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002cc6:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <menu+0x29d0>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fd fb90 	bl	80003f0 <lcd_print>
 8002cd0:	e016      	b.n	8002d00 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <menu+0x29c8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d112      	bne.n	8002d00 <menu+0x2870>
			if(dilSecim == 0) {
 8002cda:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <menu+0x29a4>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002ce2:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <menu+0x29d4>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7fd fb82 	bl	80003f0 <lcd_print>
 8002cec:	e008      	b.n	8002d00 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002cee:	4b51      	ldr	r3, [pc, #324]	; (8002e34 <menu+0x29a4>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d104      	bne.n	8002d00 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	; (8002e68 <menu+0x29d8>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7fd fb78 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr>=0) {
			if(dilSecim == 0) {
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <menu+0x29a4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <menu+0x29dc>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f7fd fb6f 	bl	80003f0 <lcd_print>
 8002d12:	e008      	b.n	8002d26 <menu+0x2896>
			} else if(dilSecim == 1) {
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <menu+0x29a4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d104      	bne.n	8002d26 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8002d1c:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <menu+0x29a8>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2002      	movs	r0, #2
 8002d22:	f7fd fb65 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002d26:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <menu+0x29e0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	220a      	movs	r2, #10
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <menu+0x29b0>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f009 fc26 	bl	800c580 <itoa>
		lcd_print(2, 16, snum);
 8002d34:	4a42      	ldr	r2, [pc, #264]	; (8002e40 <menu+0x29b0>)
 8002d36:	2110      	movs	r1, #16
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7fd fb59 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4840      	ldr	r0, [pc, #256]	; (8002e44 <menu+0x29b4>)
 8002d42:	f005 fa19 	bl	8008178 <HAL_GPIO_ReadPin>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d115      	bne.n	8002d78 <menu+0x28e8>
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <menu+0x29b8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <menu+0x29e0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <menu+0x29e0>)
 8002d64:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <menu+0x29e0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d902      	bls.n	8002d74 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <menu+0x29e0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d74:	f001 faf0 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4832      	ldr	r0, [pc, #200]	; (8002e44 <menu+0x29b4>)
 8002d7c:	f005 f9fc 	bl	8008178 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d115      	bne.n	8002db2 <menu+0x2922>
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <menu+0x29b8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <menu+0x29e0>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <menu+0x29e0>)
 8002d9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <menu+0x29e0>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d902      	bls.n	8002dae <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <menu+0x29e0>)
 8002daa:	2205      	movs	r2, #5
 8002dac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dae:	f001 fad3 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db2:	2108      	movs	r1, #8
 8002db4:	4823      	ldr	r0, [pc, #140]	; (8002e44 <menu+0x29b4>)
 8002db6:	f005 f9df 	bl	8008178 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <menu+0x294c>
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <menu+0x29b8>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <menu+0x29e0>)
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <menu+0x29bc>)
 8002dd4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <menu+0x29c0>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <menu+0x29c4>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b19      	cmp	r3, #25
 8002de2:	f040 80c4 	bne.w	8002f6e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <menu+0x29c8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d113      	bne.n	8002e16 <menu+0x2986>
			if(dilSecim == 0) {
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <menu+0x29a4>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <menu+0x29e4>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7fd faf8 	bl	80003f0 <lcd_print>
 8002e00:	e047      	b.n	8002e92 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <menu+0x29a4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d143      	bne.n	8002e92 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <menu+0x29e8>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fd faee 	bl	80003f0 <lcd_print>
 8002e14:	e03d      	b.n	8002e92 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <menu+0x29c8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d139      	bne.n	8002e92 <menu+0x2a02>
			if(dilSecim == 0) {
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <menu+0x29a4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d12c      	bne.n	8002e80 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <menu+0x29ec>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7fd fae0 	bl	80003f0 <lcd_print>
 8002e30:	e02f      	b.n	8002e92 <menu+0x2a02>
 8002e32:	bf00      	nop
 8002e34:	20000c9c 	.word	0x20000c9c
 8002e38:	0800d0b8 	.word	0x0800d0b8
 8002e3c:	20000c91 	.word	0x20000c91
 8002e40:	20000c54 	.word	0x20000c54
 8002e44:	40010800 	.word	0x40010800
 8002e48:	20000caa 	.word	0x20000caa
 8002e4c:	20000c14 	.word	0x20000c14
 8002e50:	20000ca7 	.word	0x20000ca7
 8002e54:	20000c7c 	.word	0x20000c7c
 8002e58:	20000c8b 	.word	0x20000c8b
 8002e5c:	0800d0f0 	.word	0x0800d0f0
 8002e60:	0800d104 	.word	0x0800d104
 8002e64:	0800d118 	.word	0x0800d118
 8002e68:	0800d12c 	.word	0x0800d12c
 8002e6c:	0800cd44 	.word	0x0800cd44
 8002e70:	20000c92 	.word	0x20000c92
 8002e74:	0800d140 	.word	0x0800d140
 8002e78:	0800d154 	.word	0x0800d154
 8002e7c:	0800d168 	.word	0x0800d168
			} else if(dilSecim == 1) {
 8002e80:	4b73      	ldr	r3, [pc, #460]	; (8003050 <menu+0x2bc0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d104      	bne.n	8002e92 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002e88:	4a72      	ldr	r2, [pc, #456]	; (8003054 <menu+0x2bc4>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd faaf 	bl	80003f0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr>=0) {
			if(dilSecim == 0) {
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <menu+0x2bc0>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e9a:	4a6f      	ldr	r2, [pc, #444]	; (8003058 <menu+0x2bc8>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fd faa6 	bl	80003f0 <lcd_print>
 8002ea4:	e008      	b.n	8002eb8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <menu+0x2bc0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8002eae:	4a6b      	ldr	r2, [pc, #428]	; (800305c <menu+0x2bcc>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7fd fa9c 	bl	80003f0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002eb8:	4b69      	ldr	r3, [pc, #420]	; (8003060 <menu+0x2bd0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	4969      	ldr	r1, [pc, #420]	; (8003064 <menu+0x2bd4>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f009 fb5d 	bl	800c580 <itoa>
		lcd_print(2,16,snum);
 8002ec6:	4a67      	ldr	r2, [pc, #412]	; (8003064 <menu+0x2bd4>)
 8002ec8:	2110      	movs	r1, #16
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f7fd fa90 	bl	80003f0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4865      	ldr	r0, [pc, #404]	; (8003068 <menu+0x2bd8>)
 8002ed4:	f005 f950 	bl	8008178 <HAL_GPIO_ReadPin>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d115      	bne.n	8002f0a <menu+0x2a7a>
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <menu+0x2bdc>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <menu+0x2bd0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <menu+0x2bd0>)
 8002ef6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <menu+0x2bd0>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d902      	bls.n	8002f06 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <menu+0x2bd0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f06:	f001 fa27 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4856      	ldr	r0, [pc, #344]	; (8003068 <menu+0x2bd8>)
 8002f0e:	f005 f933 	bl	8008178 <HAL_GPIO_ReadPin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d115      	bne.n	8002f44 <menu+0x2ab4>
 8002f18:	4b54      	ldr	r3, [pc, #336]	; (800306c <menu+0x2bdc>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <menu+0x2bd0>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <menu+0x2bd0>)
 8002f30:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <menu+0x2bd0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <menu+0x2bd0>)
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f40:	f001 fa0a 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f44:	2108      	movs	r1, #8
 8002f46:	4848      	ldr	r0, [pc, #288]	; (8003068 <menu+0x2bd8>)
 8002f48:	f005 f916 	bl	8008178 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <menu+0x2ade>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <menu+0x2bdc>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002f60:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <menu+0x2bd0>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <menu+0x2be0>)
 8002f66:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <menu+0x2be4>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002f6e:	4b42      	ldr	r3, [pc, #264]	; (8003078 <menu+0x2be8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b1a      	cmp	r3, #26
 8002f74:	f040 80ec 	bne.w	8003150 <menu+0x2cc0>
		if(dilSecim == 0) {
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <menu+0x2bc0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8002f80:	4a3e      	ldr	r2, [pc, #248]	; (800307c <menu+0x2bec>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fd fa33 	bl	80003f0 <lcd_print>
 8002f8a:	e008      	b.n	8002f9e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <menu+0x2bc0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8002f94:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <menu+0x2bf0>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fd fa29 	bl	80003f0 <lcd_print>
		}

		if(makineCalismaTmr>99) {
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <menu+0x2bf4>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b63      	cmp	r3, #99	; 0x63
 8002fa4:	d91e      	bls.n	8002fe4 <menu+0x2b54>
			if(dilSecim == 0) {
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <menu+0x2bc0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <menu+0x2bc8>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7fd fa1c 	bl	80003f0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <menu+0x2bc0>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d104      	bne.n	8002fca <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <menu+0x2bcc>)
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f7fd fa13 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <menu+0x2bf4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	220a      	movs	r2, #10
 8002fd0:	4924      	ldr	r1, [pc, #144]	; (8003064 <menu+0x2bd4>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f009 fad4 	bl	800c580 <itoa>
			lcd_print(2,14,snum);
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <menu+0x2bd4>)
 8002fda:	210e      	movs	r1, #14
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f7fd fa07 	bl	80003f0 <lcd_print>
 8002fe2:	e066      	b.n	80030b2 <menu+0x2c22>

		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <menu+0x2bf4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d923      	bls.n	8003034 <menu+0x2ba4>
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <menu+0x2bf4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b63      	cmp	r3, #99	; 0x63
 8002ff2:	d81f      	bhi.n	8003034 <menu+0x2ba4>
			if(dilSecim == 0) {
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <menu+0x2bc0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <menu+0x2bc8>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	2002      	movs	r0, #2
 8003002:	f7fd f9f5 	bl	80003f0 <lcd_print>
 8003006:	e008      	b.n	800301a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <menu+0x2bc0>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d104      	bne.n	800301a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <menu+0x2bcc>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f7fd f9eb 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <menu+0x2bf4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	220a      	movs	r2, #10
 8003020:	4910      	ldr	r1, [pc, #64]	; (8003064 <menu+0x2bd4>)
 8003022:	4618      	mov	r0, r3
 8003024:	f009 faac 	bl	800c580 <itoa>
			lcd_print(2, 15, snum);
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <menu+0x2bd4>)
 800302a:	210f      	movs	r1, #15
 800302c:	2002      	movs	r0, #2
 800302e:	f7fd f9df 	bl	80003f0 <lcd_print>
		} else if((makineCalismaTmr>=10) && (makineCalismaTmr <= 99)) {
 8003032:	e03e      	b.n	80030b2 <menu+0x2c22>
		} else if(makineCalismaTmr <= 9) {
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <menu+0x2bf4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d83a      	bhi.n	80030b2 <menu+0x2c22>
			if(dilSecim == 0) {
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <menu+0x2bc0>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d121      	bne.n	8003088 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <menu+0x2bc8>)
 8003046:	2101      	movs	r1, #1
 8003048:	2002      	movs	r0, #2
 800304a:	f7fd f9d1 	bl	80003f0 <lcd_print>
 800304e:	e024      	b.n	800309a <menu+0x2c0a>
 8003050:	20000c9c 	.word	0x20000c9c
 8003054:	0800d17c 	.word	0x0800d17c
 8003058:	0800cd44 	.word	0x0800cd44
 800305c:	0800d0b8 	.word	0x0800d0b8
 8003060:	20000c93 	.word	0x20000c93
 8003064:	20000c54 	.word	0x20000c54
 8003068:	40010800 	.word	0x40010800
 800306c:	20000caa 	.word	0x20000caa
 8003070:	20000c14 	.word	0x20000c14
 8003074:	20000ca7 	.word	0x20000ca7
 8003078:	20000c7c 	.word	0x20000c7c
 800307c:	0800d190 	.word	0x0800d190
 8003080:	0800d1a4 	.word	0x0800d1a4
 8003084:	20000c94 	.word	0x20000c94
			} else if(dilSecim == 1) {
 8003088:	4b8f      	ldr	r3, [pc, #572]	; (80032c8 <menu+0x2e38>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d104      	bne.n	800309a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003090:	4a8e      	ldr	r2, [pc, #568]	; (80032cc <menu+0x2e3c>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f7fd f9ab 	bl	80003f0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <menu+0x2e40>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	220a      	movs	r2, #10
 80030a0:	498c      	ldr	r1, [pc, #560]	; (80032d4 <menu+0x2e44>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f009 fa6c 	bl	800c580 <itoa>
			lcd_print(2, 16, snum);
 80030a8:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <menu+0x2e44>)
 80030aa:	2110      	movs	r1, #16
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7fd f99f 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2102      	movs	r1, #2
 80030b4:	4888      	ldr	r0, [pc, #544]	; (80032d8 <menu+0x2e48>)
 80030b6:	f005 f85f 	bl	8008178 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <menu+0x2c5c>
 80030c0:	4b86      	ldr	r3, [pc, #536]	; (80032dc <menu+0x2e4c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80030ce:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <menu+0x2e40>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <menu+0x2e40>)
 80030d8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <menu+0x2e40>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2bb4      	cmp	r3, #180	; 0xb4
 80030e0:	d902      	bls.n	80030e8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80030e2:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <menu+0x2e40>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e8:	f001 f936 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ec:	2104      	movs	r1, #4
 80030ee:	487a      	ldr	r0, [pc, #488]	; (80032d8 <menu+0x2e48>)
 80030f0:	f005 f842 	bl	8008178 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <menu+0x2c96>
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <menu+0x2e4c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003108:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <menu+0x2e40>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <menu+0x2e40>)
 8003112:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003114:	4b6e      	ldr	r3, [pc, #440]	; (80032d0 <menu+0x2e40>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2bb5      	cmp	r3, #181	; 0xb5
 800311a:	d902      	bls.n	8003122 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <menu+0x2e40>)
 800311e:	22b4      	movs	r2, #180	; 0xb4
 8003120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003122:	f001 f919 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003126:	2108      	movs	r1, #8
 8003128:	486b      	ldr	r0, [pc, #428]	; (80032d8 <menu+0x2e48>)
 800312a:	f005 f825 	bl	8008178 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <menu+0x2cc0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <menu+0x2e4c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <menu+0x2e40>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <menu+0x2e50>)
 8003148:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800314a:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <menu+0x2e54>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003150:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <menu+0x2e58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b1b      	cmp	r3, #27
 8003156:	f040 8083 	bne.w	8003260 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800315a:	4a64      	ldr	r2, [pc, #400]	; (80032ec <menu+0x2e5c>)
 800315c:	2101      	movs	r1, #1
 800315e:	2001      	movs	r0, #1
 8003160:	f7fd f946 	bl	80003f0 <lcd_print>

		if(buzzer == 0) {
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <menu+0x2e60>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <menu+0x2d04>
			if(dilSecim == 0) {
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <menu+0x2e38>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <menu+0x2e64>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f7fd f939 	bl	80003f0 <lcd_print>
 800317e:	e020      	b.n	80031c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <menu+0x2e38>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d11c      	bne.n	80031c2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003188:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <menu+0x2e68>)
 800318a:	2101      	movs	r1, #1
 800318c:	2002      	movs	r0, #2
 800318e:	f7fd f92f 	bl	80003f0 <lcd_print>
 8003192:	e016      	b.n	80031c2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <menu+0x2e60>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d112      	bne.n	80031c2 <menu+0x2d32>
			if(dilSecim == 0) {
 800319c:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <menu+0x2e38>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <menu+0x2e6c>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f7fd f921 	bl	80003f0 <lcd_print>
 80031ae:	e008      	b.n	80031c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80031b0:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <menu+0x2e38>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d104      	bne.n	80031c2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <menu+0x2e70>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2002      	movs	r0, #2
 80031be:	f7fd f917 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c2:	2102      	movs	r1, #2
 80031c4:	4844      	ldr	r0, [pc, #272]	; (80032d8 <menu+0x2e48>)
 80031c6:	f004 ffd7 	bl	8008178 <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d115      	bne.n	80031fc <menu+0x2d6c>
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <menu+0x2e4c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <menu+0x2d6c>
			buzzer = buzzer + 1;
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <menu+0x2e60>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <menu+0x2e60>)
 80031e8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <menu+0x2e60>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d902      	bls.n	80031f8 <menu+0x2d68>
				buzzer = 0;
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <menu+0x2e60>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031f8:	f001 f8ae 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fc:	2104      	movs	r1, #4
 80031fe:	4836      	ldr	r0, [pc, #216]	; (80032d8 <menu+0x2e48>)
 8003200:	f004 ffba 	bl	8008178 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d115      	bne.n	8003236 <menu+0x2da6>
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <menu+0x2e4c>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <menu+0x2e60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <menu+0x2e60>)
 8003222:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <menu+0x2e60>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <menu+0x2da2>
		   		buzzer = 1;
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <menu+0x2e60>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003232:	f001 f891 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003236:	2108      	movs	r1, #8
 8003238:	4827      	ldr	r0, [pc, #156]	; (80032d8 <menu+0x2e48>)
 800323a:	f004 ff9d 	bl	8008178 <HAL_GPIO_ReadPin>
 800323e:	4603      	mov	r3, r0
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <menu+0x2dd0>
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <menu+0x2e4c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f083 0301 	eor.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003252:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <menu+0x2e60>)
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <menu+0x2e50>)
 8003258:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <menu+0x2e54>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <menu+0x2e58>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	f040 80ab 	bne.w	80033c0 <menu+0x2f30>
		calismaSayModu = 0;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <menu+0x2e74>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <menu+0x2e78>)
 8003272:	2101      	movs	r1, #1
 8003274:	2001      	movs	r0, #1
 8003276:	f7fd f8bb 	bl	80003f0 <lcd_print>

		if(demoMode == 0) {
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <menu+0x2e7c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <menu+0x2e1a>
			if(dilSecim == 0) {
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <menu+0x2e38>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <menu+0x2e64>)
 800328c:	2101      	movs	r1, #1
 800328e:	2002      	movs	r0, #2
 8003290:	f7fd f8ae 	bl	80003f0 <lcd_print>
 8003294:	e045      	b.n	8003322 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <menu+0x2e38>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d141      	bne.n	8003322 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <menu+0x2e68>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	2002      	movs	r0, #2
 80032a4:	f7fd f8a4 	bl	80003f0 <lcd_print>
 80032a8:	e03b      	b.n	8003322 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <menu+0x2e7c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d137      	bne.n	8003322 <menu+0x2e92>
			if(dilSecim == 0){
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <menu+0x2e38>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12a      	bne.n	8003310 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <menu+0x2e6c>)
 80032bc:	2101      	movs	r1, #1
 80032be:	2002      	movs	r0, #2
 80032c0:	f7fd f896 	bl	80003f0 <lcd_print>
 80032c4:	e02d      	b.n	8003322 <menu+0x2e92>
 80032c6:	bf00      	nop
 80032c8:	20000c9c 	.word	0x20000c9c
 80032cc:	0800d0b8 	.word	0x0800d0b8
 80032d0:	20000c94 	.word	0x20000c94
 80032d4:	20000c54 	.word	0x20000c54
 80032d8:	40010800 	.word	0x40010800
 80032dc:	20000caa 	.word	0x20000caa
 80032e0:	20000c14 	.word	0x20000c14
 80032e4:	20000ca7 	.word	0x20000ca7
 80032e8:	20000c7c 	.word	0x20000c7c
 80032ec:	0800d1b8 	.word	0x0800d1b8
 80032f0:	20000c98 	.word	0x20000c98
 80032f4:	0800cae0 	.word	0x0800cae0
 80032f8:	0800caf4 	.word	0x0800caf4
 80032fc:	0800cb40 	.word	0x0800cb40
 8003300:	0800cb54 	.word	0x0800cb54
 8003304:	20000c9b 	.word	0x20000c9b
 8003308:	0800d1cc 	.word	0x0800d1cc
 800330c:	20000c9a 	.word	0x20000c9a
			} else if(dilSecim == 1) {
 8003310:	4b71      	ldr	r3, [pc, #452]	; (80034d8 <menu+0x3048>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d104      	bne.n	8003322 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003318:	4a70      	ldr	r2, [pc, #448]	; (80034dc <menu+0x304c>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f7fd f867 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003322:	2102      	movs	r1, #2
 8003324:	486e      	ldr	r0, [pc, #440]	; (80034e0 <menu+0x3050>)
 8003326:	f004 ff27 	bl	8008178 <HAL_GPIO_ReadPin>
 800332a:	4603      	mov	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d115      	bne.n	800335c <menu+0x2ecc>
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <menu+0x3054>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00e      	beq.n	800335c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <menu+0x3058>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <menu+0x3058>)
 8003348:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <menu+0x3058>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d902      	bls.n	8003358 <menu+0x2ec8>
				demoMode = 0;
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <menu+0x3058>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003358:	f000 fffe 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800335c:	2104      	movs	r1, #4
 800335e:	4860      	ldr	r0, [pc, #384]	; (80034e0 <menu+0x3050>)
 8003360:	f004 ff0a 	bl	8008178 <HAL_GPIO_ReadPin>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d115      	bne.n	8003396 <menu+0x2f06>
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <menu+0x3054>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	f083 0301 	eor.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <menu+0x3058>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <menu+0x3058>)
 8003382:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <menu+0x3058>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <menu+0x2f02>
		   		demoMode = 1;
 800338c:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <menu+0x3058>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003392:	f000 ffe1 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003396:	2108      	movs	r1, #8
 8003398:	4851      	ldr	r0, [pc, #324]	; (80034e0 <menu+0x3050>)
 800339a:	f004 feed 	bl	8008178 <HAL_GPIO_ReadPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10d      	bne.n	80033c0 <menu+0x2f30>
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <menu+0x3054>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <menu+0x3058>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <menu+0x305c>)
 80033b8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80033ba:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <menu+0x3060>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <menu+0x3064>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b1d      	cmp	r3, #29
 80033c6:	f040 8132 	bne.w	800362e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <menu+0x3068>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d113      	bne.n	80033fa <menu+0x2f6a>
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <menu+0x306c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <menu+0x2f6a>
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <menu+0x3070>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <menu+0x2f6a>
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <menu+0x3074>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <menu+0x2f6a>
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <menu+0x3078>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <menu+0x2f6a>
			calismaSayisiYar = 0;
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <menu+0x307c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e002      	b.n	8003400 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80033fa:	4b44      	ldr	r3, [pc, #272]	; (800350c <menu+0x307c>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <menu+0x3080>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d154      	bne.n	80034b2 <menu+0x3022>
			if(dilSecim == 0) {
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <menu+0x3048>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003410:	4a40      	ldr	r2, [pc, #256]	; (8003514 <menu+0x3084>)
 8003412:	2101      	movs	r1, #1
 8003414:	2001      	movs	r0, #1
 8003416:	f7fc ffeb 	bl	80003f0 <lcd_print>
 800341a:	e008      	b.n	800342e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <menu+0x3048>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d104      	bne.n	800342e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <menu+0x3088>)
 8003426:	2101      	movs	r1, #1
 8003428:	2001      	movs	r0, #1
 800342a:	f7fc ffe1 	bl	80003f0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <menu+0x3078>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	220a      	movs	r2, #10
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <menu+0x308c>)
 8003436:	4618      	mov	r0, r3
 8003438:	f009 f8a2 	bl	800c580 <itoa>
			lcd_print(2, 12, snum);
 800343c:	4a37      	ldr	r2, [pc, #220]	; (800351c <menu+0x308c>)
 800343e:	210c      	movs	r1, #12
 8003440:	2002      	movs	r0, #2
 8003442:	f7fc ffd5 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <menu+0x3074>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	220a      	movs	r2, #10
 800344c:	4933      	ldr	r1, [pc, #204]	; (800351c <menu+0x308c>)
 800344e:	4618      	mov	r0, r3
 8003450:	f009 f896 	bl	800c580 <itoa>
			lcd_print(2, 13, snum);
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <menu+0x308c>)
 8003456:	210d      	movs	r1, #13
 8003458:	2002      	movs	r0, #2
 800345a:	f7fc ffc9 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <menu+0x3070>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	220a      	movs	r2, #10
 8003464:	492d      	ldr	r1, [pc, #180]	; (800351c <menu+0x308c>)
 8003466:	4618      	mov	r0, r3
 8003468:	f009 f88a 	bl	800c580 <itoa>
			lcd_print(2, 14, snum);
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <menu+0x308c>)
 800346e:	210e      	movs	r1, #14
 8003470:	2002      	movs	r0, #2
 8003472:	f7fc ffbd 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <menu+0x306c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	220a      	movs	r2, #10
 800347c:	4927      	ldr	r1, [pc, #156]	; (800351c <menu+0x308c>)
 800347e:	4618      	mov	r0, r3
 8003480:	f009 f87e 	bl	800c580 <itoa>
			lcd_print(2, 15, snum);
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <menu+0x308c>)
 8003486:	210f      	movs	r1, #15
 8003488:	2002      	movs	r0, #2
 800348a:	f7fc ffb1 	bl	80003f0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <menu+0x3068>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	220a      	movs	r2, #10
 8003494:	4921      	ldr	r1, [pc, #132]	; (800351c <menu+0x308c>)
 8003496:	4618      	mov	r0, r3
 8003498:	f009 f872 	bl	800c580 <itoa>
			lcd_print(2, 16, snum);
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <menu+0x308c>)
 800349e:	2110      	movs	r1, #16
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7fc ffa5 	bl	80003f0 <lcd_print>

			lcd_print(2, 1, "           ");
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <menu+0x3090>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2002      	movs	r0, #2
 80034ac:	f7fc ffa0 	bl	80003f0 <lcd_print>
 80034b0:	e048      	b.n	8003544 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <menu+0x3080>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d144      	bne.n	8003544 <menu+0x30b4>
			if(dilSecim == 0) {
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <menu+0x3048>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d132      	bne.n	8003528 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <menu+0x3084>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f7fc ff92 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <menu+0x3094>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	2002      	movs	r0, #2
 80034d2:	f7fc ff8d 	bl	80003f0 <lcd_print>
 80034d6:	e035      	b.n	8003544 <menu+0x30b4>
 80034d8:	20000c9c 	.word	0x20000c9c
 80034dc:	0800cb54 	.word	0x0800cb54
 80034e0:	40010800 	.word	0x40010800
 80034e4:	20000caa 	.word	0x20000caa
 80034e8:	20000c9a 	.word	0x20000c9a
 80034ec:	20000c14 	.word	0x20000c14
 80034f0:	20000ca7 	.word	0x20000ca7
 80034f4:	20000c7c 	.word	0x20000c7c
 80034f8:	20000c79 	.word	0x20000c79
 80034fc:	20000c7a 	.word	0x20000c7a
 8003500:	20000940 	.word	0x20000940
 8003504:	20000941 	.word	0x20000941
 8003508:	20000c7b 	.word	0x20000c7b
 800350c:	20000cbc 	.word	0x20000cbc
 8003510:	20000c9b 	.word	0x20000c9b
 8003514:	0800d1dc 	.word	0x0800d1dc
 8003518:	0800d1f0 	.word	0x0800d1f0
 800351c:	20000c54 	.word	0x20000c54
 8003520:	0800d204 	.word	0x0800d204
 8003524:	0800d210 	.word	0x0800d210
			} else if(dilSecim == 1) {
 8003528:	4b95      	ldr	r3, [pc, #596]	; (8003780 <menu+0x32f0>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d109      	bne.n	8003544 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003530:	4a94      	ldr	r2, [pc, #592]	; (8003784 <menu+0x32f4>)
 8003532:	2101      	movs	r1, #1
 8003534:	2001      	movs	r0, #1
 8003536:	f7fc ff5b 	bl	80003f0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800353a:	4a93      	ldr	r2, [pc, #588]	; (8003788 <menu+0x32f8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f7fc ff56 	bl	80003f0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003544:	2102      	movs	r1, #2
 8003546:	4891      	ldr	r0, [pc, #580]	; (800378c <menu+0x32fc>)
 8003548:	f004 fe16 	bl	8008178 <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d119      	bne.n	8003586 <menu+0x30f6>
 8003552:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <menu+0x3300>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <menu+0x30f6>
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <menu+0x3304>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003568:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <menu+0x3308>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b89      	ldr	r3, [pc, #548]	; (8003798 <menu+0x3308>)
 8003572:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <menu+0x3308>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d902      	bls.n	8003582 <menu+0x30f2>
				calismaSayModu = 0;
 800357c:	4b86      	ldr	r3, [pc, #536]	; (8003798 <menu+0x3308>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003582:	f000 fee9 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003586:	2104      	movs	r1, #4
 8003588:	4880      	ldr	r0, [pc, #512]	; (800378c <menu+0x32fc>)
 800358a:	f004 fdf5 	bl	8008178 <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d119      	bne.n	80035c8 <menu+0x3138>
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <menu+0x3300>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <menu+0x3138>
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <menu+0x3304>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <menu+0x3308>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <menu+0x3308>)
 80035b4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <menu+0x3308>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <menu+0x3134>
		   		calismaSayModu = 1;
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <menu+0x3308>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035c4:	f000 fec8 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c8:	2108      	movs	r1, #8
 80035ca:	4870      	ldr	r0, [pc, #448]	; (800378c <menu+0x32fc>)
 80035cc:	f004 fdd4 	bl	8008178 <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d12b      	bne.n	800362e <menu+0x319e>
 80035d6:	4b6e      	ldr	r3, [pc, #440]	; (8003790 <menu+0x3300>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d024      	beq.n	800362e <menu+0x319e>
			eepromData[32] = 0;
 80035e4:	4b6d      	ldr	r3, [pc, #436]	; (800379c <menu+0x330c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <menu+0x330c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <menu+0x330c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <menu+0x330c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <menu+0x330c>)
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <menu+0x3310>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <menu+0x3314>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003610:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <menu+0x3318>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <menu+0x331c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800361c:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <menu+0x3320>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <menu+0x3308>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003628:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <menu+0x3324>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <menu+0x3328>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b1e      	cmp	r3, #30
 8003634:	d16f      	bne.n	8003716 <menu+0x3286>
		calismaSayModu = 0;
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <menu+0x3308>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <menu+0x32f0>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003644:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <menu+0x332c>)
 8003646:	2101      	movs	r1, #1
 8003648:	2001      	movs	r0, #1
 800364a:	f7fc fed1 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800364e:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <menu+0x3330>)
 8003650:	2101      	movs	r1, #1
 8003652:	2002      	movs	r0, #2
 8003654:	f7fc fecc 	bl	80003f0 <lcd_print>
 8003658:	e00d      	b.n	8003676 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <menu+0x32f0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d109      	bne.n	8003676 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <menu+0x3334>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f7fc fec2 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800366c:	4a56      	ldr	r2, [pc, #344]	; (80037c8 <menu+0x3338>)
 800366e:	2101      	movs	r1, #1
 8003670:	2002      	movs	r0, #2
 8003672:	f7fc febd 	bl	80003f0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003676:	2102      	movs	r1, #2
 8003678:	4844      	ldr	r0, [pc, #272]	; (800378c <menu+0x32fc>)
 800367a:	f004 fd7d 	bl	8008178 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <menu+0x3220>
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <menu+0x3300>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <menu+0x32f0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <menu+0x32f0>)
 800369c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <menu+0x32f0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d902      	bls.n	80036ac <menu+0x321c>
				dilSecim = 0;
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <menu+0x32f0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80036ac:	f000 fe54 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b0:	2104      	movs	r1, #4
 80036b2:	4836      	ldr	r0, [pc, #216]	; (800378c <menu+0x32fc>)
 80036b4:	f004 fd60 	bl	8008178 <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d115      	bne.n	80036ea <menu+0x325a>
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <menu+0x3300>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <menu+0x325a>
			dilSecim = dilSecim - 1;
 80036cc:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <menu+0x32f0>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <menu+0x32f0>)
 80036d6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <menu+0x32f0>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <menu+0x3256>
		   		dilSecim = 1;
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <menu+0x32f0>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80036e6:	f000 fe37 	bl	8004358 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2108      	movs	r1, #8
 80036ec:	4827      	ldr	r0, [pc, #156]	; (800378c <menu+0x32fc>)
 80036ee:	f004 fd43 	bl	8008178 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10e      	bne.n	8003716 <menu+0x3286>
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <menu+0x3300>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <menu+0x32f0>)
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <menu+0x330c>)
 800370c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <menu+0x3324>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <menu+0x3328>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b1f      	cmp	r3, #31
 800371c:	d12e      	bne.n	800377c <menu+0x32ec>
		if(dilSecim == 0) {
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <menu+0x32f0>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <menu+0x333c>)
 8003728:	2101      	movs	r1, #1
 800372a:	2001      	movs	r0, #1
 800372c:	f7fc fe60 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <menu+0x3340>)
 8003732:	2101      	movs	r1, #1
 8003734:	2002      	movs	r0, #2
 8003736:	f7fc fe5b 	bl	80003f0 <lcd_print>
 800373a:	e00d      	b.n	8003758 <menu+0x32c8>
		} else if(dilSecim == 1) {
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <menu+0x32f0>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d109      	bne.n	8003758 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <menu+0x3344>)
 8003746:	2101      	movs	r1, #1
 8003748:	2001      	movs	r0, #1
 800374a:	f7fc fe51 	bl	80003f0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <menu+0x3348>)
 8003750:	2101      	movs	r1, #1
 8003752:	2002      	movs	r0, #2
 8003754:	f7fc fe4c 	bl	80003f0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003758:	2108      	movs	r1, #8
 800375a:	480c      	ldr	r0, [pc, #48]	; (800378c <menu+0x32fc>)
 800375c:	f004 fd0c 	bl	8008178 <HAL_GPIO_ReadPin>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10a      	bne.n	800377c <menu+0x32ec>
			menuGiris = 0;
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <menu+0x334c>)
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 800376c:	f7fc fe55 	bl	800041a <lcd_clear>
			HAL_Delay(500);
 8003770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003774:	f004 f872 	bl	800785c <HAL_Delay>
			NVIC_SystemReset();
 8003778:	f7fc fe5a 	bl	8000430 <__NVIC_SystemReset>
		}
	}
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000c9c 	.word	0x20000c9c
 8003784:	0800d1f0 	.word	0x0800d1f0
 8003788:	0800d224 	.word	0x0800d224
 800378c:	40010800 	.word	0x40010800
 8003790:	20000caa 	.word	0x20000caa
 8003794:	20000cbc 	.word	0x20000cbc
 8003798:	20000c9b 	.word	0x20000c9b
 800379c:	20000c14 	.word	0x20000c14
 80037a0:	20000c7b 	.word	0x20000c7b
 80037a4:	20000941 	.word	0x20000941
 80037a8:	20000940 	.word	0x20000940
 80037ac:	20000c7a 	.word	0x20000c7a
 80037b0:	20000c79 	.word	0x20000c79
 80037b4:	20000ca7 	.word	0x20000ca7
 80037b8:	20000c7c 	.word	0x20000c7c
 80037bc:	0800d238 	.word	0x0800d238
 80037c0:	0800d24c 	.word	0x0800d24c
 80037c4:	0800d260 	.word	0x0800d260
 80037c8:	0800d274 	.word	0x0800d274
 80037cc:	0800d288 	.word	0x0800d288
 80037d0:	0800d29c 	.word	0x0800d29c
 80037d4:	0800d2b0 	.word	0x0800d2b0
 80037d8:	0800d2c4 	.word	0x0800d2c4
 80037dc:	20000c99 	.word	0x20000c99

080037e0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80037ea:	48a9      	ldr	r0, [pc, #676]	; (8003a90 <loadMenuTexts+0x2b0>)
 80037ec:	f7fc fe36 	bl	800045c <copyText>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4aa8      	ldr	r2, [pc, #672]	; (8003a94 <loadMenuTexts+0x2b4>)
 80037f4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80037f6:	48a8      	ldr	r0, [pc, #672]	; (8003a98 <loadMenuTexts+0x2b8>)
 80037f8:	f7fc fe30 	bl	800045c <copyText>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4aa7      	ldr	r2, [pc, #668]	; (8003a9c <loadMenuTexts+0x2bc>)
 8003800:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003802:	48a7      	ldr	r0, [pc, #668]	; (8003aa0 <loadMenuTexts+0x2c0>)
 8003804:	f7fc fe2a 	bl	800045c <copyText>
 8003808:	4603      	mov	r3, r0
 800380a:	4aa6      	ldr	r2, [pc, #664]	; (8003aa4 <loadMenuTexts+0x2c4>)
 800380c:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 800380e:	48a6      	ldr	r0, [pc, #664]	; (8003aa8 <loadMenuTexts+0x2c8>)
 8003810:	f7fc fe24 	bl	800045c <copyText>
 8003814:	4603      	mov	r3, r0
 8003816:	4aa5      	ldr	r2, [pc, #660]	; (8003aac <loadMenuTexts+0x2cc>)
 8003818:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800381a:	48a5      	ldr	r0, [pc, #660]	; (8003ab0 <loadMenuTexts+0x2d0>)
 800381c:	f7fc fe1e 	bl	800045c <copyText>
 8003820:	4603      	mov	r3, r0
 8003822:	4aa4      	ldr	r2, [pc, #656]	; (8003ab4 <loadMenuTexts+0x2d4>)
 8003824:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003826:	48a4      	ldr	r0, [pc, #656]	; (8003ab8 <loadMenuTexts+0x2d8>)
 8003828:	f7fc fe18 	bl	800045c <copyText>
 800382c:	4603      	mov	r3, r0
 800382e:	4aa3      	ldr	r2, [pc, #652]	; (8003abc <loadMenuTexts+0x2dc>)
 8003830:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003832:	48a3      	ldr	r0, [pc, #652]	; (8003ac0 <loadMenuTexts+0x2e0>)
 8003834:	f7fc fe12 	bl	800045c <copyText>
 8003838:	4603      	mov	r3, r0
 800383a:	4aa2      	ldr	r2, [pc, #648]	; (8003ac4 <loadMenuTexts+0x2e4>)
 800383c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 82d1 	bne.w	8003de8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003846:	48a0      	ldr	r0, [pc, #640]	; (8003ac8 <loadMenuTexts+0x2e8>)
 8003848:	f7fc fe08 	bl	800045c <copyText>
 800384c:	4603      	mov	r3, r0
 800384e:	4a9f      	ldr	r2, [pc, #636]	; (8003acc <loadMenuTexts+0x2ec>)
 8003850:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003852:	489f      	ldr	r0, [pc, #636]	; (8003ad0 <loadMenuTexts+0x2f0>)
 8003854:	f7fc fe02 	bl	800045c <copyText>
 8003858:	4603      	mov	r3, r0
 800385a:	4a9e      	ldr	r2, [pc, #632]	; (8003ad4 <loadMenuTexts+0x2f4>)
 800385c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800385e:	489e      	ldr	r0, [pc, #632]	; (8003ad8 <loadMenuTexts+0x2f8>)
 8003860:	f7fc fdfc 	bl	800045c <copyText>
 8003864:	4603      	mov	r3, r0
 8003866:	4a9d      	ldr	r2, [pc, #628]	; (8003adc <loadMenuTexts+0x2fc>)
 8003868:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800386a:	489d      	ldr	r0, [pc, #628]	; (8003ae0 <loadMenuTexts+0x300>)
 800386c:	f7fc fdf6 	bl	800045c <copyText>
 8003870:	4603      	mov	r3, r0
 8003872:	4a9c      	ldr	r2, [pc, #624]	; (8003ae4 <loadMenuTexts+0x304>)
 8003874:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003876:	489c      	ldr	r0, [pc, #624]	; (8003ae8 <loadMenuTexts+0x308>)
 8003878:	f7fc fdf0 	bl	800045c <copyText>
 800387c:	4603      	mov	r3, r0
 800387e:	4a9b      	ldr	r2, [pc, #620]	; (8003aec <loadMenuTexts+0x30c>)
 8003880:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003882:	489b      	ldr	r0, [pc, #620]	; (8003af0 <loadMenuTexts+0x310>)
 8003884:	f7fc fdea 	bl	800045c <copyText>
 8003888:	4603      	mov	r3, r0
 800388a:	4a9a      	ldr	r2, [pc, #616]	; (8003af4 <loadMenuTexts+0x314>)
 800388c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800388e:	489a      	ldr	r0, [pc, #616]	; (8003af8 <loadMenuTexts+0x318>)
 8003890:	f7fc fde4 	bl	800045c <copyText>
 8003894:	4603      	mov	r3, r0
 8003896:	4a99      	ldr	r2, [pc, #612]	; (8003afc <loadMenuTexts+0x31c>)
 8003898:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800389a:	4899      	ldr	r0, [pc, #612]	; (8003b00 <loadMenuTexts+0x320>)
 800389c:	f7fc fdde 	bl	800045c <copyText>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a98      	ldr	r2, [pc, #608]	; (8003b04 <loadMenuTexts+0x324>)
 80038a4:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 80038a6:	4898      	ldr	r0, [pc, #608]	; (8003b08 <loadMenuTexts+0x328>)
 80038a8:	f7fc fdd8 	bl	800045c <copyText>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a97      	ldr	r2, [pc, #604]	; (8003b0c <loadMenuTexts+0x32c>)
 80038b0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80038b2:	4897      	ldr	r0, [pc, #604]	; (8003b10 <loadMenuTexts+0x330>)
 80038b4:	f7fc fdd2 	bl	800045c <copyText>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4a96      	ldr	r2, [pc, #600]	; (8003b14 <loadMenuTexts+0x334>)
 80038bc:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80038be:	4896      	ldr	r0, [pc, #600]	; (8003b18 <loadMenuTexts+0x338>)
 80038c0:	f7fc fdcc 	bl	800045c <copyText>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a95      	ldr	r2, [pc, #596]	; (8003b1c <loadMenuTexts+0x33c>)
 80038c8:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80038ca:	4895      	ldr	r0, [pc, #596]	; (8003b20 <loadMenuTexts+0x340>)
 80038cc:	f7fc fdc6 	bl	800045c <copyText>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4a94      	ldr	r2, [pc, #592]	; (8003b24 <loadMenuTexts+0x344>)
 80038d4:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80038d6:	4894      	ldr	r0, [pc, #592]	; (8003b28 <loadMenuTexts+0x348>)
 80038d8:	f7fc fdc0 	bl	800045c <copyText>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a93      	ldr	r2, [pc, #588]	; (8003b2c <loadMenuTexts+0x34c>)
 80038e0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80038e2:	4893      	ldr	r0, [pc, #588]	; (8003b30 <loadMenuTexts+0x350>)
 80038e4:	f7fc fdba 	bl	800045c <copyText>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <loadMenuTexts+0x354>)
 80038ec:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80038ee:	4892      	ldr	r0, [pc, #584]	; (8003b38 <loadMenuTexts+0x358>)
 80038f0:	f7fc fdb4 	bl	800045c <copyText>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a91      	ldr	r2, [pc, #580]	; (8003b3c <loadMenuTexts+0x35c>)
 80038f8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80038fa:	4891      	ldr	r0, [pc, #580]	; (8003b40 <loadMenuTexts+0x360>)
 80038fc:	f7fc fdae 	bl	800045c <copyText>
 8003900:	4603      	mov	r3, r0
 8003902:	4a90      	ldr	r2, [pc, #576]	; (8003b44 <loadMenuTexts+0x364>)
 8003904:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003906:	4890      	ldr	r0, [pc, #576]	; (8003b48 <loadMenuTexts+0x368>)
 8003908:	f7fc fda8 	bl	800045c <copyText>
 800390c:	4603      	mov	r3, r0
 800390e:	4a8f      	ldr	r2, [pc, #572]	; (8003b4c <loadMenuTexts+0x36c>)
 8003910:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003912:	488f      	ldr	r0, [pc, #572]	; (8003b50 <loadMenuTexts+0x370>)
 8003914:	f7fc fda2 	bl	800045c <copyText>
 8003918:	4603      	mov	r3, r0
 800391a:	4a8e      	ldr	r2, [pc, #568]	; (8003b54 <loadMenuTexts+0x374>)
 800391c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 800391e:	488e      	ldr	r0, [pc, #568]	; (8003b58 <loadMenuTexts+0x378>)
 8003920:	f7fc fd9c 	bl	800045c <copyText>
 8003924:	4603      	mov	r3, r0
 8003926:	4a8d      	ldr	r2, [pc, #564]	; (8003b5c <loadMenuTexts+0x37c>)
 8003928:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 800392a:	488d      	ldr	r0, [pc, #564]	; (8003b60 <loadMenuTexts+0x380>)
 800392c:	f7fc fd96 	bl	800045c <copyText>
 8003930:	4603      	mov	r3, r0
 8003932:	4a8c      	ldr	r2, [pc, #560]	; (8003b64 <loadMenuTexts+0x384>)
 8003934:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003936:	488c      	ldr	r0, [pc, #560]	; (8003b68 <loadMenuTexts+0x388>)
 8003938:	f7fc fd90 	bl	800045c <copyText>
 800393c:	4603      	mov	r3, r0
 800393e:	4a8b      	ldr	r2, [pc, #556]	; (8003b6c <loadMenuTexts+0x38c>)
 8003940:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003942:	488b      	ldr	r0, [pc, #556]	; (8003b70 <loadMenuTexts+0x390>)
 8003944:	f7fc fd8a 	bl	800045c <copyText>
 8003948:	4603      	mov	r3, r0
 800394a:	4a8a      	ldr	r2, [pc, #552]	; (8003b74 <loadMenuTexts+0x394>)
 800394c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 800394e:	488a      	ldr	r0, [pc, #552]	; (8003b78 <loadMenuTexts+0x398>)
 8003950:	f7fc fd84 	bl	800045c <copyText>
 8003954:	4603      	mov	r3, r0
 8003956:	4a89      	ldr	r2, [pc, #548]	; (8003b7c <loadMenuTexts+0x39c>)
 8003958:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 800395a:	4889      	ldr	r0, [pc, #548]	; (8003b80 <loadMenuTexts+0x3a0>)
 800395c:	f7fc fd7e 	bl	800045c <copyText>
 8003960:	4603      	mov	r3, r0
 8003962:	4a88      	ldr	r2, [pc, #544]	; (8003b84 <loadMenuTexts+0x3a4>)
 8003964:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003966:	4888      	ldr	r0, [pc, #544]	; (8003b88 <loadMenuTexts+0x3a8>)
 8003968:	f7fc fd78 	bl	800045c <copyText>
 800396c:	4603      	mov	r3, r0
 800396e:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <loadMenuTexts+0x3ac>)
 8003970:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003972:	4887      	ldr	r0, [pc, #540]	; (8003b90 <loadMenuTexts+0x3b0>)
 8003974:	f7fc fd72 	bl	800045c <copyText>
 8003978:	4603      	mov	r3, r0
 800397a:	4a86      	ldr	r2, [pc, #536]	; (8003b94 <loadMenuTexts+0x3b4>)
 800397c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 800397e:	4886      	ldr	r0, [pc, #536]	; (8003b98 <loadMenuTexts+0x3b8>)
 8003980:	f7fc fd6c 	bl	800045c <copyText>
 8003984:	4603      	mov	r3, r0
 8003986:	4a85      	ldr	r2, [pc, #532]	; (8003b9c <loadMenuTexts+0x3bc>)
 8003988:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 800398a:	4885      	ldr	r0, [pc, #532]	; (8003ba0 <loadMenuTexts+0x3c0>)
 800398c:	f7fc fd66 	bl	800045c <copyText>
 8003990:	4603      	mov	r3, r0
 8003992:	4a84      	ldr	r2, [pc, #528]	; (8003ba4 <loadMenuTexts+0x3c4>)
 8003994:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003996:	4884      	ldr	r0, [pc, #528]	; (8003ba8 <loadMenuTexts+0x3c8>)
 8003998:	f7fc fd60 	bl	800045c <copyText>
 800399c:	4603      	mov	r3, r0
 800399e:	4a83      	ldr	r2, [pc, #524]	; (8003bac <loadMenuTexts+0x3cc>)
 80039a0:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 80039a2:	4883      	ldr	r0, [pc, #524]	; (8003bb0 <loadMenuTexts+0x3d0>)
 80039a4:	f7fc fd5a 	bl	800045c <copyText>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a82      	ldr	r2, [pc, #520]	; (8003bb4 <loadMenuTexts+0x3d4>)
 80039ac:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 80039ae:	4882      	ldr	r0, [pc, #520]	; (8003bb8 <loadMenuTexts+0x3d8>)
 80039b0:	f7fc fd54 	bl	800045c <copyText>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a81      	ldr	r2, [pc, #516]	; (8003bbc <loadMenuTexts+0x3dc>)
 80039b8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 80039ba:	4881      	ldr	r0, [pc, #516]	; (8003bc0 <loadMenuTexts+0x3e0>)
 80039bc:	f7fc fd4e 	bl	800045c <copyText>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <loadMenuTexts+0x3e4>)
 80039c4:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 80039c6:	4880      	ldr	r0, [pc, #512]	; (8003bc8 <loadMenuTexts+0x3e8>)
 80039c8:	f7fc fd48 	bl	800045c <copyText>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <loadMenuTexts+0x3ec>)
 80039d0:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 80039d2:	487f      	ldr	r0, [pc, #508]	; (8003bd0 <loadMenuTexts+0x3f0>)
 80039d4:	f7fc fd42 	bl	800045c <copyText>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a7e      	ldr	r2, [pc, #504]	; (8003bd4 <loadMenuTexts+0x3f4>)
 80039dc:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 80039de:	487e      	ldr	r0, [pc, #504]	; (8003bd8 <loadMenuTexts+0x3f8>)
 80039e0:	f7fc fd3c 	bl	800045c <copyText>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <loadMenuTexts+0x3fc>)
 80039e8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 80039ea:	487d      	ldr	r0, [pc, #500]	; (8003be0 <loadMenuTexts+0x400>)
 80039ec:	f7fc fd36 	bl	800045c <copyText>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <loadMenuTexts+0x404>)
 80039f4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 80039f6:	487c      	ldr	r0, [pc, #496]	; (8003be8 <loadMenuTexts+0x408>)
 80039f8:	f7fc fd30 	bl	800045c <copyText>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a7b      	ldr	r2, [pc, #492]	; (8003bec <loadMenuTexts+0x40c>)
 8003a00:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003a02:	487b      	ldr	r0, [pc, #492]	; (8003bf0 <loadMenuTexts+0x410>)
 8003a04:	f7fc fd2a 	bl	800045c <copyText>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <loadMenuTexts+0x414>)
 8003a0c:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003a0e:	487a      	ldr	r0, [pc, #488]	; (8003bf8 <loadMenuTexts+0x418>)
 8003a10:	f7fc fd24 	bl	800045c <copyText>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a79      	ldr	r2, [pc, #484]	; (8003bfc <loadMenuTexts+0x41c>)
 8003a18:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003a1a:	4879      	ldr	r0, [pc, #484]	; (8003c00 <loadMenuTexts+0x420>)
 8003a1c:	f7fc fd1e 	bl	800045c <copyText>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a78      	ldr	r2, [pc, #480]	; (8003c04 <loadMenuTexts+0x424>)
 8003a24:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003a26:	4878      	ldr	r0, [pc, #480]	; (8003c08 <loadMenuTexts+0x428>)
 8003a28:	f7fc fd18 	bl	800045c <copyText>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a77      	ldr	r2, [pc, #476]	; (8003c0c <loadMenuTexts+0x42c>)
 8003a30:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003a32:	4877      	ldr	r0, [pc, #476]	; (8003c10 <loadMenuTexts+0x430>)
 8003a34:	f7fc fd12 	bl	800045c <copyText>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a76      	ldr	r2, [pc, #472]	; (8003c14 <loadMenuTexts+0x434>)
 8003a3c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003a3e:	4876      	ldr	r0, [pc, #472]	; (8003c18 <loadMenuTexts+0x438>)
 8003a40:	f7fc fd0c 	bl	800045c <copyText>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <loadMenuTexts+0x43c>)
 8003a48:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003a4a:	4875      	ldr	r0, [pc, #468]	; (8003c20 <loadMenuTexts+0x440>)
 8003a4c:	f7fc fd06 	bl	800045c <copyText>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a74      	ldr	r2, [pc, #464]	; (8003c24 <loadMenuTexts+0x444>)
 8003a54:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003a56:	4874      	ldr	r0, [pc, #464]	; (8003c28 <loadMenuTexts+0x448>)
 8003a58:	f7fc fd00 	bl	800045c <copyText>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a73      	ldr	r2, [pc, #460]	; (8003c2c <loadMenuTexts+0x44c>)
 8003a60:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003a62:	4873      	ldr	r0, [pc, #460]	; (8003c30 <loadMenuTexts+0x450>)
 8003a64:	f7fc fcfa 	bl	800045c <copyText>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a72      	ldr	r2, [pc, #456]	; (8003c34 <loadMenuTexts+0x454>)
 8003a6c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003a6e:	4872      	ldr	r0, [pc, #456]	; (8003c38 <loadMenuTexts+0x458>)
 8003a70:	f7fc fcf4 	bl	800045c <copyText>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a71      	ldr	r2, [pc, #452]	; (8003c3c <loadMenuTexts+0x45c>)
 8003a78:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003a7a:	4871      	ldr	r0, [pc, #452]	; (8003c40 <loadMenuTexts+0x460>)
 8003a7c:	f7fc fcee 	bl	800045c <copyText>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <loadMenuTexts+0x464>)
 8003a84:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003a86:	4870      	ldr	r0, [pc, #448]	; (8003c48 <loadMenuTexts+0x468>)
 8003a88:	f7fc fce8 	bl	800045c <copyText>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	e0dd      	b.n	8003c4c <loadMenuTexts+0x46c>
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000ce0 	.word	0x20000ce0
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	20000ce4 	.word	0x20000ce4
 8003aa0:	20000020 	.word	0x20000020
 8003aa4:	20000d3c 	.word	0x20000d3c
 8003aa8:	20000030 	.word	0x20000030
 8003aac:	20000d6c 	.word	0x20000d6c
 8003ab0:	20000040 	.word	0x20000040
 8003ab4:	20000d74 	.word	0x20000d74
 8003ab8:	20000050 	.word	0x20000050
 8003abc:	20000dec 	.word	0x20000dec
 8003ac0:	20000060 	.word	0x20000060
 8003ac4:	20000df0 	.word	0x20000df0
 8003ac8:	20000070 	.word	0x20000070
 8003acc:	20000ce8 	.word	0x20000ce8
 8003ad0:	20000080 	.word	0x20000080
 8003ad4:	20000cec 	.word	0x20000cec
 8003ad8:	20000090 	.word	0x20000090
 8003adc:	20000cf0 	.word	0x20000cf0
 8003ae0:	200000a0 	.word	0x200000a0
 8003ae4:	20000cf4 	.word	0x20000cf4
 8003ae8:	200000b0 	.word	0x200000b0
 8003aec:	20000cf8 	.word	0x20000cf8
 8003af0:	200000c0 	.word	0x200000c0
 8003af4:	20000cfc 	.word	0x20000cfc
 8003af8:	200000d0 	.word	0x200000d0
 8003afc:	20000d00 	.word	0x20000d00
 8003b00:	200000e0 	.word	0x200000e0
 8003b04:	20000d04 	.word	0x20000d04
 8003b08:	200000f0 	.word	0x200000f0
 8003b0c:	20000d08 	.word	0x20000d08
 8003b10:	20000100 	.word	0x20000100
 8003b14:	20000d0c 	.word	0x20000d0c
 8003b18:	20000110 	.word	0x20000110
 8003b1c:	20000d10 	.word	0x20000d10
 8003b20:	20000120 	.word	0x20000120
 8003b24:	20000d14 	.word	0x20000d14
 8003b28:	20000130 	.word	0x20000130
 8003b2c:	20000d18 	.word	0x20000d18
 8003b30:	20000140 	.word	0x20000140
 8003b34:	20000d1c 	.word	0x20000d1c
 8003b38:	20000150 	.word	0x20000150
 8003b3c:	20000d20 	.word	0x20000d20
 8003b40:	20000160 	.word	0x20000160
 8003b44:	20000d24 	.word	0x20000d24
 8003b48:	20000170 	.word	0x20000170
 8003b4c:	20000d28 	.word	0x20000d28
 8003b50:	20000180 	.word	0x20000180
 8003b54:	20000d2c 	.word	0x20000d2c
 8003b58:	20000190 	.word	0x20000190
 8003b5c:	20000d30 	.word	0x20000d30
 8003b60:	200001a0 	.word	0x200001a0
 8003b64:	20000d34 	.word	0x20000d34
 8003b68:	200001b0 	.word	0x200001b0
 8003b6c:	20000d38 	.word	0x20000d38
 8003b70:	200001c0 	.word	0x200001c0
 8003b74:	20000d40 	.word	0x20000d40
 8003b78:	200001d0 	.word	0x200001d0
 8003b7c:	20000d44 	.word	0x20000d44
 8003b80:	200001e0 	.word	0x200001e0
 8003b84:	20000d48 	.word	0x20000d48
 8003b88:	200001f0 	.word	0x200001f0
 8003b8c:	20000d4c 	.word	0x20000d4c
 8003b90:	20000200 	.word	0x20000200
 8003b94:	20000d50 	.word	0x20000d50
 8003b98:	20000210 	.word	0x20000210
 8003b9c:	20000d54 	.word	0x20000d54
 8003ba0:	20000220 	.word	0x20000220
 8003ba4:	20000d58 	.word	0x20000d58
 8003ba8:	20000230 	.word	0x20000230
 8003bac:	20000d5c 	.word	0x20000d5c
 8003bb0:	20000240 	.word	0x20000240
 8003bb4:	20000d60 	.word	0x20000d60
 8003bb8:	20000250 	.word	0x20000250
 8003bbc:	20000d64 	.word	0x20000d64
 8003bc0:	20000260 	.word	0x20000260
 8003bc4:	20000d68 	.word	0x20000d68
 8003bc8:	20000270 	.word	0x20000270
 8003bcc:	20000d70 	.word	0x20000d70
 8003bd0:	20000280 	.word	0x20000280
 8003bd4:	20000d78 	.word	0x20000d78
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	20000d7c 	.word	0x20000d7c
 8003be0:	200002a0 	.word	0x200002a0
 8003be4:	20000d80 	.word	0x20000d80
 8003be8:	200002b0 	.word	0x200002b0
 8003bec:	20000d84 	.word	0x20000d84
 8003bf0:	200002c0 	.word	0x200002c0
 8003bf4:	20000d88 	.word	0x20000d88
 8003bf8:	200002d0 	.word	0x200002d0
 8003bfc:	20000d8c 	.word	0x20000d8c
 8003c00:	200002e0 	.word	0x200002e0
 8003c04:	20000d90 	.word	0x20000d90
 8003c08:	200002f0 	.word	0x200002f0
 8003c0c:	20000d94 	.word	0x20000d94
 8003c10:	20000300 	.word	0x20000300
 8003c14:	20000d98 	.word	0x20000d98
 8003c18:	20000310 	.word	0x20000310
 8003c1c:	20000d9c 	.word	0x20000d9c
 8003c20:	20000320 	.word	0x20000320
 8003c24:	20000da0 	.word	0x20000da0
 8003c28:	20000330 	.word	0x20000330
 8003c2c:	20000da4 	.word	0x20000da4
 8003c30:	20000340 	.word	0x20000340
 8003c34:	20000da8 	.word	0x20000da8
 8003c38:	20000350 	.word	0x20000350
 8003c3c:	20000dac 	.word	0x20000dac
 8003c40:	20000360 	.word	0x20000360
 8003c44:	20000db0 	.word	0x20000db0
 8003c48:	20000370 	.word	0x20000370
 8003c4c:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <loadMenuTexts+0x564>)
 8003c4e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003c50:	483d      	ldr	r0, [pc, #244]	; (8003d48 <loadMenuTexts+0x568>)
 8003c52:	f7fc fc03 	bl	800045c <copyText>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <loadMenuTexts+0x56c>)
 8003c5a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003c5c:	483c      	ldr	r0, [pc, #240]	; (8003d50 <loadMenuTexts+0x570>)
 8003c5e:	f7fc fbfd 	bl	800045c <copyText>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <loadMenuTexts+0x574>)
 8003c66:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003c68:	483b      	ldr	r0, [pc, #236]	; (8003d58 <loadMenuTexts+0x578>)
 8003c6a:	f7fc fbf7 	bl	800045c <copyText>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <loadMenuTexts+0x57c>)
 8003c72:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003c74:	483a      	ldr	r0, [pc, #232]	; (8003d60 <loadMenuTexts+0x580>)
 8003c76:	f7fc fbf1 	bl	800045c <copyText>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4a39      	ldr	r2, [pc, #228]	; (8003d64 <loadMenuTexts+0x584>)
 8003c7e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003c80:	4839      	ldr	r0, [pc, #228]	; (8003d68 <loadMenuTexts+0x588>)
 8003c82:	f7fc fbeb 	bl	800045c <copyText>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <loadMenuTexts+0x58c>)
 8003c8a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003c8c:	4838      	ldr	r0, [pc, #224]	; (8003d70 <loadMenuTexts+0x590>)
 8003c8e:	f7fc fbe5 	bl	800045c <copyText>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <loadMenuTexts+0x594>)
 8003c96:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003c98:	4837      	ldr	r0, [pc, #220]	; (8003d78 <loadMenuTexts+0x598>)
 8003c9a:	f7fc fbdf 	bl	800045c <copyText>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4a36      	ldr	r2, [pc, #216]	; (8003d7c <loadMenuTexts+0x59c>)
 8003ca2:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003ca4:	4836      	ldr	r0, [pc, #216]	; (8003d80 <loadMenuTexts+0x5a0>)
 8003ca6:	f7fc fbd9 	bl	800045c <copyText>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <loadMenuTexts+0x5a4>)
 8003cae:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003cb0:	4835      	ldr	r0, [pc, #212]	; (8003d88 <loadMenuTexts+0x5a8>)
 8003cb2:	f7fc fbd3 	bl	800045c <copyText>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a34      	ldr	r2, [pc, #208]	; (8003d8c <loadMenuTexts+0x5ac>)
 8003cba:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003cbc:	4834      	ldr	r0, [pc, #208]	; (8003d90 <loadMenuTexts+0x5b0>)
 8003cbe:	f7fc fbcd 	bl	800045c <copyText>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <loadMenuTexts+0x5b4>)
 8003cc6:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003cc8:	4833      	ldr	r0, [pc, #204]	; (8003d98 <loadMenuTexts+0x5b8>)
 8003cca:	f7fc fbc7 	bl	800045c <copyText>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <loadMenuTexts+0x5bc>)
 8003cd2:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <loadMenuTexts+0x5c0>)
 8003cd6:	f7fc fbc1 	bl	800045c <copyText>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <loadMenuTexts+0x5c4>)
 8003cde:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003ce0:	4831      	ldr	r0, [pc, #196]	; (8003da8 <loadMenuTexts+0x5c8>)
 8003ce2:	f7fc fbbb 	bl	800045c <copyText>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a30      	ldr	r2, [pc, #192]	; (8003dac <loadMenuTexts+0x5cc>)
 8003cea:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003cec:	4830      	ldr	r0, [pc, #192]	; (8003db0 <loadMenuTexts+0x5d0>)
 8003cee:	f7fc fbb5 	bl	800045c <copyText>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <loadMenuTexts+0x5d4>)
 8003cf6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003cf8:	482f      	ldr	r0, [pc, #188]	; (8003db8 <loadMenuTexts+0x5d8>)
 8003cfa:	f7fc fbaf 	bl	800045c <copyText>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a2e      	ldr	r2, [pc, #184]	; (8003dbc <loadMenuTexts+0x5dc>)
 8003d02:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003d04:	482e      	ldr	r0, [pc, #184]	; (8003dc0 <loadMenuTexts+0x5e0>)
 8003d06:	f7fc fba9 	bl	800045c <copyText>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <loadMenuTexts+0x5e4>)
 8003d0e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003d10:	482d      	ldr	r0, [pc, #180]	; (8003dc8 <loadMenuTexts+0x5e8>)
 8003d12:	f7fc fba3 	bl	800045c <copyText>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <loadMenuTexts+0x5ec>)
 8003d1a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003d1c:	482c      	ldr	r0, [pc, #176]	; (8003dd0 <loadMenuTexts+0x5f0>)
 8003d1e:	f7fc fb9d 	bl	800045c <copyText>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <loadMenuTexts+0x5f4>)
 8003d26:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003d28:	482b      	ldr	r0, [pc, #172]	; (8003dd8 <loadMenuTexts+0x5f8>)
 8003d2a:	f7fc fb97 	bl	800045c <copyText>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <loadMenuTexts+0x5fc>)
 8003d32:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003d34:	482a      	ldr	r0, [pc, #168]	; (8003de0 <loadMenuTexts+0x600>)
 8003d36:	f7fc fb91 	bl	800045c <copyText>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <loadMenuTexts+0x604>)
 8003d3e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003d40:	e2d3      	b.n	80042ea <loadMenuTexts+0xb0a>
 8003d42:	bf00      	nop
 8003d44:	20000db4 	.word	0x20000db4
 8003d48:	20000380 	.word	0x20000380
 8003d4c:	20000db8 	.word	0x20000db8
 8003d50:	20000390 	.word	0x20000390
 8003d54:	20000dbc 	.word	0x20000dbc
 8003d58:	200003a0 	.word	0x200003a0
 8003d5c:	20000dc0 	.word	0x20000dc0
 8003d60:	200003b0 	.word	0x200003b0
 8003d64:	20000dc4 	.word	0x20000dc4
 8003d68:	200003c0 	.word	0x200003c0
 8003d6c:	20000dc8 	.word	0x20000dc8
 8003d70:	200003d0 	.word	0x200003d0
 8003d74:	20000dcc 	.word	0x20000dcc
 8003d78:	200003e0 	.word	0x200003e0
 8003d7c:	20000dd0 	.word	0x20000dd0
 8003d80:	200003f0 	.word	0x200003f0
 8003d84:	20000dd4 	.word	0x20000dd4
 8003d88:	20000400 	.word	0x20000400
 8003d8c:	20000dd8 	.word	0x20000dd8
 8003d90:	20000410 	.word	0x20000410
 8003d94:	20000ddc 	.word	0x20000ddc
 8003d98:	20000420 	.word	0x20000420
 8003d9c:	20000de0 	.word	0x20000de0
 8003da0:	20000430 	.word	0x20000430
 8003da4:	20000de4 	.word	0x20000de4
 8003da8:	20000440 	.word	0x20000440
 8003dac:	20000de8 	.word	0x20000de8
 8003db0:	20000450 	.word	0x20000450
 8003db4:	20000df4 	.word	0x20000df4
 8003db8:	20000460 	.word	0x20000460
 8003dbc:	20000df8 	.word	0x20000df8
 8003dc0:	20000470 	.word	0x20000470
 8003dc4:	20000dfc 	.word	0x20000dfc
 8003dc8:	20000480 	.word	0x20000480
 8003dcc:	20000e00 	.word	0x20000e00
 8003dd0:	20000490 	.word	0x20000490
 8003dd4:	20000e04 	.word	0x20000e04
 8003dd8:	200004a0 	.word	0x200004a0
 8003ddc:	20000e08 	.word	0x20000e08
 8003de0:	200004b0 	.word	0x200004b0
 8003de4:	20000e0c 	.word	0x20000e0c
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003de8:	48a9      	ldr	r0, [pc, #676]	; (8004090 <loadMenuTexts+0x8b0>)
 8003dea:	f7fc fb37 	bl	800045c <copyText>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4aa8      	ldr	r2, [pc, #672]	; (8004094 <loadMenuTexts+0x8b4>)
 8003df2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003df4:	48a8      	ldr	r0, [pc, #672]	; (8004098 <loadMenuTexts+0x8b8>)
 8003df6:	f7fc fb31 	bl	800045c <copyText>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4aa7      	ldr	r2, [pc, #668]	; (800409c <loadMenuTexts+0x8bc>)
 8003dfe:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003e00:	48a7      	ldr	r0, [pc, #668]	; (80040a0 <loadMenuTexts+0x8c0>)
 8003e02:	f7fc fb2b 	bl	800045c <copyText>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4aa6      	ldr	r2, [pc, #664]	; (80040a4 <loadMenuTexts+0x8c4>)
 8003e0a:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003e0c:	48a6      	ldr	r0, [pc, #664]	; (80040a8 <loadMenuTexts+0x8c8>)
 8003e0e:	f7fc fb25 	bl	800045c <copyText>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4aa5      	ldr	r2, [pc, #660]	; (80040ac <loadMenuTexts+0x8cc>)
 8003e16:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003e18:	48a5      	ldr	r0, [pc, #660]	; (80040b0 <loadMenuTexts+0x8d0>)
 8003e1a:	f7fc fb1f 	bl	800045c <copyText>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4aa4      	ldr	r2, [pc, #656]	; (80040b4 <loadMenuTexts+0x8d4>)
 8003e22:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003e24:	48a4      	ldr	r0, [pc, #656]	; (80040b8 <loadMenuTexts+0x8d8>)
 8003e26:	f7fc fb19 	bl	800045c <copyText>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4aa3      	ldr	r2, [pc, #652]	; (80040bc <loadMenuTexts+0x8dc>)
 8003e2e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003e30:	48a3      	ldr	r0, [pc, #652]	; (80040c0 <loadMenuTexts+0x8e0>)
 8003e32:	f7fc fb13 	bl	800045c <copyText>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4aa2      	ldr	r2, [pc, #648]	; (80040c4 <loadMenuTexts+0x8e4>)
 8003e3a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003e3c:	48a2      	ldr	r0, [pc, #648]	; (80040c8 <loadMenuTexts+0x8e8>)
 8003e3e:	f7fc fb0d 	bl	800045c <copyText>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4aa1      	ldr	r2, [pc, #644]	; (80040cc <loadMenuTexts+0x8ec>)
 8003e46:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003e48:	48a1      	ldr	r0, [pc, #644]	; (80040d0 <loadMenuTexts+0x8f0>)
 8003e4a:	f7fc fb07 	bl	800045c <copyText>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4aa0      	ldr	r2, [pc, #640]	; (80040d4 <loadMenuTexts+0x8f4>)
 8003e52:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003e54:	48a0      	ldr	r0, [pc, #640]	; (80040d8 <loadMenuTexts+0x8f8>)
 8003e56:	f7fc fb01 	bl	800045c <copyText>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a9f      	ldr	r2, [pc, #636]	; (80040dc <loadMenuTexts+0x8fc>)
 8003e5e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003e60:	489f      	ldr	r0, [pc, #636]	; (80040e0 <loadMenuTexts+0x900>)
 8003e62:	f7fc fafb 	bl	800045c <copyText>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4a9e      	ldr	r2, [pc, #632]	; (80040e4 <loadMenuTexts+0x904>)
 8003e6a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003e6c:	489e      	ldr	r0, [pc, #632]	; (80040e8 <loadMenuTexts+0x908>)
 8003e6e:	f7fc faf5 	bl	800045c <copyText>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4a9d      	ldr	r2, [pc, #628]	; (80040ec <loadMenuTexts+0x90c>)
 8003e76:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003e78:	489d      	ldr	r0, [pc, #628]	; (80040f0 <loadMenuTexts+0x910>)
 8003e7a:	f7fc faef 	bl	800045c <copyText>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4a9c      	ldr	r2, [pc, #624]	; (80040f4 <loadMenuTexts+0x914>)
 8003e82:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003e84:	489c      	ldr	r0, [pc, #624]	; (80040f8 <loadMenuTexts+0x918>)
 8003e86:	f7fc fae9 	bl	800045c <copyText>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4a9b      	ldr	r2, [pc, #620]	; (80040fc <loadMenuTexts+0x91c>)
 8003e8e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003e90:	489b      	ldr	r0, [pc, #620]	; (8004100 <loadMenuTexts+0x920>)
 8003e92:	f7fc fae3 	bl	800045c <copyText>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4a9a      	ldr	r2, [pc, #616]	; (8004104 <loadMenuTexts+0x924>)
 8003e9a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003e9c:	489a      	ldr	r0, [pc, #616]	; (8004108 <loadMenuTexts+0x928>)
 8003e9e:	f7fc fadd 	bl	800045c <copyText>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4a99      	ldr	r2, [pc, #612]	; (800410c <loadMenuTexts+0x92c>)
 8003ea6:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003ea8:	4899      	ldr	r0, [pc, #612]	; (8004110 <loadMenuTexts+0x930>)
 8003eaa:	f7fc fad7 	bl	800045c <copyText>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4a98      	ldr	r2, [pc, #608]	; (8004114 <loadMenuTexts+0x934>)
 8003eb2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003eb4:	4898      	ldr	r0, [pc, #608]	; (8004118 <loadMenuTexts+0x938>)
 8003eb6:	f7fc fad1 	bl	800045c <copyText>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4a97      	ldr	r2, [pc, #604]	; (800411c <loadMenuTexts+0x93c>)
 8003ebe:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003ec0:	4897      	ldr	r0, [pc, #604]	; (8004120 <loadMenuTexts+0x940>)
 8003ec2:	f7fc facb 	bl	800045c <copyText>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a96      	ldr	r2, [pc, #600]	; (8004124 <loadMenuTexts+0x944>)
 8003eca:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003ecc:	4896      	ldr	r0, [pc, #600]	; (8004128 <loadMenuTexts+0x948>)
 8003ece:	f7fc fac5 	bl	800045c <copyText>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4a95      	ldr	r2, [pc, #596]	; (800412c <loadMenuTexts+0x94c>)
 8003ed6:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003ed8:	4895      	ldr	r0, [pc, #596]	; (8004130 <loadMenuTexts+0x950>)
 8003eda:	f7fc fabf 	bl	800045c <copyText>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a94      	ldr	r2, [pc, #592]	; (8004134 <loadMenuTexts+0x954>)
 8003ee2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003ee4:	4894      	ldr	r0, [pc, #592]	; (8004138 <loadMenuTexts+0x958>)
 8003ee6:	f7fc fab9 	bl	800045c <copyText>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4a93      	ldr	r2, [pc, #588]	; (800413c <loadMenuTexts+0x95c>)
 8003eee:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003ef0:	4893      	ldr	r0, [pc, #588]	; (8004140 <loadMenuTexts+0x960>)
 8003ef2:	f7fc fab3 	bl	800045c <copyText>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4a92      	ldr	r2, [pc, #584]	; (8004144 <loadMenuTexts+0x964>)
 8003efa:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003efc:	4892      	ldr	r0, [pc, #584]	; (8004148 <loadMenuTexts+0x968>)
 8003efe:	f7fc faad 	bl	800045c <copyText>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4a91      	ldr	r2, [pc, #580]	; (800414c <loadMenuTexts+0x96c>)
 8003f06:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003f08:	4891      	ldr	r0, [pc, #580]	; (8004150 <loadMenuTexts+0x970>)
 8003f0a:	f7fc faa7 	bl	800045c <copyText>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a90      	ldr	r2, [pc, #576]	; (8004154 <loadMenuTexts+0x974>)
 8003f12:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8003f14:	4890      	ldr	r0, [pc, #576]	; (8004158 <loadMenuTexts+0x978>)
 8003f16:	f7fc faa1 	bl	800045c <copyText>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a8f      	ldr	r2, [pc, #572]	; (800415c <loadMenuTexts+0x97c>)
 8003f1e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8003f20:	488f      	ldr	r0, [pc, #572]	; (8004160 <loadMenuTexts+0x980>)
 8003f22:	f7fc fa9b 	bl	800045c <copyText>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <loadMenuTexts+0x984>)
 8003f2a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8003f2c:	488e      	ldr	r0, [pc, #568]	; (8004168 <loadMenuTexts+0x988>)
 8003f2e:	f7fc fa95 	bl	800045c <copyText>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a8d      	ldr	r2, [pc, #564]	; (800416c <loadMenuTexts+0x98c>)
 8003f36:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8003f38:	488d      	ldr	r0, [pc, #564]	; (8004170 <loadMenuTexts+0x990>)
 8003f3a:	f7fc fa8f 	bl	800045c <copyText>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a8c      	ldr	r2, [pc, #560]	; (8004174 <loadMenuTexts+0x994>)
 8003f42:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8003f44:	488c      	ldr	r0, [pc, #560]	; (8004178 <loadMenuTexts+0x998>)
 8003f46:	f7fc fa89 	bl	800045c <copyText>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a8b      	ldr	r2, [pc, #556]	; (800417c <loadMenuTexts+0x99c>)
 8003f4e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8003f50:	488b      	ldr	r0, [pc, #556]	; (8004180 <loadMenuTexts+0x9a0>)
 8003f52:	f7fc fa83 	bl	800045c <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a8a      	ldr	r2, [pc, #552]	; (8004184 <loadMenuTexts+0x9a4>)
 8003f5a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8003f5c:	488a      	ldr	r0, [pc, #552]	; (8004188 <loadMenuTexts+0x9a8>)
 8003f5e:	f7fc fa7d 	bl	800045c <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a89      	ldr	r2, [pc, #548]	; (800418c <loadMenuTexts+0x9ac>)
 8003f66:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8003f68:	4889      	ldr	r0, [pc, #548]	; (8004190 <loadMenuTexts+0x9b0>)
 8003f6a:	f7fc fa77 	bl	800045c <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a88      	ldr	r2, [pc, #544]	; (8004194 <loadMenuTexts+0x9b4>)
 8003f72:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8003f74:	4888      	ldr	r0, [pc, #544]	; (8004198 <loadMenuTexts+0x9b8>)
 8003f76:	f7fc fa71 	bl	800045c <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a87      	ldr	r2, [pc, #540]	; (800419c <loadMenuTexts+0x9bc>)
 8003f7e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8003f80:	4887      	ldr	r0, [pc, #540]	; (80041a0 <loadMenuTexts+0x9c0>)
 8003f82:	f7fc fa6b 	bl	800045c <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a86      	ldr	r2, [pc, #536]	; (80041a4 <loadMenuTexts+0x9c4>)
 8003f8a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8003f8c:	4886      	ldr	r0, [pc, #536]	; (80041a8 <loadMenuTexts+0x9c8>)
 8003f8e:	f7fc fa65 	bl	800045c <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a85      	ldr	r2, [pc, #532]	; (80041ac <loadMenuTexts+0x9cc>)
 8003f96:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8003f98:	4885      	ldr	r0, [pc, #532]	; (80041b0 <loadMenuTexts+0x9d0>)
 8003f9a:	f7fc fa5f 	bl	800045c <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a84      	ldr	r2, [pc, #528]	; (80041b4 <loadMenuTexts+0x9d4>)
 8003fa2:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8003fa4:	4884      	ldr	r0, [pc, #528]	; (80041b8 <loadMenuTexts+0x9d8>)
 8003fa6:	f7fc fa59 	bl	800045c <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a83      	ldr	r2, [pc, #524]	; (80041bc <loadMenuTexts+0x9dc>)
 8003fae:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8003fb0:	4883      	ldr	r0, [pc, #524]	; (80041c0 <loadMenuTexts+0x9e0>)
 8003fb2:	f7fc fa53 	bl	800045c <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a82      	ldr	r2, [pc, #520]	; (80041c4 <loadMenuTexts+0x9e4>)
 8003fba:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8003fbc:	4882      	ldr	r0, [pc, #520]	; (80041c8 <loadMenuTexts+0x9e8>)
 8003fbe:	f7fc fa4d 	bl	800045c <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a81      	ldr	r2, [pc, #516]	; (80041cc <loadMenuTexts+0x9ec>)
 8003fc6:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8003fc8:	4881      	ldr	r0, [pc, #516]	; (80041d0 <loadMenuTexts+0x9f0>)
 8003fca:	f7fc fa47 	bl	800045c <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a80      	ldr	r2, [pc, #512]	; (80041d4 <loadMenuTexts+0x9f4>)
 8003fd2:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8003fd4:	4880      	ldr	r0, [pc, #512]	; (80041d8 <loadMenuTexts+0x9f8>)
 8003fd6:	f7fc fa41 	bl	800045c <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	; (80041dc <loadMenuTexts+0x9fc>)
 8003fde:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8003fe0:	487f      	ldr	r0, [pc, #508]	; (80041e0 <loadMenuTexts+0xa00>)
 8003fe2:	f7fc fa3b 	bl	800045c <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a7e      	ldr	r2, [pc, #504]	; (80041e4 <loadMenuTexts+0xa04>)
 8003fea:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8003fec:	487e      	ldr	r0, [pc, #504]	; (80041e8 <loadMenuTexts+0xa08>)
 8003fee:	f7fc fa35 	bl	800045c <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a7d      	ldr	r2, [pc, #500]	; (80041ec <loadMenuTexts+0xa0c>)
 8003ff6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8003ff8:	487d      	ldr	r0, [pc, #500]	; (80041f0 <loadMenuTexts+0xa10>)
 8003ffa:	f7fc fa2f 	bl	800045c <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <loadMenuTexts+0xa14>)
 8004002:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8004004:	487c      	ldr	r0, [pc, #496]	; (80041f8 <loadMenuTexts+0xa18>)
 8004006:	f7fc fa29 	bl	800045c <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a7b      	ldr	r2, [pc, #492]	; (80041fc <loadMenuTexts+0xa1c>)
 800400e:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004010:	487b      	ldr	r0, [pc, #492]	; (8004200 <loadMenuTexts+0xa20>)
 8004012:	f7fc fa23 	bl	800045c <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <loadMenuTexts+0xa24>)
 800401a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800401c:	487a      	ldr	r0, [pc, #488]	; (8004208 <loadMenuTexts+0xa28>)
 800401e:	f7fc fa1d 	bl	800045c <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a79      	ldr	r2, [pc, #484]	; (800420c <loadMenuTexts+0xa2c>)
 8004026:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004028:	4879      	ldr	r0, [pc, #484]	; (8004210 <loadMenuTexts+0xa30>)
 800402a:	f7fc fa17 	bl	800045c <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a78      	ldr	r2, [pc, #480]	; (8004214 <loadMenuTexts+0xa34>)
 8004032:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004034:	4878      	ldr	r0, [pc, #480]	; (8004218 <loadMenuTexts+0xa38>)
 8004036:	f7fc fa11 	bl	800045c <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <loadMenuTexts+0xa3c>)
 800403e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004040:	4877      	ldr	r0, [pc, #476]	; (8004220 <loadMenuTexts+0xa40>)
 8004042:	f7fc fa0b 	bl	800045c <copyText>
 8004046:	4603      	mov	r3, r0
 8004048:	4a76      	ldr	r2, [pc, #472]	; (8004224 <loadMenuTexts+0xa44>)
 800404a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800404c:	4876      	ldr	r0, [pc, #472]	; (8004228 <loadMenuTexts+0xa48>)
 800404e:	f7fc fa05 	bl	800045c <copyText>
 8004052:	4603      	mov	r3, r0
 8004054:	4a75      	ldr	r2, [pc, #468]	; (800422c <loadMenuTexts+0xa4c>)
 8004056:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004058:	4875      	ldr	r0, [pc, #468]	; (8004230 <loadMenuTexts+0xa50>)
 800405a:	f7fc f9ff 	bl	800045c <copyText>
 800405e:	4603      	mov	r3, r0
 8004060:	4a74      	ldr	r2, [pc, #464]	; (8004234 <loadMenuTexts+0xa54>)
 8004062:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004064:	4874      	ldr	r0, [pc, #464]	; (8004238 <loadMenuTexts+0xa58>)
 8004066:	f7fc f9f9 	bl	800045c <copyText>
 800406a:	4603      	mov	r3, r0
 800406c:	4a73      	ldr	r2, [pc, #460]	; (800423c <loadMenuTexts+0xa5c>)
 800406e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004070:	4873      	ldr	r0, [pc, #460]	; (8004240 <loadMenuTexts+0xa60>)
 8004072:	f7fc f9f3 	bl	800045c <copyText>
 8004076:	4603      	mov	r3, r0
 8004078:	4a72      	ldr	r2, [pc, #456]	; (8004244 <loadMenuTexts+0xa64>)
 800407a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800407c:	4872      	ldr	r0, [pc, #456]	; (8004248 <loadMenuTexts+0xa68>)
 800407e:	f7fc f9ed 	bl	800045c <copyText>
 8004082:	4603      	mov	r3, r0
 8004084:	4a71      	ldr	r2, [pc, #452]	; (800424c <loadMenuTexts+0xa6c>)
 8004086:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004088:	4871      	ldr	r0, [pc, #452]	; (8004250 <loadMenuTexts+0xa70>)
 800408a:	f7fc f9e7 	bl	800045c <copyText>
 800408e:	e0e1      	b.n	8004254 <loadMenuTexts+0xa74>
 8004090:	200004c0 	.word	0x200004c0
 8004094:	20000ce8 	.word	0x20000ce8
 8004098:	200004d0 	.word	0x200004d0
 800409c:	20000cec 	.word	0x20000cec
 80040a0:	200004e0 	.word	0x200004e0
 80040a4:	20000cf0 	.word	0x20000cf0
 80040a8:	200004f0 	.word	0x200004f0
 80040ac:	20000cf4 	.word	0x20000cf4
 80040b0:	20000500 	.word	0x20000500
 80040b4:	20000cf8 	.word	0x20000cf8
 80040b8:	20000510 	.word	0x20000510
 80040bc:	20000cfc 	.word	0x20000cfc
 80040c0:	20000520 	.word	0x20000520
 80040c4:	20000d00 	.word	0x20000d00
 80040c8:	20000530 	.word	0x20000530
 80040cc:	20000d04 	.word	0x20000d04
 80040d0:	20000540 	.word	0x20000540
 80040d4:	20000d08 	.word	0x20000d08
 80040d8:	20000550 	.word	0x20000550
 80040dc:	20000d0c 	.word	0x20000d0c
 80040e0:	20000560 	.word	0x20000560
 80040e4:	20000d10 	.word	0x20000d10
 80040e8:	20000570 	.word	0x20000570
 80040ec:	20000d14 	.word	0x20000d14
 80040f0:	20000580 	.word	0x20000580
 80040f4:	20000d18 	.word	0x20000d18
 80040f8:	20000590 	.word	0x20000590
 80040fc:	20000d1c 	.word	0x20000d1c
 8004100:	200005a0 	.word	0x200005a0
 8004104:	20000d20 	.word	0x20000d20
 8004108:	200005b0 	.word	0x200005b0
 800410c:	20000d24 	.word	0x20000d24
 8004110:	200005c0 	.word	0x200005c0
 8004114:	20000d28 	.word	0x20000d28
 8004118:	200005d0 	.word	0x200005d0
 800411c:	20000d2c 	.word	0x20000d2c
 8004120:	200005e0 	.word	0x200005e0
 8004124:	20000d30 	.word	0x20000d30
 8004128:	200005f0 	.word	0x200005f0
 800412c:	20000d34 	.word	0x20000d34
 8004130:	20000600 	.word	0x20000600
 8004134:	20000d38 	.word	0x20000d38
 8004138:	20000610 	.word	0x20000610
 800413c:	20000d40 	.word	0x20000d40
 8004140:	20000620 	.word	0x20000620
 8004144:	20000d44 	.word	0x20000d44
 8004148:	20000630 	.word	0x20000630
 800414c:	20000d48 	.word	0x20000d48
 8004150:	20000640 	.word	0x20000640
 8004154:	20000d4c 	.word	0x20000d4c
 8004158:	20000650 	.word	0x20000650
 800415c:	20000d50 	.word	0x20000d50
 8004160:	20000660 	.word	0x20000660
 8004164:	20000d54 	.word	0x20000d54
 8004168:	20000670 	.word	0x20000670
 800416c:	20000d58 	.word	0x20000d58
 8004170:	20000680 	.word	0x20000680
 8004174:	20000d5c 	.word	0x20000d5c
 8004178:	20000690 	.word	0x20000690
 800417c:	20000d60 	.word	0x20000d60
 8004180:	200006a0 	.word	0x200006a0
 8004184:	20000d64 	.word	0x20000d64
 8004188:	200006b0 	.word	0x200006b0
 800418c:	20000d68 	.word	0x20000d68
 8004190:	200006c0 	.word	0x200006c0
 8004194:	20000d70 	.word	0x20000d70
 8004198:	200006d0 	.word	0x200006d0
 800419c:	20000d78 	.word	0x20000d78
 80041a0:	200006e0 	.word	0x200006e0
 80041a4:	20000d7c 	.word	0x20000d7c
 80041a8:	200006f0 	.word	0x200006f0
 80041ac:	20000d80 	.word	0x20000d80
 80041b0:	20000700 	.word	0x20000700
 80041b4:	20000d84 	.word	0x20000d84
 80041b8:	20000710 	.word	0x20000710
 80041bc:	20000d88 	.word	0x20000d88
 80041c0:	20000720 	.word	0x20000720
 80041c4:	20000d8c 	.word	0x20000d8c
 80041c8:	20000730 	.word	0x20000730
 80041cc:	20000d90 	.word	0x20000d90
 80041d0:	20000740 	.word	0x20000740
 80041d4:	20000d94 	.word	0x20000d94
 80041d8:	20000750 	.word	0x20000750
 80041dc:	20000d98 	.word	0x20000d98
 80041e0:	20000760 	.word	0x20000760
 80041e4:	20000d9c 	.word	0x20000d9c
 80041e8:	20000770 	.word	0x20000770
 80041ec:	20000da0 	.word	0x20000da0
 80041f0:	20000780 	.word	0x20000780
 80041f4:	20000da4 	.word	0x20000da4
 80041f8:	20000790 	.word	0x20000790
 80041fc:	20000da8 	.word	0x20000da8
 8004200:	200007a0 	.word	0x200007a0
 8004204:	20000dac 	.word	0x20000dac
 8004208:	200007b0 	.word	0x200007b0
 800420c:	20000db0 	.word	0x20000db0
 8004210:	200007c0 	.word	0x200007c0
 8004214:	20000db4 	.word	0x20000db4
 8004218:	200007d0 	.word	0x200007d0
 800421c:	20000db8 	.word	0x20000db8
 8004220:	200007e0 	.word	0x200007e0
 8004224:	20000dbc 	.word	0x20000dbc
 8004228:	200007f0 	.word	0x200007f0
 800422c:	20000dc0 	.word	0x20000dc0
 8004230:	20000800 	.word	0x20000800
 8004234:	20000dc4 	.word	0x20000dc4
 8004238:	20000810 	.word	0x20000810
 800423c:	20000dc8 	.word	0x20000dc8
 8004240:	20000820 	.word	0x20000820
 8004244:	20000dcc 	.word	0x20000dcc
 8004248:	20000830 	.word	0x20000830
 800424c:	20000dd0 	.word	0x20000dd0
 8004250:	20000840 	.word	0x20000840
 8004254:	4603      	mov	r3, r0
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <loadMenuTexts+0xb14>)
 8004258:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800425a:	4827      	ldr	r0, [pc, #156]	; (80042f8 <loadMenuTexts+0xb18>)
 800425c:	f7fc f8fe 	bl	800045c <copyText>
 8004260:	4603      	mov	r3, r0
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <loadMenuTexts+0xb1c>)
 8004264:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004266:	4826      	ldr	r0, [pc, #152]	; (8004300 <loadMenuTexts+0xb20>)
 8004268:	f7fc f8f8 	bl	800045c <copyText>
 800426c:	4603      	mov	r3, r0
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <loadMenuTexts+0xb24>)
 8004270:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004272:	4825      	ldr	r0, [pc, #148]	; (8004308 <loadMenuTexts+0xb28>)
 8004274:	f7fc f8f2 	bl	800045c <copyText>
 8004278:	4603      	mov	r3, r0
 800427a:	4a24      	ldr	r2, [pc, #144]	; (800430c <loadMenuTexts+0xb2c>)
 800427c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800427e:	4824      	ldr	r0, [pc, #144]	; (8004310 <loadMenuTexts+0xb30>)
 8004280:	f7fc f8ec 	bl	800045c <copyText>
 8004284:	4603      	mov	r3, r0
 8004286:	4a23      	ldr	r2, [pc, #140]	; (8004314 <loadMenuTexts+0xb34>)
 8004288:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800428a:	4823      	ldr	r0, [pc, #140]	; (8004318 <loadMenuTexts+0xb38>)
 800428c:	f7fc f8e6 	bl	800045c <copyText>
 8004290:	4603      	mov	r3, r0
 8004292:	4a22      	ldr	r2, [pc, #136]	; (800431c <loadMenuTexts+0xb3c>)
 8004294:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004296:	4822      	ldr	r0, [pc, #136]	; (8004320 <loadMenuTexts+0xb40>)
 8004298:	f7fc f8e0 	bl	800045c <copyText>
 800429c:	4603      	mov	r3, r0
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <loadMenuTexts+0xb44>)
 80042a0:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80042a2:	4821      	ldr	r0, [pc, #132]	; (8004328 <loadMenuTexts+0xb48>)
 80042a4:	f7fc f8da 	bl	800045c <copyText>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a20      	ldr	r2, [pc, #128]	; (800432c <loadMenuTexts+0xb4c>)
 80042ac:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80042ae:	4820      	ldr	r0, [pc, #128]	; (8004330 <loadMenuTexts+0xb50>)
 80042b0:	f7fc f8d4 	bl	800045c <copyText>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <loadMenuTexts+0xb54>)
 80042b8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80042ba:	481f      	ldr	r0, [pc, #124]	; (8004338 <loadMenuTexts+0xb58>)
 80042bc:	f7fc f8ce 	bl	800045c <copyText>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <loadMenuTexts+0xb5c>)
 80042c4:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80042c6:	481e      	ldr	r0, [pc, #120]	; (8004340 <loadMenuTexts+0xb60>)
 80042c8:	f7fc f8c8 	bl	800045c <copyText>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <loadMenuTexts+0xb64>)
 80042d0:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80042d2:	481d      	ldr	r0, [pc, #116]	; (8004348 <loadMenuTexts+0xb68>)
 80042d4:	f7fc f8c2 	bl	800045c <copyText>
 80042d8:	4603      	mov	r3, r0
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <loadMenuTexts+0xb6c>)
 80042dc:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80042de:	481c      	ldr	r0, [pc, #112]	; (8004350 <loadMenuTexts+0xb70>)
 80042e0:	f7fc f8bc 	bl	800045c <copyText>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <loadMenuTexts+0xb74>)
 80042e8:	6013      	str	r3, [r2, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000dd4 	.word	0x20000dd4
 80042f8:	20000850 	.word	0x20000850
 80042fc:	20000dd8 	.word	0x20000dd8
 8004300:	20000860 	.word	0x20000860
 8004304:	20000ddc 	.word	0x20000ddc
 8004308:	20000870 	.word	0x20000870
 800430c:	20000de0 	.word	0x20000de0
 8004310:	20000880 	.word	0x20000880
 8004314:	20000de4 	.word	0x20000de4
 8004318:	20000890 	.word	0x20000890
 800431c:	20000de8 	.word	0x20000de8
 8004320:	200008a0 	.word	0x200008a0
 8004324:	20000df4 	.word	0x20000df4
 8004328:	200008b0 	.word	0x200008b0
 800432c:	20000df8 	.word	0x20000df8
 8004330:	200008c0 	.word	0x200008c0
 8004334:	20000dfc 	.word	0x20000dfc
 8004338:	200008d0 	.word	0x200008d0
 800433c:	20000e00 	.word	0x20000e00
 8004340:	200008e0 	.word	0x200008e0
 8004344:	20000e04 	.word	0x20000e04
 8004348:	200008f0 	.word	0x200008f0
 800434c:	20000e08 	.word	0x20000e08
 8004350:	20000900 	.word	0x20000900
 8004354:	20000e0c 	.word	0x20000e0c

08004358 <bekle>:
void hataKoduLcdGoster(uint8_t);
void eepromKontrol(void);
void hata2EEPROM(uint8_t);
void eepromDataFillWithEmpty(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	timer1=millis;
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <bekle+0x124>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a47      	ldr	r2, [pc, #284]	; (8004480 <bekle+0x128>)
 8004362:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004364:	e002      	b.n	800436c <bekle+0x14>
    	butonKontrol = 1;
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <bekle+0x12c>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800436c:	2101      	movs	r1, #1
 800436e:	4846      	ldr	r0, [pc, #280]	; (8004488 <bekle+0x130>)
 8004370:	f003 ff02 	bl	8008178 <HAL_GPIO_ReadPin>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d109      	bne.n	800438e <bekle+0x36>
 800437a:	4b40      	ldr	r3, [pc, #256]	; (800447c <bekle+0x124>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b40      	ldr	r3, [pc, #256]	; (8004480 <bekle+0x128>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d0ef      	beq.n	8004366 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004386:	e002      	b.n	800438e <bekle+0x36>
    	butonKontrol = 1;
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <bekle+0x12c>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800438e:	2108      	movs	r1, #8
 8004390:	483e      	ldr	r0, [pc, #248]	; (800448c <bekle+0x134>)
 8004392:	f003 fef1 	bl	8008178 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d109      	bne.n	80043b0 <bekle+0x58>
 800439c:	4b37      	ldr	r3, [pc, #220]	; (800447c <bekle+0x124>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b37      	ldr	r3, [pc, #220]	; (8004480 <bekle+0x128>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0ef      	beq.n	8004388 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043a8:	e002      	b.n	80043b0 <bekle+0x58>
    	butonKontrol = 1;
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <bekle+0x12c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043b0:	2102      	movs	r1, #2
 80043b2:	4835      	ldr	r0, [pc, #212]	; (8004488 <bekle+0x130>)
 80043b4:	f003 fee0 	bl	8008178 <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d109      	bne.n	80043d2 <bekle+0x7a>
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <bekle+0x124>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <bekle+0x128>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d0ef      	beq.n	80043aa <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043ca:	e002      	b.n	80043d2 <bekle+0x7a>
    	butonKontrol = 1;
 80043cc:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <bekle+0x12c>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043d2:	2104      	movs	r1, #4
 80043d4:	482c      	ldr	r0, [pc, #176]	; (8004488 <bekle+0x130>)
 80043d6:	f003 fecf 	bl	8008178 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d109      	bne.n	80043f4 <bekle+0x9c>
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <bekle+0x124>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b26      	ldr	r3, [pc, #152]	; (8004480 <bekle+0x128>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0ef      	beq.n	80043cc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043ec:	e002      	b.n	80043f4 <bekle+0x9c>
    	butonKontrol = 1;
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <bekle+0x12c>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80043f4:	2108      	movs	r1, #8
 80043f6:	4824      	ldr	r0, [pc, #144]	; (8004488 <bekle+0x130>)
 80043f8:	f003 febe 	bl	8008178 <HAL_GPIO_ReadPin>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d109      	bne.n	8004416 <bekle+0xbe>
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <bekle+0x124>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <bekle+0x128>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d0ef      	beq.n	80043ee <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800440e:	e002      	b.n	8004416 <bekle+0xbe>
    	butonKontrol = 1;
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <bekle+0x12c>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	481c      	ldr	r0, [pc, #112]	; (800448c <bekle+0x134>)
 800441a:	f003 fead 	bl	8008178 <HAL_GPIO_ReadPin>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <bekle+0xe0>
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <bekle+0x124>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <bekle+0x128>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d0ef      	beq.n	8004410 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004430:	e002      	b.n	8004438 <bekle+0xe0>
    	butonKontrol = 1;
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <bekle+0x12c>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443c:	4813      	ldr	r0, [pc, #76]	; (800448c <bekle+0x134>)
 800443e:	f003 fe9b 	bl	8008178 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <bekle+0x104>
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <bekle+0x124>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <bekle+0x128>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d0ee      	beq.n	8004432 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004454:	e002      	b.n	800445c <bekle+0x104>
    	butonKontrol = 1;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <bekle+0x12c>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800445c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <bekle+0x134>)
 8004462:	f003 fe89 	bl	8008178 <HAL_GPIO_ReadPin>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <bekle+0x120>
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <bekle+0x124>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <bekle+0x128>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0ee      	beq.n	8004456 <bekle+0xfe>
    }

}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000c5c 	.word	0x20000c5c
 8004480:	20000c64 	.word	0x20000c64
 8004484:	20000caa 	.word	0x20000caa
 8004488:	40010800 	.word	0x40010800
 800448c:	40011000 	.word	0x40011000

08004490 <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <lcdUpdate+0x9c>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	2002      	movs	r0, #2
 80044a6:	f7fb ffa3 	bl	80003f0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80044aa:	e03b      	b.n	8004524 <lcdUpdate+0x94>
	} else if(y==2) {
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d105      	bne.n	80044be <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <lcdUpdate+0x9c>)
 80044b4:	2102      	movs	r1, #2
 80044b6:	2002      	movs	r0, #2
 80044b8:	f7fb ff9a 	bl	80003f0 <lcd_print>
}
 80044bc:	e032      	b.n	8004524 <lcdUpdate+0x94>
	} else if(y==3) {
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d105      	bne.n	80044d0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <lcdUpdate+0x9c>)
 80044c6:	2103      	movs	r1, #3
 80044c8:	2002      	movs	r0, #2
 80044ca:	f7fb ff91 	bl	80003f0 <lcd_print>
}
 80044ce:	e029      	b.n	8004524 <lcdUpdate+0x94>
	} else if(y==4) {
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d105      	bne.n	80044e2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <lcdUpdate+0x9c>)
 80044d8:	2104      	movs	r1, #4
 80044da:	2002      	movs	r0, #2
 80044dc:	f7fb ff88 	bl	80003f0 <lcd_print>
}
 80044e0:	e020      	b.n	8004524 <lcdUpdate+0x94>
	} else if(y==5) {
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d105      	bne.n	80044f4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <lcdUpdate+0x9c>)
 80044ea:	2105      	movs	r1, #5
 80044ec:	2002      	movs	r0, #2
 80044ee:	f7fb ff7f 	bl	80003f0 <lcd_print>
}
 80044f2:	e017      	b.n	8004524 <lcdUpdate+0x94>
	} else if(y==6) {
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d105      	bne.n	8004506 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <lcdUpdate+0x9c>)
 80044fc:	2106      	movs	r1, #6
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fb ff76 	bl	80003f0 <lcd_print>
}
 8004504:	e00e      	b.n	8004524 <lcdUpdate+0x94>
	} else if (y==7) {
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d10b      	bne.n	8004524 <lcdUpdate+0x94>
		lcd_clear();
 800450c:	f7fb ff85 	bl	800041a <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <lcdUpdate+0xa0>)
 8004512:	2101      	movs	r1, #1
 8004514:	2001      	movs	r0, #1
 8004516:	f7fb ff6b 	bl	80003f0 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800451a:	4a06      	ldr	r2, [pc, #24]	; (8004534 <lcdUpdate+0xa4>)
 800451c:	2101      	movs	r1, #1
 800451e:	2002      	movs	r0, #2
 8004520:	f7fb ff66 	bl	80003f0 <lcd_print>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	0800c9fc 	.word	0x0800c9fc
 8004530:	0800d2d8 	.word	0x0800d2d8
 8004534:	0800d2ec 	.word	0x0800d2ec

08004538 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d11d      	bne.n	8004584 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004548:	4b62      	ldr	r3, [pc, #392]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004550:	4a61      	ldr	r2, [pc, #388]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 8004552:	2101      	movs	r1, #1
 8004554:	2001      	movs	r0, #1
 8004556:	f7fb ff4b 	bl	80003f0 <lcd_print>
 800455a:	e008      	b.n	800456e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800455c:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d104      	bne.n	800456e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004564:	4a5d      	ldr	r2, [pc, #372]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f7fb ff41 	bl	80003f0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800456e:	4a5c      	ldr	r2, [pc, #368]	; (80046e0 <hataKoduLcdGoster+0x1a8>)
 8004570:	2101      	movs	r1, #1
 8004572:	2002      	movs	r0, #2
 8004574:	f7fb ff3c 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 8004578:	4a5a      	ldr	r2, [pc, #360]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 800457a:	2107      	movs	r1, #7
 800457c:	2002      	movs	r0, #2
 800457e:	f7fb ff37 	bl	80003f0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004582:	e0a3      	b.n	80046cc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d11d      	bne.n	80045c6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800458a:	4b52      	ldr	r3, [pc, #328]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004592:	4a51      	ldr	r2, [pc, #324]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 8004594:	2101      	movs	r1, #1
 8004596:	2001      	movs	r0, #1
 8004598:	f7fb ff2a 	bl	80003f0 <lcd_print>
 800459c:	e008      	b.n	80045b0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800459e:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d104      	bne.n	80045b0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045a6:	4a4d      	ldr	r2, [pc, #308]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7fb ff20 	bl	80003f0 <lcd_print>
		lcd_print(2, 2, "2");
 80045b0:	4a4d      	ldr	r2, [pc, #308]	; (80046e8 <hataKoduLcdGoster+0x1b0>)
 80045b2:	2102      	movs	r1, #2
 80045b4:	2002      	movs	r0, #2
 80045b6:	f7fb ff1b 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80045ba:	4a4a      	ldr	r2, [pc, #296]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 80045bc:	2107      	movs	r1, #7
 80045be:	2002      	movs	r0, #2
 80045c0:	f7fb ff16 	bl	80003f0 <lcd_print>
}
 80045c4:	e082      	b.n	80046cc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d11d      	bne.n	8004608 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80045cc:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80045d4:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	2001      	movs	r0, #1
 80045da:	f7fb ff09 	bl	80003f0 <lcd_print>
 80045de:	e008      	b.n	80045f2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80045e0:	4b3c      	ldr	r3, [pc, #240]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d104      	bne.n	80045f2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045e8:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fb feff 	bl	80003f0 <lcd_print>
		lcd_print(2, 3, "3");
 80045f2:	4a3e      	ldr	r2, [pc, #248]	; (80046ec <hataKoduLcdGoster+0x1b4>)
 80045f4:	2103      	movs	r1, #3
 80045f6:	2002      	movs	r0, #2
 80045f8:	f7fb fefa 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80045fc:	4a39      	ldr	r2, [pc, #228]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 80045fe:	2107      	movs	r1, #7
 8004600:	2002      	movs	r0, #2
 8004602:	f7fb fef5 	bl	80003f0 <lcd_print>
}
 8004606:	e061      	b.n	80046cc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d11d      	bne.n	800464a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 8004618:	2101      	movs	r1, #1
 800461a:	2001      	movs	r0, #1
 800461c:	f7fb fee8 	bl	80003f0 <lcd_print>
 8004620:	e008      	b.n	8004634 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004622:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d104      	bne.n	8004634 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 800462c:	2101      	movs	r1, #1
 800462e:	2001      	movs	r0, #1
 8004630:	f7fb fede 	bl	80003f0 <lcd_print>
		lcd_print(2, 4, "4");
 8004634:	4a2e      	ldr	r2, [pc, #184]	; (80046f0 <hataKoduLcdGoster+0x1b8>)
 8004636:	2104      	movs	r1, #4
 8004638:	2002      	movs	r0, #2
 800463a:	f7fb fed9 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 800463e:	4a29      	ldr	r2, [pc, #164]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 8004640:	2107      	movs	r1, #7
 8004642:	2002      	movs	r0, #2
 8004644:	f7fb fed4 	bl	80003f0 <lcd_print>
}
 8004648:	e040      	b.n	80046cc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d11d      	bne.n	800468c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 800465a:	2101      	movs	r1, #1
 800465c:	2001      	movs	r0, #1
 800465e:	f7fb fec7 	bl	80003f0 <lcd_print>
 8004662:	e008      	b.n	8004676 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d104      	bne.n	8004676 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 800466e:	2101      	movs	r1, #1
 8004670:	2001      	movs	r0, #1
 8004672:	f7fb febd 	bl	80003f0 <lcd_print>
		lcd_print(2, 5, "5");
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <hataKoduLcdGoster+0x1bc>)
 8004678:	2105      	movs	r1, #5
 800467a:	2002      	movs	r0, #2
 800467c:	f7fb feb8 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 8004680:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 8004682:	2107      	movs	r1, #7
 8004684:	2002      	movs	r0, #2
 8004686:	f7fb feb3 	bl	80003f0 <lcd_print>
}
 800468a:	e01f      	b.n	80046cc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d11c      	bne.n	80046cc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <hataKoduLcdGoster+0x1a0>)
 800469c:	2101      	movs	r1, #1
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fb fea6 	bl	80003f0 <lcd_print>
 80046a4:	e008      	b.n	80046b8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <hataKoduLcdGoster+0x19c>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d104      	bne.n	80046b8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80046ae:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <hataKoduLcdGoster+0x1a4>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fb fe9c 	bl	80003f0 <lcd_print>
		lcd_print(2, 6, "6");
 80046b8:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <hataKoduLcdGoster+0x1c0>)
 80046ba:	2106      	movs	r1, #6
 80046bc:	2002      	movs	r0, #2
 80046be:	f7fb fe97 	bl	80003f0 <lcd_print>
		lcd_print(2, 7, "          ");
 80046c2:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <hataKoduLcdGoster+0x1ac>)
 80046c4:	2107      	movs	r1, #7
 80046c6:	2002      	movs	r0, #2
 80046c8:	f7fb fe92 	bl	80003f0 <lcd_print>
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000c9c 	.word	0x20000c9c
 80046d8:	0800d300 	.word	0x0800d300
 80046dc:	0800d314 	.word	0x0800d314
 80046e0:	0800d328 	.word	0x0800d328
 80046e4:	0800d32c 	.word	0x0800d32c
 80046e8:	0800d338 	.word	0x0800d338
 80046ec:	0800d33c 	.word	0x0800d33c
 80046f0:	0800d340 	.word	0x0800d340
 80046f4:	0800d344 	.word	0x0800d344
 80046f8:	0800d348 	.word	0x0800d348

080046fc <eepromKontrol>:

void eepromKontrol(void) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004702:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	233f      	movs	r3, #63	; 0x3f
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	4b9b      	ldr	r3, [pc, #620]	; (800497c <eepromKontrol+0x280>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	233f      	movs	r3, #63	; 0x3f
 8004712:	2200      	movs	r2, #0
 8004714:	21a0      	movs	r1, #160	; 0xa0
 8004716:	489a      	ldr	r0, [pc, #616]	; (8004980 <eepromKontrol+0x284>)
 8004718:	f004 f8e2 	bl	80088e0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800471c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004720:	f003 f89c 	bl	800785c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004724:	4b95      	ldr	r3, [pc, #596]	; (800497c <eepromKontrol+0x280>)
 8004726:	78da      	ldrb	r2, [r3, #3]
 8004728:	4b96      	ldr	r3, [pc, #600]	; (8004984 <eepromKontrol+0x288>)
 800472a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800472c:	4b93      	ldr	r3, [pc, #588]	; (800497c <eepromKontrol+0x280>)
 800472e:	785a      	ldrb	r2, [r3, #1]
 8004730:	4b95      	ldr	r3, [pc, #596]	; (8004988 <eepromKontrol+0x28c>)
 8004732:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004734:	4b91      	ldr	r3, [pc, #580]	; (800497c <eepromKontrol+0x280>)
 8004736:	789a      	ldrb	r2, [r3, #2]
 8004738:	4b94      	ldr	r3, [pc, #592]	; (800498c <eepromKontrol+0x290>)
 800473a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800473c:	4b8f      	ldr	r3, [pc, #572]	; (800497c <eepromKontrol+0x280>)
 800473e:	791a      	ldrb	r2, [r3, #4]
 8004740:	4b93      	ldr	r3, [pc, #588]	; (8004990 <eepromKontrol+0x294>)
 8004742:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004744:	4b8d      	ldr	r3, [pc, #564]	; (800497c <eepromKontrol+0x280>)
 8004746:	795a      	ldrb	r2, [r3, #5]
 8004748:	4b92      	ldr	r3, [pc, #584]	; (8004994 <eepromKontrol+0x298>)
 800474a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800474c:	4b8b      	ldr	r3, [pc, #556]	; (800497c <eepromKontrol+0x280>)
 800474e:	799a      	ldrb	r2, [r3, #6]
 8004750:	4b91      	ldr	r3, [pc, #580]	; (8004998 <eepromKontrol+0x29c>)
 8004752:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004754:	4b89      	ldr	r3, [pc, #548]	; (800497c <eepromKontrol+0x280>)
 8004756:	79da      	ldrb	r2, [r3, #7]
 8004758:	4b90      	ldr	r3, [pc, #576]	; (800499c <eepromKontrol+0x2a0>)
 800475a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800475c:	4b87      	ldr	r3, [pc, #540]	; (800497c <eepromKontrol+0x280>)
 800475e:	7a1a      	ldrb	r2, [r3, #8]
 8004760:	4b8f      	ldr	r3, [pc, #572]	; (80049a0 <eepromKontrol+0x2a4>)
 8004762:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004764:	4b85      	ldr	r3, [pc, #532]	; (800497c <eepromKontrol+0x280>)
 8004766:	7a5a      	ldrb	r2, [r3, #9]
 8004768:	4b8e      	ldr	r3, [pc, #568]	; (80049a4 <eepromKontrol+0x2a8>)
 800476a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800476c:	4b83      	ldr	r3, [pc, #524]	; (800497c <eepromKontrol+0x280>)
 800476e:	7a9a      	ldrb	r2, [r3, #10]
 8004770:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <eepromKontrol+0x2ac>)
 8004772:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004774:	4b81      	ldr	r3, [pc, #516]	; (800497c <eepromKontrol+0x280>)
 8004776:	7ada      	ldrb	r2, [r3, #11]
 8004778:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <eepromKontrol+0x2b0>)
 800477a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 800477c:	4b7f      	ldr	r3, [pc, #508]	; (800497c <eepromKontrol+0x280>)
 800477e:	7b1a      	ldrb	r2, [r3, #12]
 8004780:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <eepromKontrol+0x2b4>)
 8004782:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004784:	4b7d      	ldr	r3, [pc, #500]	; (800497c <eepromKontrol+0x280>)
 8004786:	7b5a      	ldrb	r2, [r3, #13]
 8004788:	4b8a      	ldr	r3, [pc, #552]	; (80049b4 <eepromKontrol+0x2b8>)
 800478a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 800478c:	4b7b      	ldr	r3, [pc, #492]	; (800497c <eepromKontrol+0x280>)
 800478e:	7b9a      	ldrb	r2, [r3, #14]
 8004790:	4b89      	ldr	r3, [pc, #548]	; (80049b8 <eepromKontrol+0x2bc>)
 8004792:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004794:	4b79      	ldr	r3, [pc, #484]	; (800497c <eepromKontrol+0x280>)
 8004796:	7bda      	ldrb	r2, [r3, #15]
 8004798:	4b88      	ldr	r3, [pc, #544]	; (80049bc <eepromKontrol+0x2c0>)
 800479a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 800479c:	4b77      	ldr	r3, [pc, #476]	; (800497c <eepromKontrol+0x280>)
 800479e:	7c1a      	ldrb	r2, [r3, #16]
 80047a0:	4b87      	ldr	r3, [pc, #540]	; (80049c0 <eepromKontrol+0x2c4>)
 80047a2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80047a4:	4b75      	ldr	r3, [pc, #468]	; (800497c <eepromKontrol+0x280>)
 80047a6:	7c5a      	ldrb	r2, [r3, #17]
 80047a8:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <eepromKontrol+0x2c8>)
 80047aa:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80047ac:	4b73      	ldr	r3, [pc, #460]	; (800497c <eepromKontrol+0x280>)
 80047ae:	7c9a      	ldrb	r2, [r3, #18]
 80047b0:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <eepromKontrol+0x2cc>)
 80047b2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80047b4:	4b71      	ldr	r3, [pc, #452]	; (800497c <eepromKontrol+0x280>)
 80047b6:	7cda      	ldrb	r2, [r3, #19]
 80047b8:	4b84      	ldr	r3, [pc, #528]	; (80049cc <eepromKontrol+0x2d0>)
 80047ba:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80047bc:	4b6f      	ldr	r3, [pc, #444]	; (800497c <eepromKontrol+0x280>)
 80047be:	7d1a      	ldrb	r2, [r3, #20]
 80047c0:	4b83      	ldr	r3, [pc, #524]	; (80049d0 <eepromKontrol+0x2d4>)
 80047c2:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80047c4:	4b6d      	ldr	r3, [pc, #436]	; (800497c <eepromKontrol+0x280>)
 80047c6:	7d5a      	ldrb	r2, [r3, #21]
 80047c8:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <eepromKontrol+0x2d8>)
 80047ca:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80047cc:	4b6b      	ldr	r3, [pc, #428]	; (800497c <eepromKontrol+0x280>)
 80047ce:	7d9a      	ldrb	r2, [r3, #22]
 80047d0:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <eepromKontrol+0x2dc>)
 80047d2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80047d4:	4b69      	ldr	r3, [pc, #420]	; (800497c <eepromKontrol+0x280>)
 80047d6:	7dda      	ldrb	r2, [r3, #23]
 80047d8:	4b80      	ldr	r3, [pc, #512]	; (80049dc <eepromKontrol+0x2e0>)
 80047da:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80047dc:	4b67      	ldr	r3, [pc, #412]	; (800497c <eepromKontrol+0x280>)
 80047de:	7e1a      	ldrb	r2, [r3, #24]
 80047e0:	4b7f      	ldr	r3, [pc, #508]	; (80049e0 <eepromKontrol+0x2e4>)
 80047e2:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80047e4:	4b65      	ldr	r3, [pc, #404]	; (800497c <eepromKontrol+0x280>)
 80047e6:	7e5a      	ldrb	r2, [r3, #25]
 80047e8:	4b7e      	ldr	r3, [pc, #504]	; (80049e4 <eepromKontrol+0x2e8>)
 80047ea:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80047ec:	4b63      	ldr	r3, [pc, #396]	; (800497c <eepromKontrol+0x280>)
 80047ee:	7e9a      	ldrb	r2, [r3, #26]
 80047f0:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <eepromKontrol+0x2ec>)
 80047f2:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <eepromKontrol+0x280>)
 80047f6:	7eda      	ldrb	r2, [r3, #27]
 80047f8:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <eepromKontrol+0x2f0>)
 80047fa:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80047fc:	4b5f      	ldr	r3, [pc, #380]	; (800497c <eepromKontrol+0x280>)
 80047fe:	7f1a      	ldrb	r2, [r3, #28]
 8004800:	4b7b      	ldr	r3, [pc, #492]	; (80049f0 <eepromKontrol+0x2f4>)
 8004802:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004804:	4b5d      	ldr	r3, [pc, #372]	; (800497c <eepromKontrol+0x280>)
 8004806:	7f5a      	ldrb	r2, [r3, #29]
 8004808:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <eepromKontrol+0x2f8>)
 800480a:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 800480c:	4b5b      	ldr	r3, [pc, #364]	; (800497c <eepromKontrol+0x280>)
 800480e:	7f9a      	ldrb	r2, [r3, #30]
 8004810:	4b79      	ldr	r3, [pc, #484]	; (80049f8 <eepromKontrol+0x2fc>)
 8004812:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <eepromKontrol+0x280>)
 8004816:	7fda      	ldrb	r2, [r3, #31]
 8004818:	4b78      	ldr	r3, [pc, #480]	; (80049fc <eepromKontrol+0x300>)
 800481a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 800481c:	4b57      	ldr	r3, [pc, #348]	; (800497c <eepromKontrol+0x280>)
 800481e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <eepromKontrol+0x304>)
 8004824:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004826:	4b55      	ldr	r3, [pc, #340]	; (800497c <eepromKontrol+0x280>)
 8004828:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800482c:	4b75      	ldr	r3, [pc, #468]	; (8004a04 <eepromKontrol+0x308>)
 800482e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004830:	4b52      	ldr	r3, [pc, #328]	; (800497c <eepromKontrol+0x280>)
 8004832:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004836:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <eepromKontrol+0x30c>)
 8004838:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800483a:	4b50      	ldr	r3, [pc, #320]	; (800497c <eepromKontrol+0x280>)
 800483c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004840:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <eepromKontrol+0x310>)
 8004842:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004844:	4b4d      	ldr	r3, [pc, #308]	; (800497c <eepromKontrol+0x280>)
 8004846:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800484a:	4b71      	ldr	r3, [pc, #452]	; (8004a10 <eepromKontrol+0x314>)
 800484c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <eepromKontrol+0x280>)
 8004850:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <eepromKontrol+0x318>)
 8004856:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004858:	4b48      	ldr	r3, [pc, #288]	; (800497c <eepromKontrol+0x280>)
 800485a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800485e:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <eepromKontrol+0x31c>)
 8004860:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004862:	4b46      	ldr	r3, [pc, #280]	; (800497c <eepromKontrol+0x280>)
 8004864:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004868:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <eepromKontrol+0x320>)
 800486a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <eepromKontrol+0x280>)
 800486e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004872:	4b6b      	ldr	r3, [pc, #428]	; (8004a20 <eepromKontrol+0x324>)
 8004874:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <eepromKontrol+0x280>)
 8004878:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800487c:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <eepromKontrol+0x328>)
 800487e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004880:	4b3e      	ldr	r3, [pc, #248]	; (800497c <eepromKontrol+0x280>)
 8004882:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004886:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <eepromKontrol+0x32c>)
 8004888:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 800488a:	4b3c      	ldr	r3, [pc, #240]	; (800497c <eepromKontrol+0x280>)
 800488c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004890:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <eepromKontrol+0x330>)
 8004892:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004894:	4b39      	ldr	r3, [pc, #228]	; (800497c <eepromKontrol+0x280>)
 8004896:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <eepromKontrol+0x334>)
 800489c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <eepromKontrol+0x280>)
 80048a0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80048a4:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <eepromKontrol+0x338>)
 80048a6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 80048a8:	4b34      	ldr	r3, [pc, #208]	; (800497c <eepromKontrol+0x280>)
 80048aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80048ae:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <eepromKontrol+0x33c>)
 80048b0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80048b2:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <eepromKontrol+0x308>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe ff92 	bl	80037e0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <eepromKontrol+0x304>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d902      	bls.n	80048ca <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 80048c4:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <eepromKontrol+0x304>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80048ca:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <eepromKontrol+0x300>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d902      	bls.n	80048d8 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <eepromKontrol+0x300>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80048d8:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <eepromKontrol+0x2fc>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d902      	bls.n	80048e6 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 80048e0:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <eepromKontrol+0x2fc>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80048e6:	4b43      	ldr	r3, [pc, #268]	; (80049f4 <eepromKontrol+0x2f8>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b09      	cmp	r3, #9
 80048ec:	d902      	bls.n	80048f4 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <eepromKontrol+0x2f8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80048f4:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <eepromKontrol+0x2f4>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d902      	bls.n	8004902 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 80048fc:	4b3c      	ldr	r3, [pc, #240]	; (80049f0 <eepromKontrol+0x2f4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <eepromKontrol+0x28c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d902      	bls.n	8004910 <eepromKontrol+0x214>
	    calismaSekli=0;
 800490a:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <eepromKontrol+0x28c>)
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <eepromKontrol+0x290>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d902      	bls.n	800491e <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004918:	4b1c      	ldr	r3, [pc, #112]	; (800498c <eepromKontrol+0x290>)
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800491e:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <eepromKontrol+0x294>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d902      	bls.n	800492c <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <eepromKontrol+0x294>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <eepromKontrol+0x298>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d902      	bls.n	800493a <eepromKontrol+0x23e>
	    altLimit=1;
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <eepromKontrol+0x298>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <eepromKontrol+0x29c>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d902      	bls.n	8004948 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <eepromKontrol+0x29c>)
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <eepromKontrol+0x2a0>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d902      	bls.n	8004956 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <eepromKontrol+0x2a0>)
 8004952:	2203      	movs	r2, #3
 8004954:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004956:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <eepromKontrol+0x314>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d902      	bls.n	8004964 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <eepromKontrol+0x314>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <eepromKontrol+0x2a4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d902      	bls.n	8004972 <eepromKontrol+0x276>
	    kapi1Tip=1;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <eepromKontrol+0x2a4>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <eepromKontrol+0x2a8>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d963      	bls.n	8004a42 <eepromKontrol+0x346>
 800497a:	e05f      	b.n	8004a3c <eepromKontrol+0x340>
 800497c:	20000c14 	.word	0x20000c14
 8004980:	20000e3c 	.word	0x20000e3c
 8004984:	20000c53 	.word	0x20000c53
 8004988:	20000c7d 	.word	0x20000c7d
 800498c:	20000c80 	.word	0x20000c80
 8004990:	20000c81 	.word	0x20000c81
 8004994:	20000c82 	.word	0x20000c82
 8004998:	20000c83 	.word	0x20000c83
 800499c:	20000c84 	.word	0x20000c84
 80049a0:	20000c85 	.word	0x20000c85
 80049a4:	20000c95 	.word	0x20000c95
 80049a8:	20000c86 	.word	0x20000c86
 80049ac:	20000c96 	.word	0x20000c96
 80049b0:	20000c87 	.word	0x20000c87
 80049b4:	20000c97 	.word	0x20000c97
 80049b8:	20000c8a 	.word	0x20000c8a
 80049bc:	20000c8b 	.word	0x20000c8b
 80049c0:	20000c8c 	.word	0x20000c8c
 80049c4:	20000c8d 	.word	0x20000c8d
 80049c8:	20000c8e 	.word	0x20000c8e
 80049cc:	20000c8f 	.word	0x20000c8f
 80049d0:	20000c90 	.word	0x20000c90
 80049d4:	20000c91 	.word	0x20000c91
 80049d8:	20000c92 	.word	0x20000c92
 80049dc:	20000c93 	.word	0x20000c93
 80049e0:	20000c94 	.word	0x20000c94
 80049e4:	20000c98 	.word	0x20000c98
 80049e8:	20000c9a 	.word	0x20000c9a
 80049ec:	20000c78 	.word	0x20000c78
 80049f0:	20000c79 	.word	0x20000c79
 80049f4:	20000c7a 	.word	0x20000c7a
 80049f8:	20000940 	.word	0x20000940
 80049fc:	20000941 	.word	0x20000941
 8004a00:	20000c7b 	.word	0x20000c7b
 8004a04:	20000c9c 	.word	0x20000c9c
 8004a08:	20000c89 	.word	0x20000c89
 8004a0c:	20000c9b 	.word	0x20000c9b
 8004a10:	20000c88 	.word	0x20000c88
 8004a14:	20000c9d 	.word	0x20000c9d
 8004a18:	20000c9e 	.word	0x20000c9e
 8004a1c:	20000c9f 	.word	0x20000c9f
 8004a20:	20000ca0 	.word	0x20000ca0
 8004a24:	20000ca1 	.word	0x20000ca1
 8004a28:	20000ca2 	.word	0x20000ca2
 8004a2c:	20000ca3 	.word	0x20000ca3
 8004a30:	20000ca4 	.word	0x20000ca4
 8004a34:	20000ca5 	.word	0x20000ca5
 8004a38:	20000ca6 	.word	0x20000ca6
	    kapi1AcSure=5;
 8004a3c:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <eepromKontrol+0x46c>)
 8004a3e:	2205      	movs	r2, #5
 8004a40:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004a42:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <eepromKontrol+0x470>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004a4a:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <eepromKontrol+0x470>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004a50:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <eepromKontrol+0x474>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d902      	bls.n	8004a5e <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004a58:	4b45      	ldr	r3, [pc, #276]	; (8004b70 <eepromKontrol+0x474>)
 8004a5a:	2205      	movs	r2, #5
 8004a5c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004a5e:	4b45      	ldr	r3, [pc, #276]	; (8004b74 <eepromKontrol+0x478>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004a66:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <eepromKontrol+0x478>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <eepromKontrol+0x47c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d902      	bls.n	8004a7a <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004a74:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <eepromKontrol+0x47c>)
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <eepromKontrol+0x480>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d902      	bls.n	8004a88 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004a82:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <eepromKontrol+0x480>)
 8004a84:	2205      	movs	r2, #5
 8004a86:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004a88:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <eepromKontrol+0x484>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d902      	bls.n	8004a96 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004a90:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <eepromKontrol+0x484>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <eepromKontrol+0x488>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <eepromKontrol+0x488>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004aa4:	4b38      	ldr	r3, [pc, #224]	; (8004b88 <eepromKontrol+0x48c>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d902      	bls.n	8004ab2 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <eepromKontrol+0x48c>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <eepromKontrol+0x490>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d902      	bls.n	8004ac0 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <eepromKontrol+0x490>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <eepromKontrol+0x494>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d902      	bls.n	8004ace <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004ac8:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <eepromKontrol+0x494>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <eepromKontrol+0x498>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d902      	bls.n	8004adc <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004ad6:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <eepromKontrol+0x498>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004adc:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <eepromKontrol+0x49c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d902      	bls.n	8004aea <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <eepromKontrol+0x49c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004aea:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <eepromKontrol+0x4a0>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d902      	bls.n	8004af8 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004af2:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <eepromKontrol+0x4a0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <eepromKontrol+0x4a4>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d902      	bls.n	8004b06 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <eepromKontrol+0x4a4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <eepromKontrol+0x4a8>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d902      	bls.n	8004b14 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <eepromKontrol+0x4a8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004b14:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <eepromKontrol+0x4ac>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2bb4      	cmp	r3, #180	; 0xb4
 8004b1a:	d902      	bls.n	8004b22 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <eepromKontrol+0x4ac>)
 8004b1e:	223c      	movs	r2, #60	; 0x3c
 8004b20:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <eepromKontrol+0x4b0>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d902      	bls.n	8004b30 <eepromKontrol+0x434>
	    buzzer=0;
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <eepromKontrol+0x4b0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <eepromKontrol+0x4b4>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d902      	bls.n	8004b3e <eepromKontrol+0x442>
	    demoMode=0;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <eepromKontrol+0x4b4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <eepromKontrol+0x4b8>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d902      	bls.n	8004b4c <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <eepromKontrol+0x4b8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <eepromKontrol+0x4bc>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d902      	bls.n	8004b5a <eepromKontrol+0x45e>
	    dilSecim=0;
 8004b54:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <eepromKontrol+0x4bc>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b5e:	f002 fe7d 	bl	800785c <HAL_Delay>
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000c95 	.word	0x20000c95
 8004b6c:	20000c86 	.word	0x20000c86
 8004b70:	20000c96 	.word	0x20000c96
 8004b74:	20000c87 	.word	0x20000c87
 8004b78:	20000c89 	.word	0x20000c89
 8004b7c:	20000c97 	.word	0x20000c97
 8004b80:	20000c8a 	.word	0x20000c8a
 8004b84:	20000c8b 	.word	0x20000c8b
 8004b88:	20000c8c 	.word	0x20000c8c
 8004b8c:	20000c8d 	.word	0x20000c8d
 8004b90:	20000c8e 	.word	0x20000c8e
 8004b94:	20000c8f 	.word	0x20000c8f
 8004b98:	20000c90 	.word	0x20000c90
 8004b9c:	20000c91 	.word	0x20000c91
 8004ba0:	20000c92 	.word	0x20000c92
 8004ba4:	20000c93 	.word	0x20000c93
 8004ba8:	20000c94 	.word	0x20000c94
 8004bac:	20000c98 	.word	0x20000c98
 8004bb0:	20000c9a 	.word	0x20000c9a
 8004bb4:	20000c9b 	.word	0x20000c9b
 8004bb8:	20000c9c 	.word	0x20000c9c

08004bbc <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004bc6:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <hata2EEPROM+0xa0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <hata2EEPROM+0xa4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <hata2EEPROM+0xa8>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004bda:	f000 f847 	bl	8004c6c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004bde:	e000      	b.n	8004be2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004be0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e012      	b.n	8004c0e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <hata2EEPROM+0xa4>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <hata2EEPROM+0xa8>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <hata2EEPROM+0xa4>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	4918      	ldr	r1, [pc, #96]	; (8004c64 <hata2EEPROM+0xa8>)
 8004c02:	79fa      	ldrb	r2, [r7, #7]
 8004c04:	54ca      	strb	r2, [r1, r3]
					break;
 8004c06:	e007      	b.n	8004c18 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <hata2EEPROM+0xa0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	dbe7      	blt.n	8004be8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <hata2EEPROM+0xa4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b299      	uxth	r1, r3
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <hata2EEPROM+0xa0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b298      	uxth	r0, r3
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <hata2EEPROM+0xa4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <hata2EEPROM+0xa8>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <hata2EEPROM+0xa0>)
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	b292      	uxth	r2, r2
 8004c32:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004c36:	9402      	str	r4, [sp, #8]
 8004c38:	9201      	str	r2, [sp, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	460a      	mov	r2, r1
 8004c40:	21a0      	movs	r1, #160	; 0xa0
 8004c42:	4809      	ldr	r0, [pc, #36]	; (8004c68 <hata2EEPROM+0xac>)
 8004c44:	f003 fd52 	bl	80086ec <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c4c:	f002 fe06 	bl	800785c <HAL_Delay>
	eepromKontrol();
 8004c50:	f7ff fd54 	bl	80046fc <eepromKontrol>
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd90      	pop	{r4, r7, pc}
 8004c5c:	20000938 	.word	0x20000938
 8004c60:	2000093c 	.word	0x2000093c
 8004c64:	20000c14 	.word	0x20000c14
 8004c68:	20000e3c 	.word	0x20000e3c

08004c6c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e009      	b.n	8004c8c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <eepromDataFillWithEmpty+0x38>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <eepromDataFillWithEmpty+0x3c>)
 8004c82:	2100      	movs	r1, #0
 8004c84:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <eepromDataFillWithEmpty+0x40>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	dbf0      	blt.n	8004c78 <eepromDataFillWithEmpty+0xc>
	}
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000910 	.word	0x20000910
 8004ca8:	20000c14 	.word	0x20000c14
 8004cac:	20000938 	.word	0x20000938

08004cb0 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //------timer kesmesinde islem yapmak için
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	  millis=millis+1;
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	20000c5c 	.word	0x20000c5c

08004cd0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004cd0:	b5b0      	push	{r4, r5, r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cd6:	f002 fd5f 	bl	8007798 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8004cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cde:	f002 fdbd 	bl	800785c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ce2:	f002 f999 	bl	8007018 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ce6:	f002 fabb 	bl	8007260 <MX_GPIO_Init>
  MX_CAN_Init();
 8004cea:	f002 f9db 	bl	80070a4 <MX_CAN_Init>
  MX_I2C1_Init();
 8004cee:	f002 fa0d 	bl	800710c <MX_I2C1_Init>
  MX_TIM1_Init();
 8004cf2:	f002 fa39 	bl	8007168 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004cf6:	f002 fa89 	bl	800720c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	484e      	ldr	r0, [pc, #312]	; (8004e38 <main+0x168>)
 8004d00:	f003 fa51 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004d04:	2201      	movs	r2, #1
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	484b      	ldr	r0, [pc, #300]	; (8004e38 <main+0x168>)
 8004d0a:	f003 fa4c 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004d0e:	200a      	movs	r0, #10
 8004d10:	f002 fda4 	bl	800785c <HAL_Delay>
  lcd_init();
 8004d14:	f7fb fb3d 	bl	8000392 <lcd_init>
  HAL_Delay(10);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f002 fd9f 	bl	800785c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8004d1e:	4847      	ldr	r0, [pc, #284]	; (8004e3c <main+0x16c>)
 8004d20:	f005 f8a4 	bl	8009e6c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004d24:	bf00      	nop
 8004d26:	4846      	ldr	r0, [pc, #280]	; (8004e40 <main+0x170>)
 8004d28:	f004 f84f 	bl	8008dca <HAL_I2C_GetError>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d0f9      	beq.n	8004d26 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004d32:	bf00      	nop
 8004d34:	4842      	ldr	r0, [pc, #264]	; (8004e40 <main+0x170>)
 8004d36:	f004 f83b 	bl	8008db0 <HAL_I2C_GetState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d1f9      	bne.n	8004d34 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004d40:	2200      	movs	r2, #0
 8004d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d46:	483c      	ldr	r0, [pc, #240]	; (8004e38 <main+0x168>)
 8004d48:	f003 fa2d 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d52:	4839      	ldr	r0, [pc, #228]	; (8004e38 <main+0x168>)
 8004d54:	f003 fa27 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	4836      	ldr	r0, [pc, #216]	; (8004e38 <main+0x168>)
 8004d5e:	f003 fa22 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2102      	movs	r1, #2
 8004d66:	4834      	ldr	r0, [pc, #208]	; (8004e38 <main+0x168>)
 8004d68:	f003 fa1d 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4831      	ldr	r0, [pc, #196]	; (8004e38 <main+0x168>)
 8004d72:	f003 fa18 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2120      	movs	r1, #32
 8004d7a:	4832      	ldr	r0, [pc, #200]	; (8004e44 <main+0x174>)
 8004d7c:	f003 fa13 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2110      	movs	r1, #16
 8004d84:	482f      	ldr	r0, [pc, #188]	; (8004e44 <main+0x174>)
 8004d86:	f003 fa0e 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	482e      	ldr	r0, [pc, #184]	; (8004e48 <main+0x178>)
 8004d90:	f003 fa09 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	482b      	ldr	r0, [pc, #172]	; (8004e48 <main+0x178>)
 8004d9a:	f003 fa04 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2120      	movs	r1, #32
 8004da2:	4829      	ldr	r0, [pc, #164]	; (8004e48 <main+0x178>)
 8004da4:	f003 f9ff 	bl	80081a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8004da8:	2200      	movs	r2, #0
 8004daa:	2110      	movs	r1, #16
 8004dac:	4826      	ldr	r0, [pc, #152]	; (8004e48 <main+0x178>)
 8004dae:	f003 f9fa 	bl	80081a6 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, &RxByte, 1);
 8004db2:	2201      	movs	r2, #1
 8004db4:	4925      	ldr	r1, [pc, #148]	; (8004e4c <main+0x17c>)
 8004db6:	4826      	ldr	r0, [pc, #152]	; (8004e50 <main+0x180>)
 8004db8:	f005 fc83 	bl	800a6c2 <HAL_UART_Receive_IT>

  i2cTest();
 8004dbc:	f000 f858 	bl	8004e70 <i2cTest>
  HAL_Delay(100);
 8004dc0:	2064      	movs	r0, #100	; 0x64
 8004dc2:	f002 fd4b 	bl	800785c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8004dc6:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <main+0x184>)
 8004dc8:	2101      	movs	r1, #1
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7fb fb10 	bl	80003f0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8004dd0:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <main+0x188>)
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f7fb fb0b 	bl	80003f0 <lcd_print>
  HAL_Delay(1000);
 8004dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dde:	f002 fd3d 	bl	800785c <HAL_Delay>
  lcd_clear();
 8004de2:	f7fb fb1a 	bl	800041a <lcd_clear>

  eepromKontrol();
 8004de6:	f7ff fc89 	bl	80046fc <eepromKontrol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <main+0x18c>)
 8004dec:	1d3c      	adds	r4, r7, #4
 8004dee:	461d      	mov	r5, r3
 8004df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f005 fd73 	bl	800a8ec <osThreadCreate>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <main+0x190>)
 8004e0a:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f005 ff5c 	bl	800acca <xQueueCreateMutex>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <main+0x194>)
 8004e16:	6013      	str	r3, [r2, #0]
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	2280      	movs	r2, #128	; 0x80
 8004e24:	4910      	ldr	r1, [pc, #64]	; (8004e68 <main+0x198>)
 8004e26:	4811      	ldr	r0, [pc, #68]	; (8004e6c <main+0x19c>)
 8004e28:	f006 f996 	bl	800b158 <xTaskCreate>

  vTaskStartScheduler();
 8004e2c:	f006 faf6 	bl	800b41c <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004e30:	f005 fd55 	bl	800a8de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004e34:	e7fe      	b.n	8004e34 <main+0x164>
 8004e36:	bf00      	nop
 8004e38:	40010c00 	.word	0x40010c00
 8004e3c:	20000ed8 	.word	0x20000ed8
 8004e40:	20000e3c 	.word	0x20000e3c
 8004e44:	40011000 	.word	0x40011000
 8004e48:	40010800 	.word	0x40010800
 8004e4c:	20000e10 	.word	0x20000e10
 8004e50:	20000e90 	.word	0x20000e90
 8004e54:	0800d4c4 	.word	0x0800d4c4
 8004e58:	0800d4d8 	.word	0x0800d4d8
 8004e5c:	0800d504 	.word	0x0800d504
 8004e60:	20000f20 	.word	0x20000f20
 8004e64:	20000ed4 	.word	0x20000ed4
 8004e68:	0800d4ec 	.word	0x0800d4ec
 8004e6c:	08004fcd 	.word	0x08004fcd

08004e70 <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004e76:	463b      	mov	r3, r7
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004e82:	4b50      	ldr	r3, [pc, #320]	; (8004fc4 <i2cTest+0x154>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b4e      	ldr	r3, [pc, #312]	; (8004fc4 <i2cTest+0x154>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004e92:	484c      	ldr	r0, [pc, #304]	; (8004fc4 <i2cTest+0x154>)
 8004e94:	f003 fafc 	bl	8008490 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e98:	23c0      	movs	r3, #192	; 0xc0
 8004e9a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004e9c:	2311      	movs	r3, #17
 8004e9e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4846      	ldr	r0, [pc, #280]	; (8004fc8 <i2cTest+0x158>)
 8004eae:	f002 ff03 	bl	8007cb8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2140      	movs	r1, #64	; 0x40
 8004eb6:	4844      	ldr	r0, [pc, #272]	; (8004fc8 <i2cTest+0x158>)
 8004eb8:	f003 f975 	bl	80081a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	4841      	ldr	r0, [pc, #260]	; (8004fc8 <i2cTest+0x158>)
 8004ec2:	f003 f970 	bl	80081a6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8004ec6:	200a      	movs	r0, #10
 8004ec8:	f002 fcc8 	bl	800785c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004ecc:	bf00      	nop
 8004ece:	2140      	movs	r1, #64	; 0x40
 8004ed0:	483d      	ldr	r0, [pc, #244]	; (8004fc8 <i2cTest+0x158>)
 8004ed2:	f003 f951 	bl	8008178 <HAL_GPIO_ReadPin>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d006      	beq.n	8004eea <i2cTest+0x7a>
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	483a      	ldr	r0, [pc, #232]	; (8004fc8 <i2cTest+0x158>)
 8004ee0:	f003 f94a 	bl	8008178 <HAL_GPIO_ReadPin>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d1f1      	bne.n	8004ece <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	4836      	ldr	r0, [pc, #216]	; (8004fc8 <i2cTest+0x158>)
 8004ef0:	f003 f959 	bl	80081a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f002 fcb1 	bl	800785c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8004efa:	bf00      	nop
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	4832      	ldr	r0, [pc, #200]	; (8004fc8 <i2cTest+0x158>)
 8004f00:	f003 f93a 	bl	8008178 <HAL_GPIO_ReadPin>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d0f8      	beq.n	8004efc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	482e      	ldr	r0, [pc, #184]	; (8004fc8 <i2cTest+0x158>)
 8004f10:	f003 f949 	bl	80081a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004f14:	200a      	movs	r0, #10
 8004f16:	f002 fca1 	bl	800785c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8004f1a:	bf00      	nop
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	482a      	ldr	r0, [pc, #168]	; (8004fc8 <i2cTest+0x158>)
 8004f20:	f003 f92a 	bl	8008178 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d0f8      	beq.n	8004f1c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	4826      	ldr	r0, [pc, #152]	; (8004fc8 <i2cTest+0x158>)
 8004f30:	f003 f939 	bl	80081a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004f34:	200a      	movs	r0, #10
 8004f36:	f002 fc91 	bl	800785c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8004f3a:	bf00      	nop
 8004f3c:	2140      	movs	r1, #64	; 0x40
 8004f3e:	4822      	ldr	r0, [pc, #136]	; (8004fc8 <i2cTest+0x158>)
 8004f40:	f003 f91a 	bl	8008178 <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d1f8      	bne.n	8004f3c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	481e      	ldr	r0, [pc, #120]	; (8004fc8 <i2cTest+0x158>)
 8004f50:	f003 f929 	bl	80081a6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004f54:	200a      	movs	r0, #10
 8004f56:	f002 fc81 	bl	800785c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004f5a:	bf00      	nop
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	481a      	ldr	r0, [pc, #104]	; (8004fc8 <i2cTest+0x158>)
 8004f60:	f003 f90a 	bl	8008178 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d1f8      	bne.n	8004f5c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f6a:	23c0      	movs	r3, #192	; 0xc0
 8004f6c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004f6e:	2312      	movs	r3, #18
 8004f70:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004f72:	2301      	movs	r3, #1
 8004f74:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004f76:	2303      	movs	r3, #3
 8004f78:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4812      	ldr	r0, [pc, #72]	; (8004fc8 <i2cTest+0x158>)
 8004f80:	f002 fe9a 	bl	8007cb8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <i2cTest+0x154>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <i2cTest+0x154>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f92:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <i2cTest+0x154>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <i2cTest+0x154>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <i2cTest+0x154>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <i2cTest+0x154>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004fb4:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <i2cTest+0x154>)
 8004fb6:	f003 f927 	bl	8008208 <HAL_I2C_Init>
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000e3c 	.word	0x20000e3c
 8004fc8:	40010c00 	.word	0x40010c00

08004fcc <mainTask>:

void mainTask(void *pvParameters) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	6078      	str	r0, [r7, #4]
	while(1) {
		//WiFi_Connect();
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	489f      	ldr	r0, [pc, #636]	; (8005254 <mainTask+0x288>)
 8004fd8:	f003 f8ce 	bl	8008178 <HAL_GPIO_ReadPin>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d135      	bne.n	800504e <mainTask+0x82>
 8004fe2:	2108      	movs	r1, #8
 8004fe4:	489c      	ldr	r0, [pc, #624]	; (8005258 <mainTask+0x28c>)
 8004fe6:	f003 f8c7 	bl	8008178 <HAL_GPIO_ReadPin>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d12e      	bne.n	800504e <mainTask+0x82>
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4898      	ldr	r0, [pc, #608]	; (8005254 <mainTask+0x288>)
 8004ff4:	f003 f8c0 	bl	8008178 <HAL_GPIO_ReadPin>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d127      	bne.n	800504e <mainTask+0x82>
 8004ffe:	2104      	movs	r1, #4
 8005000:	4894      	ldr	r0, [pc, #592]	; (8005254 <mainTask+0x288>)
 8005002:	f003 f8b9 	bl	8008178 <HAL_GPIO_ReadPin>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d120      	bne.n	800504e <mainTask+0x82>
 800500c:	2108      	movs	r1, #8
 800500e:	4891      	ldr	r0, [pc, #580]	; (8005254 <mainTask+0x288>)
 8005010:	f003 f8b2 	bl	8008178 <HAL_GPIO_ReadPin>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d119      	bne.n	800504e <mainTask+0x82>
 800501a:	2180      	movs	r1, #128	; 0x80
 800501c:	488e      	ldr	r0, [pc, #568]	; (8005258 <mainTask+0x28c>)
 800501e:	f003 f8ab 	bl	8008178 <HAL_GPIO_ReadPin>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d112      	bne.n	800504e <mainTask+0x82>
 8005028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502c:	488a      	ldr	r0, [pc, #552]	; (8005258 <mainTask+0x28c>)
 800502e:	f003 f8a3 	bl	8008178 <HAL_GPIO_ReadPin>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10a      	bne.n	800504e <mainTask+0x82>
 8005038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800503c:	4886      	ldr	r0, [pc, #536]	; (8005258 <mainTask+0x28c>)
 800503e:	f003 f89b 	bl	8008178 <HAL_GPIO_ReadPin>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d102      	bne.n	800504e <mainTask+0x82>
				   {
					   butonKontrol=0;
 8005048:	4b84      	ldr	r3, [pc, #528]	; (800525c <mainTask+0x290>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
				   }

				  if(hafizaYaz==1){
 800504e:	4b84      	ldr	r3, [pc, #528]	; (8005260 <mainTask+0x294>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d038      	beq.n	80050c8 <mainTask+0xfc>
					  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005056:	bf00      	nop
 8005058:	4882      	ldr	r0, [pc, #520]	; (8005264 <mainTask+0x298>)
 800505a:	f003 feb6 	bl	8008dca <HAL_I2C_GetError>
 800505e:	4603      	mov	r3, r0
 8005060:	2b04      	cmp	r3, #4
 8005062:	d0f9      	beq.n	8005058 <mainTask+0x8c>
					  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8005064:	bf00      	nop
 8005066:	487f      	ldr	r0, [pc, #508]	; (8005264 <mainTask+0x298>)
 8005068:	f003 fea2 	bl	8008db0 <HAL_I2C_GetState>
 800506c:	4603      	mov	r3, r0
 800506e:	2b20      	cmp	r3, #32
 8005070:	d1f9      	bne.n	8005066 <mainTask+0x9a>

					  }
					  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005072:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005076:	9302      	str	r3, [sp, #8]
 8005078:	233f      	movs	r3, #63	; 0x3f
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <mainTask+0x29c>)
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	233f      	movs	r3, #63	; 0x3f
 8005082:	2200      	movs	r2, #0
 8005084:	21a0      	movs	r1, #160	; 0xa0
 8005086:	4877      	ldr	r0, [pc, #476]	; (8005264 <mainTask+0x298>)
 8005088:	f003 fb30 	bl	80086ec <HAL_I2C_Mem_Write>
					  HAL_Delay(5);
 800508c:	2005      	movs	r0, #5
 800508e:	f002 fbe5 	bl	800785c <HAL_Delay>
					  hafizaYaz=0;
 8005092:	4b73      	ldr	r3, [pc, #460]	; (8005260 <mainTask+0x294>)
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
					  if(dilSecim==0){
 8005098:	4b74      	ldr	r3, [pc, #464]	; (800526c <mainTask+0x2a0>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <mainTask+0xde>
						  lcd_print(2,1,"Data yazildi    ");
 80050a0:	4a73      	ldr	r2, [pc, #460]	; (8005270 <mainTask+0x2a4>)
 80050a2:	2101      	movs	r1, #1
 80050a4:	2002      	movs	r0, #2
 80050a6:	f7fb f9a3 	bl	80003f0 <lcd_print>
					  }
					  if(dilSecim==1){
 80050aa:	4b70      	ldr	r3, [pc, #448]	; (800526c <mainTask+0x2a0>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d104      	bne.n	80050bc <mainTask+0xf0>
						  lcd_print(2,1,"Data Wrote      ");
 80050b2:	4a70      	ldr	r2, [pc, #448]	; (8005274 <mainTask+0x2a8>)
 80050b4:	2101      	movs	r1, #1
 80050b6:	2002      	movs	r0, #2
 80050b8:	f7fb f99a 	bl	80003f0 <lcd_print>
					  }
					  HAL_Delay(1000);
 80050bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050c0:	f002 fbcc 	bl	800785c <HAL_Delay>
					  lcd_clear();
 80050c4:	f7fb f9a9 	bl	800041a <lcd_clear>
				  }

				  if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)){
 80050c8:	4b6b      	ldr	r3, [pc, #428]	; (8005278 <mainTask+0x2ac>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d068      	beq.n	80051a8 <mainTask+0x1dc>
 80050d6:	4863      	ldr	r0, [pc, #396]	; (8005264 <mainTask+0x298>)
 80050d8:	f003 fe6a 	bl	8008db0 <HAL_I2C_GetState>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d162      	bne.n	80051a8 <mainTask+0x1dc>
					  if(ilkOkuma==0){
 80050e2:	4b66      	ldr	r3, [pc, #408]	; (800527c <mainTask+0x2b0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d042      	beq.n	8005176 <mainTask+0x1aa>
						  lcd_print(1,1,"   **EEPROM**   ");
 80050f0:	4a63      	ldr	r2, [pc, #396]	; (8005280 <mainTask+0x2b4>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fb f97b 	bl	80003f0 <lcd_print>
						  if(dilSecim==0){
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <mainTask+0x2a0>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <mainTask+0x140>
							  lcd_print(2,1,"Data Okunuyor...");
 8005102:	4a60      	ldr	r2, [pc, #384]	; (8005284 <mainTask+0x2b8>)
 8005104:	2101      	movs	r1, #1
 8005106:	2002      	movs	r0, #2
 8005108:	f7fb f972 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 800510c:	4b57      	ldr	r3, [pc, #348]	; (800526c <mainTask+0x2a0>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d104      	bne.n	800511e <mainTask+0x152>
							  lcd_print(2,1,"Data Reading... ");
 8005114:	4a5c      	ldr	r2, [pc, #368]	; (8005288 <mainTask+0x2bc>)
 8005116:	2101      	movs	r1, #1
 8005118:	2002      	movs	r0, #2
 800511a:	f7fb f969 	bl	80003f0 <lcd_print>
						  }
						  HAL_Delay(1000);
 800511e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005122:	f002 fb9b 	bl	800785c <HAL_Delay>
						  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005126:	bf00      	nop
 8005128:	484e      	ldr	r0, [pc, #312]	; (8005264 <mainTask+0x298>)
 800512a:	f003 fe4e 	bl	8008dca <HAL_I2C_GetError>
 800512e:	4603      	mov	r3, r0
 8005130:	2b04      	cmp	r3, #4
 8005132:	d0f9      	beq.n	8005128 <mainTask+0x15c>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 8005134:	e003      	b.n	800513e <mainTask+0x172>
							  HAL_Delay(1000);
 8005136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800513a:	f002 fb8f 	bl	800785c <HAL_Delay>
						  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){
 800513e:	4849      	ldr	r0, [pc, #292]	; (8005264 <mainTask+0x298>)
 8005140:	f003 fe36 	bl	8008db0 <HAL_I2C_GetState>
 8005144:	4603      	mov	r3, r0
 8005146:	2b20      	cmp	r3, #32
 8005148:	d1f5      	bne.n	8005136 <mainTask+0x16a>
						  }
						  if(dilSecim==0){
 800514a:	4b48      	ldr	r3, [pc, #288]	; (800526c <mainTask+0x2a0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <mainTask+0x190>
							  lcd_print(2,1,"Data Okundu.    ");
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <mainTask+0x2c0>)
 8005154:	2101      	movs	r1, #1
 8005156:	2002      	movs	r0, #2
 8005158:	f7fb f94a 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 800515c:	4b43      	ldr	r3, [pc, #268]	; (800526c <mainTask+0x2a0>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d104      	bne.n	800516e <mainTask+0x1a2>
							  lcd_print(2,1,"Data Read.      ");
 8005164:	4a4a      	ldr	r2, [pc, #296]	; (8005290 <mainTask+0x2c4>)
 8005166:	2101      	movs	r1, #1
 8005168:	2002      	movs	r0, #2
 800516a:	f7fb f941 	bl	80003f0 <lcd_print>
						  }
						  ilkOkuma=1;
 800516e:	4b43      	ldr	r3, [pc, #268]	; (800527c <mainTask+0x2b0>)
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e013      	b.n	800519e <mainTask+0x1d2>
					  }
					  else{
						  if(dilSecim==0){
 8005176:	4b3d      	ldr	r3, [pc, #244]	; (800526c <mainTask+0x2a0>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <mainTask+0x1bc>
							  lcd_print(2,1,"Deger Kaydedildi");
 800517e:	4a45      	ldr	r2, [pc, #276]	; (8005294 <mainTask+0x2c8>)
 8005180:	2101      	movs	r1, #1
 8005182:	2002      	movs	r0, #2
 8005184:	f7fb f934 	bl	80003f0 <lcd_print>
						  }
						  if(dilSecim==1){
 8005188:	4b38      	ldr	r3, [pc, #224]	; (800526c <mainTask+0x2a0>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d104      	bne.n	800519a <mainTask+0x1ce>
							  lcd_print(2,1,"Value Saved     ");
 8005190:	4a41      	ldr	r2, [pc, #260]	; (8005298 <mainTask+0x2cc>)
 8005192:	2101      	movs	r1, #1
 8005194:	2002      	movs	r0, #2
 8005196:	f7fb f92b 	bl	80003f0 <lcd_print>
						  }
						  lcd_clear();
 800519a:	f7fb f93e 	bl	800041a <lcd_clear>
					  }

					  eepromKontrol();
 800519e:	f7ff faad 	bl	80046fc <eepromKontrol>
					  hafizaOku=1;
 80051a2:	4b35      	ldr	r3, [pc, #212]	; (8005278 <mainTask+0x2ac>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
				  }

				  if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)){
 80051a8:	4b3c      	ldr	r3, [pc, #240]	; (800529c <mainTask+0x2d0>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11c      	bne.n	80051ea <mainTask+0x21e>
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <mainTask+0x2d4>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <mainTask+0x21e>
 80051be:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <mainTask+0x2d8>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d111      	bne.n	80051ea <mainTask+0x21e>
					  lcd_clear();
 80051c6:	f7fb f928 	bl	800041a <lcd_clear>
					  HAL_Delay(10);
 80051ca:	200a      	movs	r0, #10
 80051cc:	f002 fb46 	bl	800785c <HAL_Delay>
					  lcd_print(1, 1, "    ESP-RMK     ");
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <mainTask+0x2dc>)
 80051d2:	2101      	movs	r1, #1
 80051d4:	2001      	movs	r0, #1
 80051d6:	f7fb f90b 	bl	80003f0 <lcd_print>
					  lcd_print(2, 1, "      RUN       ");
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <mainTask+0x2e0>)
 80051dc:	2101      	movs	r1, #1
 80051de:	2002      	movs	r0, #2
 80051e0:	f7fb f906 	bl	80003f0 <lcd_print>
					  mesajYazildi=1;
 80051e4:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <mainTask+0x2d4>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
				  }

				  if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1))
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <mainTask+0x2d0>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d112      	bne.n	8005218 <mainTask+0x24c>
 80051f2:	2102      	movs	r1, #2
 80051f4:	4817      	ldr	r0, [pc, #92]	; (8005254 <mainTask+0x288>)
 80051f6:	f002 ffbf 	bl	8008178 <HAL_GPIO_ReadPin>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10b      	bne.n	8005218 <mainTask+0x24c>
 8005200:	2104      	movs	r1, #4
 8005202:	4814      	ldr	r0, [pc, #80]	; (8005254 <mainTask+0x288>)
 8005204:	f002 ffb8 	bl	8008178 <HAL_GPIO_ReadPin>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d104      	bne.n	8005218 <mainTask+0x24c>
				  {
					  menuGiris=1;
 800520e:	4b23      	ldr	r3, [pc, #140]	; (800529c <mainTask+0x2d0>)
 8005210:	2201      	movs	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8005214:	f7fb f901 	bl	800041a <lcd_clear>
				  }
				  if(menuGiris==1){
 8005218:	4b20      	ldr	r3, [pc, #128]	; (800529c <mainTask+0x2d0>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <mainTask+0x258>
					  menu();
 8005220:	f7fb f936 	bl	8000490 <menu>
				  }

				  HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005228:	480b      	ldr	r0, [pc, #44]	; (8005258 <mainTask+0x28c>)
 800522a:	f002 ffd4 	bl	80081d6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

				  if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0){
 800522e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005232:	481f      	ldr	r0, [pc, #124]	; (80052b0 <mainTask+0x2e4>)
 8005234:	f002 ffa0 	bl	8008178 <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d13e      	bne.n	80052bc <mainTask+0x2f0>
 800523e:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <mainTask+0x2e8>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f083 0301 	eor.w	r3, r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d037      	beq.n	80052bc <mainTask+0x2f0>

					  stopVar=1;
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <mainTask+0x2ec>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e036      	b.n	80052c2 <mainTask+0x2f6>
 8005254:	40010800 	.word	0x40010800
 8005258:	40011000 	.word	0x40011000
 800525c:	20000caa 	.word	0x20000caa
 8005260:	20000ca7 	.word	0x20000ca7
 8005264:	20000e3c 	.word	0x20000e3c
 8005268:	20000c14 	.word	0x20000c14
 800526c:	20000c9c 	.word	0x20000c9c
 8005270:	0800d520 	.word	0x0800d520
 8005274:	0800d534 	.word	0x0800d534
 8005278:	20000ca8 	.word	0x20000ca8
 800527c:	20000ca9 	.word	0x20000ca9
 8005280:	0800d548 	.word	0x0800d548
 8005284:	0800d55c 	.word	0x0800d55c
 8005288:	0800d570 	.word	0x0800d570
 800528c:	0800d584 	.word	0x0800d584
 8005290:	0800d598 	.word	0x0800d598
 8005294:	0800d5ac 	.word	0x0800d5ac
 8005298:	0800d5c0 	.word	0x0800d5c0
 800529c:	20000c99 	.word	0x20000c99
 80052a0:	20000caf 	.word	0x20000caf
 80052a4:	20000c9a 	.word	0x20000c9a
 80052a8:	0800d2d8 	.word	0x0800d2d8
 80052ac:	0800d2ec 	.word	0x0800d2ec
 80052b0:	40010c00 	.word	0x40010c00
 80052b4:	20000cd0 	.word	0x20000cd0
 80052b8:	20000ccd 	.word	0x20000ccd
				  }

				  else{
					  stopVar=0;
 80052bc:	4b70      	ldr	r3, [pc, #448]	; (8005480 <mainTask+0x4b4>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
				  }

		/****************************************  BASINC SALTERI ********************************************/
				  if(basincSalteri==0){
 80052c2:	4b70      	ldr	r3, [pc, #448]	; (8005484 <mainTask+0x4b8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <mainTask+0x304>
				 		basincVar=1;
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <mainTask+0x4bc>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
				 	}

					  if(basincSalteri==1)
 80052d0:	4b6c      	ldr	r3, [pc, #432]	; (8005484 <mainTask+0x4b8>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d119      	bne.n	800530c <mainTask+0x340>
					  {
						  if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0)
 80052d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052dc:	486b      	ldr	r0, [pc, #428]	; (800548c <mainTask+0x4c0>)
 80052de:	f002 ff4b 	bl	8008178 <HAL_GPIO_ReadPin>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <mainTask+0x332>
						  {
							  if(millis-timer5>=3){
 80052e8:	4b69      	ldr	r3, [pc, #420]	; (8005490 <mainTask+0x4c4>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b69      	ldr	r3, [pc, #420]	; (8005494 <mainTask+0x4c8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d90a      	bls.n	800530c <mainTask+0x340>
								  basincVar=1;
 80052f6:	4b64      	ldr	r3, [pc, #400]	; (8005488 <mainTask+0x4bc>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e006      	b.n	800530c <mainTask+0x340>
							  }
						  }
						  else
						 	{
							  timer5=millis;
 80052fe:	4b64      	ldr	r3, [pc, #400]	; (8005490 <mainTask+0x4c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a64      	ldr	r2, [pc, #400]	; (8005494 <mainTask+0x4c8>)
 8005304:	6013      	str	r3, [r2, #0]
						  	  basincVar=0;
 8005306:	4b60      	ldr	r3, [pc, #384]	; (8005488 <mainTask+0x4bc>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
						 	}
					  }

				  /******** Bas gönder ***********/

				  if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 800530c:	4b62      	ldr	r3, [pc, #392]	; (8005498 <mainTask+0x4cc>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10b      	bne.n	800532c <mainTask+0x360>
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <mainTask+0x4d0>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <mainTask+0x360>
 800531c:	4b60      	ldr	r3, [pc, #384]	; (80054a0 <mainTask+0x4d4>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <mainTask+0x360>

					  basgondercalisyukari=1;
 8005324:	4b5f      	ldr	r3, [pc, #380]	; (80054a4 <mainTask+0x4d8>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e009      	b.n	8005340 <mainTask+0x374>
				  }
				  else if(yukarimotorcalisiyor==0)
 800532c:	4b5b      	ldr	r3, [pc, #364]	; (800549c <mainTask+0x4d0>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f083 0301 	eor.w	r3, r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <mainTask+0x374>

					  basgondercalisyukari=0;
 800533a:	4b5a      	ldr	r3, [pc, #360]	; (80054a4 <mainTask+0x4d8>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]

				  if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)){
 8005340:	4b55      	ldr	r3, [pc, #340]	; (8005498 <mainTask+0x4cc>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10b      	bne.n	8005360 <mainTask+0x394>
 8005348:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <mainTask+0x4dc>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <mainTask+0x394>
 8005350:	4b53      	ldr	r3, [pc, #332]	; (80054a0 <mainTask+0x4d4>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <mainTask+0x394>

					  basgondercalisasagi=1;
 8005358:	4b54      	ldr	r3, [pc, #336]	; (80054ac <mainTask+0x4e0>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e009      	b.n	8005374 <mainTask+0x3a8>
				  }
				  else if(asagivalfcalisiyor==0)
 8005360:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <mainTask+0x4dc>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f083 0301 	eor.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <mainTask+0x3a8>
					  basgondercalisasagi=0;
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <mainTask+0x4e0>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]

				  /******** Kapı Secimleri ***********/

				  if(kapiSecimleri==0){
 8005374:	4b4e      	ldr	r3, [pc, #312]	; (80054b0 <mainTask+0x4e4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <mainTask+0x3b6>

					  kapiSivicVar=1;
 800537c:	4b4d      	ldr	r3, [pc, #308]	; (80054b4 <mainTask+0x4e8>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==1){
 8005382:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <mainTask+0x4e4>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10e      	bne.n	80053a8 <mainTask+0x3dc>

					  if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 800538a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800538e:	484a      	ldr	r0, [pc, #296]	; (80054b8 <mainTask+0x4ec>)
 8005390:	f002 fef2 	bl	8008178 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <mainTask+0x3d6>
						  kapiSivicVar=1;
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <mainTask+0x4e8>)
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e002      	b.n	80053a8 <mainTask+0x3dc>
					  else
						  kapiSivicVar=0;
 80053a2:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <mainTask+0x4e8>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==2){
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <mainTask+0x4e4>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d10e      	bne.n	80053ce <mainTask+0x402>

					  if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)
 80053b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b4:	4840      	ldr	r0, [pc, #256]	; (80054b8 <mainTask+0x4ec>)
 80053b6:	f002 fedf 	bl	8008178 <HAL_GPIO_ReadPin>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <mainTask+0x3fc>
						  kapiSivicVar=1;
 80053c0:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <mainTask+0x4e8>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e002      	b.n	80053ce <mainTask+0x402>
					  else
						  kapiSivicVar=0;
 80053c8:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <mainTask+0x4e8>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
				  }

				  if(kapiSecimleri==3){
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <mainTask+0x4e4>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d116      	bne.n	8005404 <mainTask+0x438>

					  if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0))
 80053d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053da:	4837      	ldr	r0, [pc, #220]	; (80054b8 <mainTask+0x4ec>)
 80053dc:	f002 fecc 	bl	8008178 <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <mainTask+0x432>
 80053e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053ea:	4833      	ldr	r0, [pc, #204]	; (80054b8 <mainTask+0x4ec>)
 80053ec:	f002 fec4 	bl	8008178 <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <mainTask+0x432>
						  kapiSivicVar=1;
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <mainTask+0x4e8>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e002      	b.n	8005404 <mainTask+0x438>
					  else
						  kapiSivicVar=0;
 80053fe:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <mainTask+0x4e8>)
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
				  }

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
				/*MOTOR CALISIYOR*/
				  if(demoMode==0 && menuGiris==0){
 8005404:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <mainTask+0x4f0>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f041 834e 	bne.w	8006aaa <mainTask+0x1ade>
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <mainTask+0x4f4>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f041 8349 	bne.w	8006aaa <mainTask+0x1ade>
				  if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar))
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <mainTask+0x4d0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11a      	bne.n	8005456 <mainTask+0x48a>
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <mainTask+0x4f8>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <mainTask+0x48a>
 8005428:	4b1f      	ldr	r3, [pc, #124]	; (80054a8 <mainTask+0x4dc>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <mainTask+0x47a>
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <mainTask+0x4fc>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <mainTask+0x47a>
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <mainTask+0x500>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d007      	beq.n	8005456 <mainTask+0x48a>
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <mainTask+0x504>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04a      	beq.n	80054e4 <mainTask+0x518>
 800544e:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <mainTask+0x508>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d146      	bne.n	80054e4 <mainTask+0x518>
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <mainTask+0x4b4>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d042      	beq.n	80054e4 <mainTask+0x518>
 800545e:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <mainTask+0x4e8>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03e      	beq.n	80054e4 <mainTask+0x518>

				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005466:	2201      	movs	r2, #1
 8005468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800546c:	481a      	ldr	r0, [pc, #104]	; (80054d8 <mainTask+0x50c>)
 800546e:	f002 fe9a 	bl	80081a6 <HAL_GPIO_WritePin>
					  motorcalisiyor=1;
 8005472:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <mainTask+0x510>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiYukari=1;
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <mainTask+0x514>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e03a      	b.n	80054f6 <mainTask+0x52a>
 8005480:	20000ccd 	.word	0x20000ccd
 8005484:	20000c83 	.word	0x20000c83
 8005488:	20000c7f 	.word	0x20000c7f
 800548c:	40011000 	.word	0x40011000
 8005490:	20000c5c 	.word	0x20000c5c
 8005494:	20000c74 	.word	0x20000c74
 8005498:	20000c7d 	.word	0x20000c7d
 800549c:	20000cb0 	.word	0x20000cb0
 80054a0:	20000c8b 	.word	0x20000c8b
 80054a4:	20000cb7 	.word	0x20000cb7
 80054a8:	20000cb3 	.word	0x20000cb3
 80054ac:	20000cb8 	.word	0x20000cb8
 80054b0:	20000c84 	.word	0x20000c84
 80054b4:	20000cce 	.word	0x20000cce
 80054b8:	40010800 	.word	0x40010800
 80054bc:	20000c9a 	.word	0x20000c9a
 80054c0:	20000c99 	.word	0x20000c99
 80054c4:	20000cb1 	.word	0x20000cb1
 80054c8:	20000cab 	.word	0x20000cab
 80054cc:	20000c8f 	.word	0x20000c8f
 80054d0:	20000cb2 	.word	0x20000cb2
 80054d4:	20000c8e 	.word	0x20000c8e
 80054d8:	40010c00 	.word	0x40010c00
 80054dc:	20000ccf 	.word	0x20000ccf
 80054e0:	20000cba 	.word	0x20000cba
				  }
				  else
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80054e4:	2200      	movs	r2, #0
 80054e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054ea:	4891      	ldr	r0, [pc, #580]	; (8005730 <mainTask+0x764>)
 80054ec:	f002 fe5b 	bl	80081a6 <HAL_GPIO_WritePin>
					  motorcalisiyor=0;
 80054f0:	4b90      	ldr	r3, [pc, #576]	; (8005734 <mainTask+0x768>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
				  }

				  /*YUKARI ÇALISMA*/


				  if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 80054f6:	4b90      	ldr	r3, [pc, #576]	; (8005738 <mainTask+0x76c>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d160      	bne.n	80055c0 <mainTask+0x5f4>
 80054fe:	4b8f      	ldr	r3, [pc, #572]	; (800573c <mainTask+0x770>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05c      	beq.n	80055c0 <mainTask+0x5f4>
 8005506:	4b8e      	ldr	r3, [pc, #568]	; (8005740 <mainTask+0x774>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d058      	beq.n	80055c0 <mainTask+0x5f4>
									&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800550e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005512:	4887      	ldr	r0, [pc, #540]	; (8005730 <mainTask+0x764>)
 8005514:	f002 fe30 	bl	8008178 <HAL_GPIO_ReadPin>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <mainTask+0x55a>
 800551e:	4b89      	ldr	r3, [pc, #548]	; (8005744 <mainTask+0x778>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d04c      	beq.n	80055c0 <mainTask+0x5f4>
									&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005526:	2102      	movs	r1, #2
 8005528:	4887      	ldr	r0, [pc, #540]	; (8005748 <mainTask+0x77c>)
 800552a:	f002 fe25 	bl	8008178 <HAL_GPIO_ReadPin>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d145      	bne.n	80055c0 <mainTask+0x5f4>
									&& (basincVar)
 8005534:	4b85      	ldr	r3, [pc, #532]	; (800574c <mainTask+0x780>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d041      	beq.n	80055c0 <mainTask+0x5f4>
									&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800553c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005540:	487b      	ldr	r0, [pc, #492]	; (8005730 <mainTask+0x764>)
 8005542:	f002 fe19 	bl	8008178 <HAL_GPIO_ReadPin>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10e      	bne.n	800556a <mainTask+0x59e>
									&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	4877      	ldr	r0, [pc, #476]	; (8005730 <mainTask+0x764>)
 8005552:	f002 fe11 	bl	8008178 <HAL_GPIO_ReadPin>
 8005556:	4603      	mov	r3, r0
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <mainTask+0x59e>
									&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800555c:	2140      	movs	r1, #64	; 0x40
 800555e:	487a      	ldr	r0, [pc, #488]	; (8005748 <mainTask+0x77c>)
 8005560:	f002 fe0a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005564:	4603      	mov	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <mainTask+0x5a6>
 800556a:	4b79      	ldr	r3, [pc, #484]	; (8005750 <mainTask+0x784>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d026      	beq.n	80055c0 <mainTask+0x5f4>
									&& (asagivalfcalisiyor==0)
 8005572:	4b78      	ldr	r3, [pc, #480]	; (8005754 <mainTask+0x788>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f083 0301 	eor.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01f      	beq.n	80055c0 <mainTask+0x5f4>
									&& (devmotoryukaricalisiyor==0)
 8005580:	4b75      	ldr	r3, [pc, #468]	; (8005758 <mainTask+0x78c>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f083 0301 	eor.w	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <mainTask+0x5f4>
									&& (devmotorasagicalisiyor==0)
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <mainTask+0x790>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d011      	beq.n	80055c0 <mainTask+0x5f4>
									&&(devyukarivalfcalisiyor==0)
 800559c:	4b70      	ldr	r3, [pc, #448]	; (8005760 <mainTask+0x794>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <mainTask+0x5f4>
									&&(devasagivalfcalisiyor==0))
 80055aa:	4b6e      	ldr	r3, [pc, #440]	; (8005764 <mainTask+0x798>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <mainTask+0x5f4>
				  {
					  yukarimotorcalisiyor=1;
 80055b8:	4b65      	ldr	r3, [pc, #404]	; (8005750 <mainTask+0x784>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e002      	b.n	80055c6 <mainTask+0x5fa>
				  }
				  else
				  {
					  yukarimotorcalisiyor=0;
 80055c0:	4b63      	ldr	r3, [pc, #396]	; (8005750 <mainTask+0x784>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
				  }

				  if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))){	/* ikinci hız */
 80055c6:	4b62      	ldr	r3, [pc, #392]	; (8005750 <mainTask+0x784>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d012      	beq.n	80055f4 <mainTask+0x628>
 80055ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055d2:	485d      	ldr	r0, [pc, #372]	; (8005748 <mainTask+0x77c>)
 80055d4:	f002 fdd0 	bl	8008178 <HAL_GPIO_ReadPin>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10a      	bne.n	80055f4 <mainTask+0x628>
 80055de:	4b62      	ldr	r3, [pc, #392]	; (8005768 <mainTask+0x79c>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d006      	beq.n	80055f4 <mainTask+0x628>

					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80055e6:	2201      	movs	r2, #1
 80055e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055ec:	4850      	ldr	r0, [pc, #320]	; (8005730 <mainTask+0x764>)
 80055ee:	f002 fdda 	bl	80081a6 <HAL_GPIO_WritePin>
 80055f2:	e005      	b.n	8005600 <mainTask+0x634>
				  }
				  else
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055fa:	484d      	ldr	r0, [pc, #308]	; (8005730 <mainTask+0x764>)
 80055fc:	f002 fdd3 	bl	80081a6 <HAL_GPIO_WritePin>

				  if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1))
 8005600:	4b53      	ldr	r3, [pc, #332]	; (8005750 <mainTask+0x784>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d013      	beq.n	8005630 <mainTask+0x664>
 8005608:	4b58      	ldr	r3, [pc, #352]	; (800576c <mainTask+0x7a0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d007      	beq.n	8005620 <mainTask+0x654>
 8005610:	4b56      	ldr	r3, [pc, #344]	; (800576c <mainTask+0x7a0>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d003      	beq.n	8005620 <mainTask+0x654>
 8005618:	4b55      	ldr	r3, [pc, #340]	; (8005770 <mainTask+0x7a4>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d107      	bne.n	8005630 <mainTask+0x664>

				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005620:	2201      	movs	r2, #1
 8005622:	2104      	movs	r1, #4
 8005624:	4842      	ldr	r0, [pc, #264]	; (8005730 <mainTask+0x764>)
 8005626:	f002 fdbe 	bl	80081a6 <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=1;
 800562a:	4b52      	ldr	r3, [pc, #328]	; (8005774 <mainTask+0x7a8>)
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]

				  }

				  // yukari valf timer calisması

				  if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)){
 8005630:	4b50      	ldr	r3, [pc, #320]	; (8005774 <mainTask+0x7a8>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d02f      	beq.n	8005698 <mainTask+0x6cc>
 8005638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800563c:	483c      	ldr	r0, [pc, #240]	; (8005730 <mainTask+0x764>)
 800563e:	f002 fd9b 	bl	8008178 <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <mainTask+0x68a>
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <mainTask+0x778>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <mainTask+0x698>
 8005656:	2102      	movs	r1, #2
 8005658:	483b      	ldr	r0, [pc, #236]	; (8005748 <mainTask+0x77c>)
 800565a:	f002 fd8d 	bl	8008178 <HAL_GPIO_ReadPin>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d119      	bne.n	8005698 <mainTask+0x6cc>
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <mainTask+0x770>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <mainTask+0x6cc>
 800566c:	4b34      	ldr	r3, [pc, #208]	; (8005740 <mainTask+0x774>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <mainTask+0x6cc>
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <mainTask+0x780>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <mainTask+0x6cc>
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <mainTask+0x7ac>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f083 0301 	eor.w	r3, r3, #1
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d006      	beq.n	8005698 <mainTask+0x6cc>

					  timer2=millis;
 800568a:	4b3c      	ldr	r3, [pc, #240]	; (800577c <mainTask+0x7b0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <mainTask+0x7b4>)
 8005690:	6013      	str	r3, [r2, #0]
					  butonKontrol3=1;
 8005692:	4b39      	ldr	r3, [pc, #228]	; (8005778 <mainTask+0x7ac>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0))))
 8005698:	4b38      	ldr	r3, [pc, #224]	; (800577c <mainTask+0x7b0>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b38      	ldr	r3, [pc, #224]	; (8005780 <mainTask+0x7b4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	4a38      	ldr	r2, [pc, #224]	; (8005784 <mainTask+0x7b8>)
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d303      	bcc.n	80056b2 <mainTask+0x6e6>
 80056aa:	4b33      	ldr	r3, [pc, #204]	; (8005778 <mainTask+0x7ac>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d111      	bne.n	80056d6 <mainTask+0x70a>
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <mainTask+0x770>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f083 0301 	eor.w	r3, r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <mainTask+0x70a>
 80056c0:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <mainTask+0x774>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f083 0301 	eor.w	r3, r3, #1
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <mainTask+0x70a>
 80056ce:	4b1f      	ldr	r3, [pc, #124]	; (800574c <mainTask+0x780>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <mainTask+0x720>
				  {
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80056d6:	2200      	movs	r2, #0
 80056d8:	2104      	movs	r1, #4
 80056da:	4815      	ldr	r0, [pc, #84]	; (8005730 <mainTask+0x764>)
 80056dc:	f002 fd63 	bl	80081a6 <HAL_GPIO_WritePin>
					  yukarivalfcalisiyor=0;
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <mainTask+0x7a8>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
					  butonKontrol3=0;
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <mainTask+0x7ac>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]

				  }

				  //Ond safety

				  if(emniyetCercevesi==0){
 80056ec:	4b26      	ldr	r3, [pc, #152]	; (8005788 <mainTask+0x7bc>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <mainTask+0x72e>

					  cerceveVar=1;
 80056f4:	4b25      	ldr	r3, [pc, #148]	; (800578c <mainTask+0x7c0>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
				  }

				  if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)){
 80056fa:	4b23      	ldr	r3, [pc, #140]	; (8005788 <mainTask+0x7bc>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d148      	bne.n	8005794 <mainTask+0x7c8>
 8005702:	4b23      	ldr	r3, [pc, #140]	; (8005790 <mainTask+0x7c4>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d144      	bne.n	8005794 <mainTask+0x7c8>
 800570a:	2101      	movs	r1, #1
 800570c:	480e      	ldr	r0, [pc, #56]	; (8005748 <mainTask+0x77c>)
 800570e:	f002 fd33 	bl	8008178 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13d      	bne.n	8005794 <mainTask+0x7c8>
 8005718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800571c:	4804      	ldr	r0, [pc, #16]	; (8005730 <mainTask+0x764>)
 800571e:	f002 fd2b 	bl	8008178 <HAL_GPIO_ReadPin>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d135      	bne.n	8005794 <mainTask+0x7c8>

					  cerceveVar=1;
 8005728:	4b18      	ldr	r3, [pc, #96]	; (800578c <mainTask+0x7c0>)
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e043      	b.n	80057b8 <mainTask+0x7ec>
 8005730:	40010c00 	.word	0x40010c00
 8005734:	20000ccf 	.word	0x20000ccf
 8005738:	20000c99 	.word	0x20000c99
 800573c:	20000ccd 	.word	0x20000ccd
 8005740:	20000cce 	.word	0x20000cce
 8005744:	20000cb7 	.word	0x20000cb7
 8005748:	40011000 	.word	0x40011000
 800574c:	20000c7f 	.word	0x20000c7f
 8005750:	20000cb0 	.word	0x20000cb0
 8005754:	20000cb3 	.word	0x20000cb3
 8005758:	20000cb1 	.word	0x20000cb1
 800575c:	20000cb2 	.word	0x20000cb2
 8005760:	20000cb5 	.word	0x20000cb5
 8005764:	20000cb6 	.word	0x20000cb6
 8005768:	20000c8a 	.word	0x20000c8a
 800576c:	20000c8b 	.word	0x20000c8b
 8005770:	20000c8f 	.word	0x20000c8f
 8005774:	20000cb4 	.word	0x20000cb4
 8005778:	20000cac 	.word	0x20000cac
 800577c:	20000c5c 	.word	0x20000c5c
 8005780:	20000c68 	.word	0x20000c68
 8005784:	20000c90 	.word	0x20000c90
 8005788:	20000c80 	.word	0x20000c80
 800578c:	20000cd2 	.word	0x20000cd2
 8005790:	20000c7d 	.word	0x20000c7d
				  }
				  else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)){
 8005794:	4b91      	ldr	r3, [pc, #580]	; (80059dc <mainTask+0xa10>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d10d      	bne.n	80057b8 <mainTask+0x7ec>
 800579c:	2101      	movs	r1, #1
 800579e:	4890      	ldr	r0, [pc, #576]	; (80059e0 <mainTask+0xa14>)
 80057a0:	f002 fcea 	bl	8008178 <HAL_GPIO_ReadPin>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d106      	bne.n	80057b8 <mainTask+0x7ec>
 80057aa:	4b8e      	ldr	r3, [pc, #568]	; (80059e4 <mainTask+0xa18>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <mainTask+0x7ec>

					  cerceveVar=0;
 80057b2:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <mainTask+0xa1c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
				  }

				  if (emniyetCercevesi==1 && calismaSekli==1){
 80057b8:	4b88      	ldr	r3, [pc, #544]	; (80059dc <mainTask+0xa10>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d111      	bne.n	80057e4 <mainTask+0x818>
 80057c0:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <mainTask+0xa18>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10d      	bne.n	80057e4 <mainTask+0x818>
					  if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0){
 80057c8:	2101      	movs	r1, #1
 80057ca:	4885      	ldr	r0, [pc, #532]	; (80059e0 <mainTask+0xa14>)
 80057cc:	f002 fcd4 	bl	8008178 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <mainTask+0x812>
						  cerceveVar=1;
 80057d6:	4b84      	ldr	r3, [pc, #528]	; (80059e8 <mainTask+0xa1c>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e002      	b.n	80057e4 <mainTask+0x818>
					  }
					  else{
						  cerceveVar=0;
 80057de:	4b82      	ldr	r3, [pc, #520]	; (80059e8 <mainTask+0xa1c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
					  }
				  }

				  //Asagi calisma

				  if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <mainTask+0xa20>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d17c      	bne.n	80058e6 <mainTask+0x91a>
 80057ec:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <mainTask+0xa24>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d078      	beq.n	80058e6 <mainTask+0x91a>
 80057f4:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <mainTask+0xa28>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d074      	beq.n	80058e6 <mainTask+0x91a>
								   && ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80057fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005800:	487d      	ldr	r0, [pc, #500]	; (80059f8 <mainTask+0xa2c>)
 8005802:	f002 fcb9 	bl	8008178 <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <mainTask+0x848>
 800580c:	4b7b      	ldr	r3, [pc, #492]	; (80059fc <mainTask+0xa30>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d068      	beq.n	80058e6 <mainTask+0x91a>
								   && (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005814:	4b74      	ldr	r3, [pc, #464]	; (80059e8 <mainTask+0xa1c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d064      	beq.n	80058e6 <mainTask+0x91a>
 800581c:	4b78      	ldr	r3, [pc, #480]	; (8005a00 <mainTask+0xa34>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f083 0301 	eor.w	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d05d      	beq.n	80058e6 <mainTask+0x91a>
								   && ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800582a:	2104      	movs	r1, #4
 800582c:	486c      	ldr	r0, [pc, #432]	; (80059e0 <mainTask+0xa14>)
 800582e:	f002 fca3 	bl	8008178 <HAL_GPIO_ReadPin>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <mainTask+0x874>
 8005838:	4b72      	ldr	r3, [pc, #456]	; (8005a04 <mainTask+0xa38>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d152      	bne.n	80058e6 <mainTask+0x91a>
								   && (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005844:	486c      	ldr	r0, [pc, #432]	; (80059f8 <mainTask+0xa2c>)
 8005846:	f002 fc97 	bl	8008178 <HAL_GPIO_ReadPin>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10e      	bne.n	800586e <mainTask+0x8a2>
								   && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005854:	4868      	ldr	r0, [pc, #416]	; (80059f8 <mainTask+0xa2c>)
 8005856:	f002 fc8f 	bl	8008178 <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <mainTask+0x8a2>
								   && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	485f      	ldr	r0, [pc, #380]	; (80059e0 <mainTask+0xa14>)
 8005864:	f002 fc88 	bl	8008178 <HAL_GPIO_ReadPin>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d003      	beq.n	8005876 <mainTask+0x8aa>
 800586e:	4b66      	ldr	r3, [pc, #408]	; (8005a08 <mainTask+0xa3c>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d037      	beq.n	80058e6 <mainTask+0x91a>
								   && (yukarimotorcalisiyor==0)
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <mainTask+0xa40>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f083 0301 	eor.w	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d030      	beq.n	80058e6 <mainTask+0x91a>
								   && (yukarivalfcalisiyor==0)
 8005884:	4b62      	ldr	r3, [pc, #392]	; (8005a10 <mainTask+0xa44>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f083 0301 	eor.w	r3, r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d029      	beq.n	80058e6 <mainTask+0x91a>
					  	  	  	   && (devmotoryukaricalisiyor==0)
 8005892:	4b60      	ldr	r3, [pc, #384]	; (8005a14 <mainTask+0xa48>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f083 0301 	eor.w	r3, r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d022      	beq.n	80058e6 <mainTask+0x91a>
					  			   && (devmotorasagicalisiyor==0)
 80058a0:	4b5d      	ldr	r3, [pc, #372]	; (8005a18 <mainTask+0xa4c>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f083 0301 	eor.w	r3, r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01b      	beq.n	80058e6 <mainTask+0x91a>
								   && (devyukarivalfcalisiyor==0)
 80058ae:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <mainTask+0xa50>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d014      	beq.n	80058e6 <mainTask+0x91a>
								   && (devasagivalfcalisiyor==0))
 80058bc:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <mainTask+0xa54>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f083 0301 	eor.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <mainTask+0x91a>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80058ca:	2201      	movs	r2, #1
 80058cc:	2102      	movs	r1, #2
 80058ce:	484a      	ldr	r0, [pc, #296]	; (80059f8 <mainTask+0xa2c>)
 80058d0:	f002 fc69 	bl	80081a6 <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=1;
 80058d4:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <mainTask+0xa3c>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
					  CalismaSayisiAsagi=1;
 80058da:	4b52      	ldr	r3, [pc, #328]	; (8005a24 <mainTask+0xa58>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
					  cercevesasagicalisma=1;
 80058e0:	4b51      	ldr	r3, [pc, #324]	; (8005a28 <mainTask+0xa5c>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
				  }

				  // asagi valf timer calisması

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)){
 80058e6:	4b48      	ldr	r3, [pc, #288]	; (8005a08 <mainTask+0xa3c>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d033      	beq.n	8005956 <mainTask+0x98a>
 80058ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f2:	4841      	ldr	r0, [pc, #260]	; (80059f8 <mainTask+0xa2c>)
 80058f4:	f002 fc40 	bl	8008178 <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d106      	bne.n	800590c <mainTask+0x940>
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <mainTask+0xa30>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f083 0301 	eor.w	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <mainTask+0x956>
 800590c:	2104      	movs	r1, #4
 800590e:	4834      	ldr	r0, [pc, #208]	; (80059e0 <mainTask+0xa14>)
 8005910:	f002 fc32 	bl	8008178 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b01      	cmp	r3, #1
 8005918:	d11d      	bne.n	8005956 <mainTask+0x98a>
 800591a:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <mainTask+0xa38>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d019      	beq.n	8005956 <mainTask+0x98a>
 8005922:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <mainTask+0xa24>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d015      	beq.n	8005956 <mainTask+0x98a>
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <mainTask+0xa28>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <mainTask+0x98a>
 8005932:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <mainTask+0xa1c>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <mainTask+0x98a>
 800593a:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <mainTask+0xa60>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f083 0301 	eor.w	r3, r3, #1
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <mainTask+0x98a>

					  timer2=millis;
 8005948:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <mainTask+0xa64>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a39      	ldr	r2, [pc, #228]	; (8005a34 <mainTask+0xa68>)
 800594e:	6013      	str	r3, [r2, #0]
					  butonKontrol2=1;
 8005950:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <mainTask+0xa60>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0))))
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <mainTask+0xa64>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <mainTask+0xa68>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	4a35      	ldr	r2, [pc, #212]	; (8005a38 <mainTask+0xa6c>)
 8005962:	7812      	ldrb	r2, [r2, #0]
 8005964:	4293      	cmp	r3, r2
 8005966:	d303      	bcc.n	8005970 <mainTask+0x9a4>
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <mainTask+0xa60>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d114      	bne.n	800599a <mainTask+0x9ce>
 8005970:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <mainTask+0xa24>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <mainTask+0x9ce>
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <mainTask+0xa28>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f083 0301 	eor.w	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <mainTask+0x9ce>
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <mainTask+0xa1c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <mainTask+0x9e4>
				  {
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800599a:	2200      	movs	r2, #0
 800599c:	2102      	movs	r1, #2
 800599e:	4816      	ldr	r0, [pc, #88]	; (80059f8 <mainTask+0xa2c>)
 80059a0:	f002 fc01 	bl	80081a6 <HAL_GPIO_WritePin>
					  asagivalfcalisiyor=0;
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <mainTask+0xa3c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
					  butonKontrol2=0;
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <mainTask+0xa60>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]

				  }

				  //yavaslama valf

				  if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))){	/* ikinci hız */
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <mainTask+0xa3c>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d043      	beq.n	8005a40 <mainTask+0xa74>
 80059b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059bc:	4808      	ldr	r0, [pc, #32]	; (80059e0 <mainTask+0xa14>)
 80059be:	f002 fbdb 	bl	8008178 <HAL_GPIO_ReadPin>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d13b      	bne.n	8005a40 <mainTask+0xa74>
 80059c8:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <mainTask+0xa70>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d037      	beq.n	8005a40 <mainTask+0xa74>

					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059d0:	2201      	movs	r2, #1
 80059d2:	2101      	movs	r1, #1
 80059d4:	4808      	ldr	r0, [pc, #32]	; (80059f8 <mainTask+0xa2c>)
 80059d6:	f002 fbe6 	bl	80081a6 <HAL_GPIO_WritePin>
 80059da:	e036      	b.n	8005a4a <mainTask+0xa7e>
 80059dc:	20000c80 	.word	0x20000c80
 80059e0:	40011000 	.word	0x40011000
 80059e4:	20000c7d 	.word	0x20000c7d
 80059e8:	20000cd2 	.word	0x20000cd2
 80059ec:	20000c99 	.word	0x20000c99
 80059f0:	20000ccd 	.word	0x20000ccd
 80059f4:	20000cce 	.word	0x20000cce
 80059f8:	40010c00 	.word	0x40010c00
 80059fc:	20000cb8 	.word	0x20000cb8
 8005a00:	20000ccc 	.word	0x20000ccc
 8005a04:	20000c82 	.word	0x20000c82
 8005a08:	20000cb3 	.word	0x20000cb3
 8005a0c:	20000cb0 	.word	0x20000cb0
 8005a10:	20000cb4 	.word	0x20000cb4
 8005a14:	20000cb1 	.word	0x20000cb1
 8005a18:	20000cb2 	.word	0x20000cb2
 8005a1c:	20000cb5 	.word	0x20000cb5
 8005a20:	20000cb6 	.word	0x20000cb6
 8005a24:	20000cbb 	.word	0x20000cbb
 8005a28:	20000cdc 	.word	0x20000cdc
 8005a2c:	20000cab 	.word	0x20000cab
 8005a30:	20000c5c 	.word	0x20000c5c
 8005a34:	20000c68 	.word	0x20000c68
 8005a38:	20000c91 	.word	0x20000c91
 8005a3c:	20000c81 	.word	0x20000c81
				  }
				  else
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a40:	2200      	movs	r2, #0
 8005a42:	2101      	movs	r1, #1
 8005a44:	4836      	ldr	r0, [pc, #216]	; (8005b20 <mainTask+0xb54>)
 8005a46:	f002 fbae 	bl	80081a6 <HAL_GPIO_WritePin>

				  /*DEVIRME veya YURUYUS Baslangic*/

				  // Devirme Yukari veya yuruyus ileri calisma
				  if((menuGiris==0)
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <mainTask+0xb58>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8080 	bne.w	8005b54 <mainTask+0xb88>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005a54:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <mainTask+0xb5c>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d003      	beq.n	8005a64 <mainTask+0xa98>
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <mainTask+0xb5c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d177      	bne.n	8005b54 <mainTask+0xb88>
						  && (stopVar) && (kapiSivicVar)
 8005a64:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <mainTask+0xb60>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d073      	beq.n	8005b54 <mainTask+0xb88>
 8005a6c:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <mainTask+0xb64>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d06f      	beq.n	8005b54 <mainTask+0xb88>
						  && (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a78:	4829      	ldr	r0, [pc, #164]	; (8005b20 <mainTask+0xb54>)
 8005a7a:	f002 fb7d 	bl	8008178 <HAL_GPIO_ReadPin>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d167      	bne.n	8005b54 <mainTask+0xb88>
						  && ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a88:	482a      	ldr	r0, [pc, #168]	; (8005b34 <mainTask+0xb68>)
 8005a8a:	f002 fb75 	bl	8008178 <HAL_GPIO_ReadPin>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <mainTask+0xad0>
 8005a94:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <mainTask+0xb6c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d15b      	bne.n	8005b54 <mainTask+0xb88>
						  && (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005a9c:	2140      	movs	r1, #64	; 0x40
 8005a9e:	4825      	ldr	r0, [pc, #148]	; (8005b34 <mainTask+0xb68>)
 8005aa0:	f002 fb6a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10f      	bne.n	8005aca <mainTask+0xafe>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aae:	481c      	ldr	r0, [pc, #112]	; (8005b20 <mainTask+0xb54>)
 8005ab0:	f002 fb62 	bl	8008178 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <mainTask+0xafe>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005abe:	4818      	ldr	r0, [pc, #96]	; (8005b20 <mainTask+0xb54>)
 8005ac0:	f002 fb5a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d003      	beq.n	8005ad2 <mainTask+0xb06>
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <mainTask+0xb70>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d040      	beq.n	8005b54 <mainTask+0xb88>
						  && (yukarimotorcalisiyor==0)
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <mainTask+0xb74>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	f083 0301 	eor.w	r3, r3, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d039      	beq.n	8005b54 <mainTask+0xb88>
						  && (yukarivalfcalisiyor==0)
 8005ae0:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <mainTask+0xb78>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d032      	beq.n	8005b54 <mainTask+0xb88>
						  && (asagivalfcalisiyor==0)
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <mainTask+0xb7c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f083 0301 	eor.w	r3, r3, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02b      	beq.n	8005b54 <mainTask+0xb88>
						  && (devmotorasagicalisiyor==0)
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <mainTask+0xb80>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f083 0301 	eor.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d024      	beq.n	8005b54 <mainTask+0xb88>
						  &&(devasagivalfcalisiyor==0))
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <mainTask+0xb84>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f083 0301 	eor.w	r3, r3, #1
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01d      	beq.n	8005b54 <mainTask+0xb88>

				  {
					  devmotoryukaricalisiyor=1;
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <mainTask+0xb70>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e01c      	b.n	8005b5a <mainTask+0xb8e>
 8005b20:	40010c00 	.word	0x40010c00
 8005b24:	20000c99 	.word	0x20000c99
 8005b28:	20000c8b 	.word	0x20000c8b
 8005b2c:	20000ccd 	.word	0x20000ccd
 8005b30:	20000cce 	.word	0x20000cce
 8005b34:	40011000 	.word	0x40011000
 8005b38:	20000c8c 	.word	0x20000c8c
 8005b3c:	20000cb1 	.word	0x20000cb1
 8005b40:	20000cb0 	.word	0x20000cb0
 8005b44:	20000cb4 	.word	0x20000cb4
 8005b48:	20000cb3 	.word	0x20000cb3
 8005b4c:	20000cb2 	.word	0x20000cb2
 8005b50:	20000cb6 	.word	0x20000cb6
				  }

				  else
					  devmotoryukaricalisiyor=0;
 8005b54:	4b64      	ldr	r3, [pc, #400]	; (8005ce8 <mainTask+0xd1c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]

				  if(devmotoryukaricalisiyor==1){
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <mainTask+0xd1c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <mainTask+0xba6>

					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	2120      	movs	r1, #32
 8005b66:	4861      	ldr	r0, [pc, #388]	; (8005cec <mainTask+0xd20>)
 8005b68:	f002 fb1d 	bl	80081a6 <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=1;
 8005b6c:	4b60      	ldr	r3, [pc, #384]	; (8005cf0 <mainTask+0xd24>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]

				  }
				  // devirme yukari + yuruyus ileri valf timer calismasi

				  if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)){
 8005b72:	4b5f      	ldr	r3, [pc, #380]	; (8005cf0 <mainTask+0xd24>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d025      	beq.n	8005bc6 <mainTask+0xbfa>
 8005b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b7e:	485d      	ldr	r0, [pc, #372]	; (8005cf4 <mainTask+0xd28>)
 8005b80:	f002 fafa 	bl	8008178 <HAL_GPIO_ReadPin>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d007      	beq.n	8005b9a <mainTask+0xbce>
 8005b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b8e:	4857      	ldr	r0, [pc, #348]	; (8005cec <mainTask+0xd20>)
 8005b90:	f002 faf2 	bl	8008178 <HAL_GPIO_ReadPin>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d115      	bne.n	8005bc6 <mainTask+0xbfa>
 8005b9a:	4b57      	ldr	r3, [pc, #348]	; (8005cf8 <mainTask+0xd2c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d011      	beq.n	8005bc6 <mainTask+0xbfa>
 8005ba2:	4b56      	ldr	r3, [pc, #344]	; (8005cfc <mainTask+0xd30>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <mainTask+0xbfa>
 8005baa:	4b55      	ldr	r3, [pc, #340]	; (8005d00 <mainTask+0xd34>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <mainTask+0xbfa>

					  timer2=millis;
 8005bb8:	4b52      	ldr	r3, [pc, #328]	; (8005d04 <mainTask+0xd38>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a52      	ldr	r2, [pc, #328]	; (8005d08 <mainTask+0xd3c>)
 8005bbe:	6013      	str	r3, [r2, #0]
					  butonKontrol4=1;
 8005bc0:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <mainTask+0xd34>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	; (8005d04 <mainTask+0xd38>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b4f      	ldr	r3, [pc, #316]	; (8005d08 <mainTask+0xd3c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	4a4e      	ldr	r2, [pc, #312]	; (8005d0c <mainTask+0xd40>)
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d303      	bcc.n	8005be0 <mainTask+0xc14>
 8005bd8:	4b49      	ldr	r3, [pc, #292]	; (8005d00 <mainTask+0xd34>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <mainTask+0xc30>
 8005be0:	4b45      	ldr	r3, [pc, #276]	; (8005cf8 <mainTask+0xd2c>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f083 0301 	eor.w	r3, r3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <mainTask+0xc30>
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <mainTask+0xd30>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f083 0301 	eor.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <mainTask+0xc46>
				  {
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2120      	movs	r1, #32
 8005c00:	483a      	ldr	r0, [pc, #232]	; (8005cec <mainTask+0xd20>)
 8005c02:	f002 fad0 	bl	80081a6 <HAL_GPIO_WritePin>
					  devyukarivalfcalisiyor=0;
 8005c06:	4b3a      	ldr	r3, [pc, #232]	; (8005cf0 <mainTask+0xd24>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
					  butonKontrol4=0;
 8005c0c:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <mainTask+0xd34>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]

				  }

				  // Devirme Asagi veya yuruyus geri calisma

				  if((menuGiris==0)
 8005c12:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <mainTask+0xd44>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8088 	bne.w	8005d2c <mainTask+0xd60>
						  && ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c1c:	4b3d      	ldr	r3, [pc, #244]	; (8005d14 <mainTask+0xd48>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d003      	beq.n	8005c2c <mainTask+0xc60>
 8005c24:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <mainTask+0xd48>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d17f      	bne.n	8005d2c <mainTask+0xd60>
						  && (stopVar) && (kapiSivicVar)
 8005c2c:	4b32      	ldr	r3, [pc, #200]	; (8005cf8 <mainTask+0xd2c>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d07b      	beq.n	8005d2c <mainTask+0xd60>
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <mainTask+0xd30>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d077      	beq.n	8005d2c <mainTask+0xd60>
						  && (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005c3c:	2140      	movs	r1, #64	; 0x40
 8005c3e:	482b      	ldr	r0, [pc, #172]	; (8005cec <mainTask+0xd20>)
 8005c40:	f002 fa9a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d170      	bne.n	8005d2c <mainTask+0xd60>
						  && ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c4e:	4827      	ldr	r0, [pc, #156]	; (8005cec <mainTask+0xd20>)
 8005c50:	f002 fa92 	bl	8008178 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <mainTask+0xc96>
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <mainTask+0xd4c>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d164      	bne.n	8005d2c <mainTask+0xd60>
						  && (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c66:	4823      	ldr	r0, [pc, #140]	; (8005cf4 <mainTask+0xd28>)
 8005c68:	f002 fa86 	bl	8008178 <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10f      	bne.n	8005c92 <mainTask+0xcc6>
						  && (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c76:	481f      	ldr	r0, [pc, #124]	; (8005cf4 <mainTask+0xd28>)
 8005c78:	f002 fa7e 	bl	8008178 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <mainTask+0xcc6>
						  && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c86:	481b      	ldr	r0, [pc, #108]	; (8005cf4 <mainTask+0xd28>)
 8005c88:	f002 fa76 	bl	8008178 <HAL_GPIO_ReadPin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d003      	beq.n	8005c9a <mainTask+0xcce>
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <mainTask+0xd50>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d048      	beq.n	8005d2c <mainTask+0xd60>
						  && (yukarimotorcalisiyor==0)
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <mainTask+0xd54>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f083 0301 	eor.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d041      	beq.n	8005d2c <mainTask+0xd60>
						  && (yukarivalfcalisiyor==0)
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <mainTask+0xd58>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f083 0301 	eor.w	r3, r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d03a      	beq.n	8005d2c <mainTask+0xd60>
						  && (asagivalfcalisiyor==0)
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <mainTask+0xd5c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f083 0301 	eor.w	r3, r3, #1
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d033      	beq.n	8005d2c <mainTask+0xd60>
						  && (devyukarivalfcalisiyor==0)
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <mainTask+0xd24>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02c      	beq.n	8005d2c <mainTask+0xd60>
						  && (devmotoryukaricalisiyor==0))
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <mainTask+0xd1c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f083 0301 	eor.w	r3, r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d025      	beq.n	8005d2c <mainTask+0xd60>

				  {
					   devmotorasagicalisiyor=1;
 8005ce0:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <mainTask+0xd50>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e024      	b.n	8005d32 <mainTask+0xd66>
 8005ce8:	20000cb1 	.word	0x20000cb1
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	20000cb5 	.word	0x20000cb5
 8005cf4:	40010c00 	.word	0x40010c00
 8005cf8:	20000ccd 	.word	0x20000ccd
 8005cfc:	20000cce 	.word	0x20000cce
 8005d00:	20000cad 	.word	0x20000cad
 8005d04:	20000c5c 	.word	0x20000c5c
 8005d08:	20000c68 	.word	0x20000c68
 8005d0c:	20000c92 	.word	0x20000c92
 8005d10:	20000c99 	.word	0x20000c99
 8005d14:	20000c8b 	.word	0x20000c8b
 8005d18:	20000c8d 	.word	0x20000c8d
 8005d1c:	20000cb2 	.word	0x20000cb2
 8005d20:	20000cb0 	.word	0x20000cb0
 8005d24:	20000cb4 	.word	0x20000cb4
 8005d28:	20000cb3 	.word	0x20000cb3
				  }

				  else
				  {
					 devmotorasagicalisiyor=0;
 8005d2c:	4b96      	ldr	r3, [pc, #600]	; (8005f88 <mainTask+0xfbc>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
				  }

				  if(devmotorasagicalisiyor==1)
 8005d32:	4b95      	ldr	r3, [pc, #596]	; (8005f88 <mainTask+0xfbc>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <mainTask+0xd7e>
				  {
					   HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	4893      	ldr	r0, [pc, #588]	; (8005f8c <mainTask+0xfc0>)
 8005d40:	f002 fa31 	bl	80081a6 <HAL_GPIO_WritePin>
					   devasagivalfcalisiyor=1;
 8005d44:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <mainTask+0xfc4>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
				  }

				  //devirme asagi + geri valf timer calismasi

				  if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)){
 8005d4a:	4b91      	ldr	r3, [pc, #580]	; (8005f90 <mainTask+0xfc4>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d024      	beq.n	8005d9c <mainTask+0xdd0>
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	488d      	ldr	r0, [pc, #564]	; (8005f8c <mainTask+0xfc0>)
 8005d56:	f002 fa0f 	bl	8008178 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d007      	beq.n	8005d70 <mainTask+0xda4>
 8005d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d64:	4889      	ldr	r0, [pc, #548]	; (8005f8c <mainTask+0xfc0>)
 8005d66:	f002 fa07 	bl	8008178 <HAL_GPIO_ReadPin>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d115      	bne.n	8005d9c <mainTask+0xdd0>
 8005d70:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <mainTask+0xfc8>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d011      	beq.n	8005d9c <mainTask+0xdd0>
 8005d78:	4b87      	ldr	r3, [pc, #540]	; (8005f98 <mainTask+0xfcc>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <mainTask+0xdd0>
 8005d80:	4b86      	ldr	r3, [pc, #536]	; (8005f9c <mainTask+0xfd0>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f083 0301 	eor.w	r3, r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <mainTask+0xdd0>

					  timer2=millis;
 8005d8e:	4b84      	ldr	r3, [pc, #528]	; (8005fa0 <mainTask+0xfd4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a84      	ldr	r2, [pc, #528]	; (8005fa4 <mainTask+0xfd8>)
 8005d94:	6013      	str	r3, [r2, #0]
					  butonKontrol5=1;
 8005d96:	4b81      	ldr	r3, [pc, #516]	; (8005f9c <mainTask+0xfd0>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
				  }

				  if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0))))
 8005d9c:	4b80      	ldr	r3, [pc, #512]	; (8005fa0 <mainTask+0xfd4>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b80      	ldr	r3, [pc, #512]	; (8005fa4 <mainTask+0xfd8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	4a80      	ldr	r2, [pc, #512]	; (8005fa8 <mainTask+0xfdc>)
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d303      	bcc.n	8005db6 <mainTask+0xdea>
 8005dae:	4b7b      	ldr	r3, [pc, #492]	; (8005f9c <mainTask+0xfd0>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10d      	bne.n	8005dd2 <mainTask+0xe06>
 8005db6:	4b77      	ldr	r3, [pc, #476]	; (8005f94 <mainTask+0xfc8>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <mainTask+0xe06>
 8005dc4:	4b74      	ldr	r3, [pc, #464]	; (8005f98 <mainTask+0xfcc>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <mainTask+0xe1c>
				  {
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2110      	movs	r1, #16
 8005dd6:	486d      	ldr	r0, [pc, #436]	; (8005f8c <mainTask+0xfc0>)
 8005dd8:	f002 f9e5 	bl	80081a6 <HAL_GPIO_WritePin>
					  devasagivalfcalisiyor=0;
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	; (8005f90 <mainTask+0xfc4>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
					  butonKontrol5=0;
 8005de2:	4b6e      	ldr	r3, [pc, #440]	; (8005f9c <mainTask+0xfd0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]

				  }

				  // makine durum kontrolü

				  if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dec:	486f      	ldr	r0, [pc, #444]	; (8005fac <mainTask+0xfe0>)
 8005dee:	f002 f9c3 	bl	8008178 <HAL_GPIO_ReadPin>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d120      	bne.n	8005e3a <mainTask+0xe6e>
						  &&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dfc:	486b      	ldr	r0, [pc, #428]	; (8005fac <mainTask+0xfe0>)
 8005dfe:	f002 f9bb 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d118      	bne.n	8005e3a <mainTask+0xe6e>
						  &&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005e08:	2104      	movs	r1, #4
 8005e0a:	4868      	ldr	r0, [pc, #416]	; (8005fac <mainTask+0xfe0>)
 8005e0c:	f002 f9b4 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d111      	bne.n	8005e3a <mainTask+0xe6e>
						  &&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005e16:	2102      	movs	r1, #2
 8005e18:	4864      	ldr	r0, [pc, #400]	; (8005fac <mainTask+0xfe0>)
 8005e1a:	f002 f9ad 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <mainTask+0xe6e>
						  &&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0))
 8005e24:	2101      	movs	r1, #1
 8005e26:	4861      	ldr	r0, [pc, #388]	; (8005fac <mainTask+0xfe0>)
 8005e28:	f002 f9a6 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <mainTask+0xe6e>

					  makineStop=1;
 8005e32:	4b5f      	ldr	r3, [pc, #380]	; (8005fb0 <mainTask+0xfe4>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e002      	b.n	8005e40 <mainTask+0xe74>
				  else
					  makineStop=0;
 8005e3a:	4b5d      	ldr	r3, [pc, #372]	; (8005fb0 <mainTask+0xfe4>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	701a      	strb	r2, [r3, #0]

				  //kapi 1 kontrol

				  // kapi 1 prudhome

				  if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e40:	4b5c      	ldr	r3, [pc, #368]	; (8005fb4 <mainTask+0xfe8>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d144      	bne.n	8005ed2 <mainTask+0xf06>
 8005e48:	4b5b      	ldr	r3, [pc, #364]	; (8005fb8 <mainTask+0xfec>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d003      	beq.n	8005e58 <mainTask+0xe8c>
 8005e50:	4b59      	ldr	r3, [pc, #356]	; (8005fb8 <mainTask+0xfec>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d13c      	bne.n	8005ed2 <mainTask+0xf06>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005e58:	2180      	movs	r1, #128	; 0x80
 8005e5a:	484c      	ldr	r0, [pc, #304]	; (8005f8c <mainTask+0xfc0>)
 8005e5c:	f002 f98c 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <mainTask+0xea2>
 8005e66:	4b55      	ldr	r3, [pc, #340]	; (8005fbc <mainTask+0xff0>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <mainTask+0xeba>
 8005e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e72:	484e      	ldr	r0, [pc, #312]	; (8005fac <mainTask+0xfe0>)
 8005e74:	f002 f980 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d129      	bne.n	8005ed2 <mainTask+0xf06>
 8005e7e:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <mainTask+0xff0>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d125      	bne.n	8005ed2 <mainTask+0xf06>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e86:	2104      	movs	r1, #4
 8005e88:	4840      	ldr	r0, [pc, #256]	; (8005f8c <mainTask+0xfc0>)
 8005e8a:	f002 f975 	bl	8008178 <HAL_GPIO_ReadPin>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d003      	beq.n	8005e9c <mainTask+0xed0>
 8005e94:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <mainTask+0xff4>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11a      	bne.n	8005ed2 <mainTask+0xf06>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	483b      	ldr	r0, [pc, #236]	; (8005f8c <mainTask+0xfc0>)
 8005ea0:	f002 f96a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d113      	bne.n	8005ed2 <mainTask+0xf06>
						  &&(butonKontrol==0)
 8005eaa:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <mainTask+0xff8>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	f083 0301 	eor.w	r3, r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00c      	beq.n	8005ed2 <mainTask+0xf06>
						  &&(makineStop==1))
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <mainTask+0xfe4>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <mainTask+0xf06>
				  {

					  kapi1prudhome=1;
 8005ec0:	4b41      	ldr	r3, [pc, #260]	; (8005fc8 <mainTask+0xffc>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 8005ec6:	4b36      	ldr	r3, [pc, #216]	; (8005fa0 <mainTask+0xfd4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a40      	ldr	r2, [pc, #256]	; (8005fcc <mainTask+0x1000>)
 8005ecc:	6013      	str	r3, [r2, #0]
					  bekle();
 8005ece:	f7fe fa43 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0))
 8005ed2:	4b33      	ldr	r3, [pc, #204]	; (8005fa0 <mainTask+0xfd4>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b3d      	ldr	r3, [pc, #244]	; (8005fcc <mainTask+0x1000>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	4a3c      	ldr	r2, [pc, #240]	; (8005fd0 <mainTask+0x1004>)
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d211      	bcs.n	8005f08 <mainTask+0xf3c>
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	4829      	ldr	r0, [pc, #164]	; (8005f8c <mainTask+0xfc0>)
 8005ee8:	f002 f946 	bl	8008178 <HAL_GPIO_ReadPin>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <mainTask+0xf3c>
 8005ef2:	4b33      	ldr	r3, [pc, #204]	; (8005fc0 <mainTask+0xff4>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d006      	beq.n	8005f08 <mainTask+0xf3c>
 8005efa:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <mainTask+0xfe4>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f083 0301 	eor.w	r3, r3, #1
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <mainTask+0xf42>
				  {
					  kapi1prudhome=0;
 8005f08:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <mainTask+0xffc>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 buton kontrol

				  if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f0e:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <mainTask+0xfe8>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d160      	bne.n	8005fd8 <mainTask+0x100c>
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <mainTask+0xfec>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d003      	beq.n	8005f26 <mainTask+0xf5a>
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <mainTask+0xfec>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d158      	bne.n	8005fd8 <mainTask+0x100c>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f26:	2104      	movs	r1, #4
 8005f28:	4818      	ldr	r0, [pc, #96]	; (8005f8c <mainTask+0xfc0>)
 8005f2a:	f002 f925 	bl	8008178 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d003      	beq.n	8005f3c <mainTask+0xf70>
 8005f34:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <mainTask+0xff4>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d14d      	bne.n	8005fd8 <mainTask+0x100c>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4813      	ldr	r0, [pc, #76]	; (8005f8c <mainTask+0xfc0>)
 8005f40:	f002 f91a 	bl	8008178 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d146      	bne.n	8005fd8 <mainTask+0x100c>
						  &&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	480f      	ldr	r0, [pc, #60]	; (8005f8c <mainTask+0xfc0>)
 8005f4e:	f002 f913 	bl	8008178 <HAL_GPIO_ReadPin>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <mainTask+0xf94>
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <mainTask+0xff0>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <mainTask+0xfac>
 8005f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f64:	4811      	ldr	r0, [pc, #68]	; (8005fac <mainTask+0xfe0>)
 8005f66:	f002 f907 	bl	8008178 <HAL_GPIO_ReadPin>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d133      	bne.n	8005fd8 <mainTask+0x100c>
 8005f70:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <mainTask+0xff0>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d12f      	bne.n	8005fd8 <mainTask+0x100c>
						  &&(makineStop==1))
 8005f78:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <mainTask+0xfe4>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02b      	beq.n	8005fd8 <mainTask+0x100c>
				  {
					  kapi1butonkontrol=1;
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <mainTask+0x1008>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e02a      	b.n	8005fde <mainTask+0x1012>
 8005f88:	20000cb2 	.word	0x20000cb2
 8005f8c:	40011000 	.word	0x40011000
 8005f90:	20000cb6 	.word	0x20000cb6
 8005f94:	20000ccd 	.word	0x20000ccd
 8005f98:	20000cce 	.word	0x20000cce
 8005f9c:	20000cae 	.word	0x20000cae
 8005fa0:	20000c5c 	.word	0x20000c5c
 8005fa4:	20000c68 	.word	0x20000c68
 8005fa8:	20000c92 	.word	0x20000c92
 8005fac:	40010c00 	.word	0x40010c00
 8005fb0:	20000cbd 	.word	0x20000cbd
 8005fb4:	20000c85 	.word	0x20000c85
 8005fb8:	20000c84 	.word	0x20000c84
 8005fbc:	20000c88 	.word	0x20000c88
 8005fc0:	20000c82 	.word	0x20000c82
 8005fc4:	20000caa 	.word	0x20000caa
 8005fc8:	20000cbe 	.word	0x20000cbe
 8005fcc:	20000c60 	.word	0x20000c60
 8005fd0:	20000c95 	.word	0x20000c95
 8005fd4:	20000cbf 	.word	0x20000cbf
				  }

				  else
				  {
					  kapi1butonkontrol=0;
 8005fd8:	4b8b      	ldr	r3, [pc, #556]	; (8006208 <mainTask+0x123c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 pizzato

				  if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fde:	4b8b      	ldr	r3, [pc, #556]	; (800620c <mainTask+0x1240>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d121      	bne.n	800602a <mainTask+0x105e>
 8005fe6:	4b8a      	ldr	r3, [pc, #552]	; (8006210 <mainTask+0x1244>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d003      	beq.n	8005ff6 <mainTask+0x102a>
 8005fee:	4b88      	ldr	r3, [pc, #544]	; (8006210 <mainTask+0x1244>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d119      	bne.n	800602a <mainTask+0x105e>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ff6:	2104      	movs	r1, #4
 8005ff8:	4886      	ldr	r0, [pc, #536]	; (8006214 <mainTask+0x1248>)
 8005ffa:	f002 f8bd 	bl	8008178 <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d003      	beq.n	800600c <mainTask+0x1040>
 8006004:	4b84      	ldr	r3, [pc, #528]	; (8006218 <mainTask+0x124c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10e      	bne.n	800602a <mainTask+0x105e>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800600c:	2102      	movs	r1, #2
 800600e:	4881      	ldr	r0, [pc, #516]	; (8006214 <mainTask+0x1248>)
 8006010:	f002 f8b2 	bl	8008178 <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <mainTask+0x105e>
						  &&(makineStop==1))
 800601a:	4b80      	ldr	r3, [pc, #512]	; (800621c <mainTask+0x1250>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <mainTask+0x105e>
				  {
					  kapi1pizzato=1;
 8006022:	4b7f      	ldr	r3, [pc, #508]	; (8006220 <mainTask+0x1254>)
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e002      	b.n	8006030 <mainTask+0x1064>
				  }

				  else
				  {
					  kapi1pizzato=0;
 800602a:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <mainTask+0x1254>)
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 1 çıkış

				  if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1)
 8006030:	4b75      	ldr	r3, [pc, #468]	; (8006208 <mainTask+0x123c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <mainTask+0x107c>
 8006038:	4b79      	ldr	r3, [pc, #484]	; (8006220 <mainTask+0x1254>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <mainTask+0x107c>
 8006040:	4b78      	ldr	r3, [pc, #480]	; (8006224 <mainTask+0x1258>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <mainTask+0x1088>
				  {
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006048:	2201      	movs	r2, #1
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	4876      	ldr	r0, [pc, #472]	; (8006228 <mainTask+0x125c>)
 800604e:	f002 f8aa 	bl	80081a6 <HAL_GPIO_WritePin>
 8006052:	e004      	b.n	800605e <mainTask+0x1092>
				  }

				  else
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	4873      	ldr	r0, [pc, #460]	; (8006228 <mainTask+0x125c>)
 800605a:	f002 f8a4 	bl	80081a6 <HAL_GPIO_WritePin>

				  //kapi2 kontrol

				  // kapi 2 prudhome

				  if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800605e:	4b73      	ldr	r3, [pc, #460]	; (800622c <mainTask+0x1260>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d141      	bne.n	80060ea <mainTask+0x111e>
 8006066:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <mainTask+0x1244>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d003      	beq.n	8006076 <mainTask+0x10aa>
 800606e:	4b68      	ldr	r3, [pc, #416]	; (8006210 <mainTask+0x1244>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b03      	cmp	r3, #3
 8006074:	d139      	bne.n	80060ea <mainTask+0x111e>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800607a:	4866      	ldr	r0, [pc, #408]	; (8006214 <mainTask+0x1248>)
 800607c:	f002 f87c 	bl	8008178 <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <mainTask+0x10c2>
 8006086:	4b6a      	ldr	r3, [pc, #424]	; (8006230 <mainTask+0x1264>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <mainTask+0x10da>
 800608e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006092:	4868      	ldr	r0, [pc, #416]	; (8006234 <mainTask+0x1268>)
 8006094:	f002 f870 	bl	8008178 <HAL_GPIO_ReadPin>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d125      	bne.n	80060ea <mainTask+0x111e>
 800609e:	4b64      	ldr	r3, [pc, #400]	; (8006230 <mainTask+0x1264>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d121      	bne.n	80060ea <mainTask+0x111e>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80060a6:	2102      	movs	r1, #2
 80060a8:	485a      	ldr	r0, [pc, #360]	; (8006214 <mainTask+0x1248>)
 80060aa:	f002 f865 	bl	8008178 <HAL_GPIO_ReadPin>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11a      	bne.n	80060ea <mainTask+0x111e>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80060b4:	2104      	movs	r1, #4
 80060b6:	4857      	ldr	r0, [pc, #348]	; (8006214 <mainTask+0x1248>)
 80060b8:	f002 f85e 	bl	8008178 <HAL_GPIO_ReadPin>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d113      	bne.n	80060ea <mainTask+0x111e>
						  &&(makineStop==1)
 80060c2:	4b56      	ldr	r3, [pc, #344]	; (800621c <mainTask+0x1250>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <mainTask+0x111e>
						  &&(butonKontrol==0))
 80060ca:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <mainTask+0x126c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f083 0301 	eor.w	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <mainTask+0x111e>
				  {

					  kapi2prudhome=1;
 80060d8:	4b58      	ldr	r3, [pc, #352]	; (800623c <mainTask+0x1270>)
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 80060de:	4b58      	ldr	r3, [pc, #352]	; (8006240 <mainTask+0x1274>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a58      	ldr	r2, [pc, #352]	; (8006244 <mainTask+0x1278>)
 80060e4:	6013      	str	r3, [r2, #0]
					  bekle();
 80060e6:	f7fe f937 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0))
 80060ea:	4b55      	ldr	r3, [pc, #340]	; (8006240 <mainTask+0x1274>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b55      	ldr	r3, [pc, #340]	; (8006244 <mainTask+0x1278>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	4a54      	ldr	r2, [pc, #336]	; (8006248 <mainTask+0x127c>)
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d20d      	bcs.n	8006118 <mainTask+0x114c>
 80060fc:	2102      	movs	r1, #2
 80060fe:	4845      	ldr	r0, [pc, #276]	; (8006214 <mainTask+0x1248>)
 8006100:	f002 f83a 	bl	8008178 <HAL_GPIO_ReadPin>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <mainTask+0x114c>
 800610a:	4b44      	ldr	r3, [pc, #272]	; (800621c <mainTask+0x1250>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f083 0301 	eor.w	r3, r3, #1
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <mainTask+0x1152>
				  {
					  kapi2prudhome=0;
 8006118:	4b48      	ldr	r3, [pc, #288]	; (800623c <mainTask+0x1270>)
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 buton kontrol

				  if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800611e:	4b43      	ldr	r3, [pc, #268]	; (800622c <mainTask+0x1260>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d135      	bne.n	8006192 <mainTask+0x11c6>
 8006126:	4b3a      	ldr	r3, [pc, #232]	; (8006210 <mainTask+0x1244>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <mainTask+0x116a>
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <mainTask+0x1244>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d12d      	bne.n	8006192 <mainTask+0x11c6>
						  &&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800613a:	4836      	ldr	r0, [pc, #216]	; (8006214 <mainTask+0x1248>)
 800613c:	f002 f81c 	bl	8008178 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <mainTask+0x1182>
 8006146:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <mainTask+0x1264>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <mainTask+0x119a>
 800614e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006152:	4838      	ldr	r0, [pc, #224]	; (8006234 <mainTask+0x1268>)
 8006154:	f002 f810 	bl	8008178 <HAL_GPIO_ReadPin>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <mainTask+0x11c6>
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <mainTask+0x1264>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d115      	bne.n	8006192 <mainTask+0x11c6>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006166:	2102      	movs	r1, #2
 8006168:	482a      	ldr	r0, [pc, #168]	; (8006214 <mainTask+0x1248>)
 800616a:	f002 f805 	bl	8008178 <HAL_GPIO_ReadPin>
 800616e:	4603      	mov	r3, r0
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10e      	bne.n	8006192 <mainTask+0x11c6>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006174:	2104      	movs	r1, #4
 8006176:	4827      	ldr	r0, [pc, #156]	; (8006214 <mainTask+0x1248>)
 8006178:	f001 fffe 	bl	8008178 <HAL_GPIO_ReadPin>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <mainTask+0x11c6>
						  &&(makineStop==1)
 8006182:	4b26      	ldr	r3, [pc, #152]	; (800621c <mainTask+0x1250>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <mainTask+0x11c6>
				  	  	  	  )
				  {
					  kapi2butonkontrol=1;
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <mainTask+0x1280>)
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e002      	b.n	8006198 <mainTask+0x11cc>
				  }
				  else
				  {
					  kapi2butonkontrol=0;
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <mainTask+0x1280>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 pizzato

				  if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <mainTask+0x1260>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d11d      	bne.n	80061dc <mainTask+0x1210>
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <mainTask+0x1244>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d003      	beq.n	80061b0 <mainTask+0x11e4>
 80061a8:	4b19      	ldr	r3, [pc, #100]	; (8006210 <mainTask+0x1244>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d115      	bne.n	80061dc <mainTask+0x1210>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80061b0:	2102      	movs	r1, #2
 80061b2:	4818      	ldr	r0, [pc, #96]	; (8006214 <mainTask+0x1248>)
 80061b4:	f001 ffe0 	bl	8008178 <HAL_GPIO_ReadPin>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10e      	bne.n	80061dc <mainTask+0x1210>
						  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80061be:	2104      	movs	r1, #4
 80061c0:	4814      	ldr	r0, [pc, #80]	; (8006214 <mainTask+0x1248>)
 80061c2:	f001 ffd9 	bl	8008178 <HAL_GPIO_ReadPin>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <mainTask+0x1210>
						  &&(makineStop==1)
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <mainTask+0x1250>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <mainTask+0x1210>
				  	  	  	  )
				  {
					  kapi2pizzato=1;
 80061d4:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <mainTask+0x1284>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e002      	b.n	80061e2 <mainTask+0x1216>
				  }
				  else
				  {
					  kapi2pizzato=0;
 80061dc:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <mainTask+0x1284>)
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi 2 çıkış

				  if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1)
 80061e2:	4b1a      	ldr	r3, [pc, #104]	; (800624c <mainTask+0x1280>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d107      	bne.n	80061fa <mainTask+0x122e>
 80061ea:	4b19      	ldr	r3, [pc, #100]	; (8006250 <mainTask+0x1284>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <mainTask+0x122e>
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <mainTask+0x1270>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02c      	beq.n	8006254 <mainTask+0x1288>
				  {
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80061fa:	2201      	movs	r2, #1
 80061fc:	2140      	movs	r1, #64	; 0x40
 80061fe:	480a      	ldr	r0, [pc, #40]	; (8006228 <mainTask+0x125c>)
 8006200:	f001 ffd1 	bl	80081a6 <HAL_GPIO_WritePin>
 8006204:	e02b      	b.n	800625e <mainTask+0x1292>
 8006206:	bf00      	nop
 8006208:	20000cbf 	.word	0x20000cbf
 800620c:	20000c85 	.word	0x20000c85
 8006210:	20000c84 	.word	0x20000c84
 8006214:	40011000 	.word	0x40011000
 8006218:	20000c82 	.word	0x20000c82
 800621c:	20000cbd 	.word	0x20000cbd
 8006220:	20000cc0 	.word	0x20000cc0
 8006224:	20000cbe 	.word	0x20000cbe
 8006228:	40010800 	.word	0x40010800
 800622c:	20000c86 	.word	0x20000c86
 8006230:	20000c88 	.word	0x20000c88
 8006234:	40010c00 	.word	0x40010c00
 8006238:	20000caa 	.word	0x20000caa
 800623c:	20000cc1 	.word	0x20000cc1
 8006240:	20000c5c 	.word	0x20000c5c
 8006244:	20000c60 	.word	0x20000c60
 8006248:	20000c96 	.word	0x20000c96
 800624c:	20000cc2 	.word	0x20000cc2
 8006250:	20000cc3 	.word	0x20000cc3
				  }

				  else
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006254:	2200      	movs	r2, #0
 8006256:	2140      	movs	r1, #64	; 0x40
 8006258:	488d      	ldr	r0, [pc, #564]	; (8006490 <mainTask+0x14c4>)
 800625a:	f001 ffa4 	bl	80081a6 <HAL_GPIO_WritePin>


				  //   kapi tabla kontrol ***


				  if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800625e:	4b8d      	ldr	r3, [pc, #564]	; (8006494 <mainTask+0x14c8>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <mainTask+0x12a2>
 8006266:	4b8b      	ldr	r3, [pc, #556]	; (8006494 <mainTask+0x14c8>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d115      	bne.n	800629a <mainTask+0x12ce>
						  &&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800626e:	2104      	movs	r1, #4
 8006270:	4889      	ldr	r0, [pc, #548]	; (8006498 <mainTask+0x14cc>)
 8006272:	f001 ff81 	bl	8008178 <HAL_GPIO_ReadPin>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d003      	beq.n	8006284 <mainTask+0x12b8>
 800627c:	4b87      	ldr	r3, [pc, #540]	; (800649c <mainTask+0x14d0>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <mainTask+0x12ce>
						  &&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0))
 8006284:	2102      	movs	r1, #2
 8006286:	4884      	ldr	r0, [pc, #528]	; (8006498 <mainTask+0x14cc>)
 8006288:	f001 ff76 	bl	8008178 <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <mainTask+0x12ce>

					  kapiTablaAcKonumKat1=1;
 8006292:	4b83      	ldr	r3, [pc, #524]	; (80064a0 <mainTask+0x14d4>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e002      	b.n	80062a0 <mainTask+0x12d4>
				  else
					  kapiTablaAcKonumKat1=0;
 800629a:	4b81      	ldr	r3, [pc, #516]	; (80064a0 <mainTask+0x14d4>)
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]

				  if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80062a0:	4b7c      	ldr	r3, [pc, #496]	; (8006494 <mainTask+0x14c8>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d003      	beq.n	80062b0 <mainTask+0x12e4>
 80062a8:	4b7a      	ldr	r3, [pc, #488]	; (8006494 <mainTask+0x14c8>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d111      	bne.n	80062d4 <mainTask+0x1308>
						  && (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062b0:	2102      	movs	r1, #2
 80062b2:	4879      	ldr	r0, [pc, #484]	; (8006498 <mainTask+0x14cc>)
 80062b4:	f001 ff60 	bl	8008178 <HAL_GPIO_ReadPin>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d10a      	bne.n	80062d4 <mainTask+0x1308>
					  	  &&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0))
 80062be:	2104      	movs	r1, #4
 80062c0:	4875      	ldr	r0, [pc, #468]	; (8006498 <mainTask+0x14cc>)
 80062c2:	f001 ff59 	bl	8008178 <HAL_GPIO_ReadPin>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <mainTask+0x1308>
					  kapiTablaAcKonumKat2=1;
 80062cc:	4b75      	ldr	r3, [pc, #468]	; (80064a4 <mainTask+0x14d8>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e002      	b.n	80062da <mainTask+0x130e>
				  else
					  kapiTablaAcKonumKat2=0;
 80062d4:	4b73      	ldr	r3, [pc, #460]	; (80064a4 <mainTask+0x14d8>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat1==1
 80062da:	4b71      	ldr	r3, [pc, #452]	; (80064a0 <mainTask+0x14d4>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00f      	beq.n	8006302 <mainTask+0x1336>
						  && kapiAcTipi==1
 80062e2:	4b71      	ldr	r3, [pc, #452]	; (80064a8 <mainTask+0x14dc>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10b      	bne.n	8006302 <mainTask+0x1336>
					  	  && HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)
 80062ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062ee:	486f      	ldr	r0, [pc, #444]	; (80064ac <mainTask+0x14e0>)
 80062f0:	f001 ff42 	bl	8008178 <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <mainTask+0x1336>
				  {
					  kapiactablaesp1=1;
 80062fa:	4b6d      	ldr	r3, [pc, #436]	; (80064b0 <mainTask+0x14e4>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e002      	b.n	8006308 <mainTask+0x133c>
				  }
				  else
					  kapiactablaesp1=0;
 8006302:	4b6b      	ldr	r3, [pc, #428]	; (80064b0 <mainTask+0x14e4>)
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]

				  if(kapiTablaAcKonumKat2==1
 8006308:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <mainTask+0x14d8>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00f      	beq.n	8006330 <mainTask+0x1364>
						  && kapiAcTipi==1
 8006310:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <mainTask+0x14dc>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10b      	bne.n	8006330 <mainTask+0x1364>
					  	  && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)
 8006318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800631c:	4863      	ldr	r0, [pc, #396]	; (80064ac <mainTask+0x14e0>)
 800631e:	f001 ff2b 	bl	8008178 <HAL_GPIO_ReadPin>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <mainTask+0x1364>
				  {
					  kapiactablaesp2=1;
 8006328:	4b62      	ldr	r3, [pc, #392]	; (80064b4 <mainTask+0x14e8>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e002      	b.n	8006336 <mainTask+0x136a>
				  }
				  else
					  kapiactablaesp2=0;
 8006330:	4b60      	ldr	r3, [pc, #384]	; (80064b4 <mainTask+0x14e8>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]

				  // tabla kapısı prudhome

				  if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006336:	4b60      	ldr	r3, [pc, #384]	; (80064b8 <mainTask+0x14ec>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d137      	bne.n	80063ae <mainTask+0x13e2>
 800633e:	4b5f      	ldr	r3, [pc, #380]	; (80064bc <mainTask+0x14f0>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d003      	beq.n	800634e <mainTask+0x1382>
 8006346:	4b5d      	ldr	r3, [pc, #372]	; (80064bc <mainTask+0x14f0>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b03      	cmp	r3, #3
 800634c:	d12f      	bne.n	80063ae <mainTask+0x13e2>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800634e:	4b54      	ldr	r3, [pc, #336]	; (80064a0 <mainTask+0x14d4>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <mainTask+0x1392>
 8006356:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <mainTask+0x14d8>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d027      	beq.n	80063ae <mainTask+0x13e2>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800635e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006362:	484d      	ldr	r0, [pc, #308]	; (8006498 <mainTask+0x14cc>)
 8006364:	f001 ff08 	bl	8008178 <HAL_GPIO_ReadPin>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <mainTask+0x13aa>
 800636e:	4b4e      	ldr	r3, [pc, #312]	; (80064a8 <mainTask+0x14dc>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <mainTask+0x13ba>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006376:	4b4e      	ldr	r3, [pc, #312]	; (80064b0 <mainTask+0x14e4>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <mainTask+0x13ba>
 800637e:	4b4d      	ldr	r3, [pc, #308]	; (80064b4 <mainTask+0x14e8>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <mainTask+0x13e2>
						  &&(makineStop==1)
 8006386:	4b4e      	ldr	r3, [pc, #312]	; (80064c0 <mainTask+0x14f4>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00f      	beq.n	80063ae <mainTask+0x13e2>
						  &&(butonKontrol==0))
 800638e:	4b4d      	ldr	r3, [pc, #308]	; (80064c4 <mainTask+0x14f8>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f083 0301 	eor.w	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <mainTask+0x13e2>
				  {

					  kapiTablaprudhome=1;
 800639c:	4b4a      	ldr	r3, [pc, #296]	; (80064c8 <mainTask+0x14fc>)
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
					  timer = millis;
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <mainTask+0x1500>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a4a      	ldr	r2, [pc, #296]	; (80064d0 <mainTask+0x1504>)
 80063a8:	6013      	str	r3, [r2, #0]
					  bekle();
 80063aa:	f7fd ffd5 	bl	8004358 <bekle>
				  }

				  if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0))
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <mainTask+0x1500>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b47      	ldr	r3, [pc, #284]	; (80064d0 <mainTask+0x1504>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	4a46      	ldr	r2, [pc, #280]	; (80064d4 <mainTask+0x1508>)
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d214      	bcs.n	80063ea <mainTask+0x141e>
 80063c0:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <mainTask+0x14d4>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f083 0301 	eor.w	r3, r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d006      	beq.n	80063dc <mainTask+0x1410>
 80063ce:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <mainTask+0x14d8>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f083 0301 	eor.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <mainTask+0x141e>
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <mainTask+0x14f4>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f083 0301 	eor.w	r3, r3, #1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <mainTask+0x1424>
				  {
					  kapiTablaprudhome=0;
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <mainTask+0x14fc>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı buton kontrol

				  if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80063f0:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <mainTask+0x14ec>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d12b      	bne.n	8006450 <mainTask+0x1484>
 80063f8:	4b30      	ldr	r3, [pc, #192]	; (80064bc <mainTask+0x14f0>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d003      	beq.n	8006408 <mainTask+0x143c>
 8006400:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <mainTask+0x14f0>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d123      	bne.n	8006450 <mainTask+0x1484>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <mainTask+0x14d4>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <mainTask+0x144c>
 8006410:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <mainTask+0x14d8>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <mainTask+0x1484>
						  &&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800641c:	481e      	ldr	r0, [pc, #120]	; (8006498 <mainTask+0x14cc>)
 800641e:	f001 feab 	bl	8008178 <HAL_GPIO_ReadPin>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <mainTask+0x1464>
 8006428:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <mainTask+0x14dc>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <mainTask+0x1474>
						  ||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006430:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <mainTask+0x14e4>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <mainTask+0x1474>
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <mainTask+0x14e8>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <mainTask+0x1484>
						  &&(makineStop==1))
 8006440:	4b1f      	ldr	r3, [pc, #124]	; (80064c0 <mainTask+0x14f4>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <mainTask+0x1484>
				  {
					  kapiTablabutonkontrol=1;
 8006448:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <mainTask+0x150c>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e002      	b.n	8006456 <mainTask+0x148a>
				  }

				  else
				  {
					  kapiTablabutonkontrol=0;
 8006450:	4b21      	ldr	r3, [pc, #132]	; (80064d8 <mainTask+0x150c>)
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
				  }

				  // tabla kapı pizzato

				  if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <mainTask+0x14ec>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d140      	bne.n	80064e0 <mainTask+0x1514>
 800645e:	4b17      	ldr	r3, [pc, #92]	; (80064bc <mainTask+0x14f0>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d003      	beq.n	800646e <mainTask+0x14a2>
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <mainTask+0x14f0>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d138      	bne.n	80064e0 <mainTask+0x1514>
						  &&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <mainTask+0x14d4>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <mainTask+0x14b2>
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <mainTask+0x14d8>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d030      	beq.n	80064e0 <mainTask+0x1514>
						  &&(makineStop==1))
 800647e:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <mainTask+0x14f4>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02c      	beq.n	80064e0 <mainTask+0x1514>
				  {
					  kapiTablapizzato=1;
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <mainTask+0x1510>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e02b      	b.n	80064e6 <mainTask+0x151a>
 800648e:	bf00      	nop
 8006490:	40010800 	.word	0x40010800
 8006494:	20000c89 	.word	0x20000c89
 8006498:	40011000 	.word	0x40011000
 800649c:	20000c82 	.word	0x20000c82
 80064a0:	20000cc7 	.word	0x20000cc7
 80064a4:	20000cc8 	.word	0x20000cc8
 80064a8:	20000c88 	.word	0x20000c88
 80064ac:	40010c00 	.word	0x40010c00
 80064b0:	20000cd7 	.word	0x20000cd7
 80064b4:	20000cd8 	.word	0x20000cd8
 80064b8:	20000c87 	.word	0x20000c87
 80064bc:	20000c84 	.word	0x20000c84
 80064c0:	20000cbd 	.word	0x20000cbd
 80064c4:	20000caa 	.word	0x20000caa
 80064c8:	20000cc4 	.word	0x20000cc4
 80064cc:	20000c5c 	.word	0x20000c5c
 80064d0:	20000c60 	.word	0x20000c60
 80064d4:	20000c97 	.word	0x20000c97
 80064d8:	20000cc5 	.word	0x20000cc5
 80064dc:	20000cc6 	.word	0x20000cc6
				  }

				  else //if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3)))
				  {
					  kapiTablapizzato=0;
 80064e0:	4b89      	ldr	r3, [pc, #548]	; (8006708 <mainTask+0x173c>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
				  }

				  // kapi Tabla çıkış

				  if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1)
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <mainTask+0x1740>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d107      	bne.n	80064fe <mainTask+0x1532>
 80064ee:	4b88      	ldr	r3, [pc, #544]	; (8006710 <mainTask+0x1744>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <mainTask+0x1532>
 80064f6:	4b84      	ldr	r3, [pc, #528]	; (8006708 <mainTask+0x173c>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <mainTask+0x153e>
				  {
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064fe:	2201      	movs	r2, #1
 8006500:	2120      	movs	r1, #32
 8006502:	4884      	ldr	r0, [pc, #528]	; (8006714 <mainTask+0x1748>)
 8006504:	f001 fe4f 	bl	80081a6 <HAL_GPIO_WritePin>
 8006508:	e004      	b.n	8006514 <mainTask+0x1548>
				  }

				  else
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800650a:	2200      	movs	r2, #0
 800650c:	2120      	movs	r1, #32
 800650e:	4881      	ldr	r0, [pc, #516]	; (8006714 <mainTask+0x1748>)
 8006510:	f001 fe49 	bl	80081a6 <HAL_GPIO_WritePin>

				  /********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				  if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006514:	4b80      	ldr	r3, [pc, #512]	; (8006718 <mainTask+0x174c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <mainTask+0x156e>
 800651c:	2102      	movs	r1, #2
 800651e:	487f      	ldr	r0, [pc, #508]	; (800671c <mainTask+0x1750>)
 8006520:	f001 fe2a 	bl	8008178 <HAL_GPIO_ReadPin>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <mainTask+0x156e>
 800652a:	4b7d      	ldr	r3, [pc, #500]	; (8006720 <mainTask+0x1754>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <mainTask+0x156e>
 8006532:	4b7c      	ldr	r3, [pc, #496]	; (8006724 <mainTask+0x1758>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d112      	bne.n	8006560 <mainTask+0x1594>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))){
 800653a:	4b7b      	ldr	r3, [pc, #492]	; (8006728 <mainTask+0x175c>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d066      	beq.n	8006610 <mainTask+0x1644>
 8006542:	2104      	movs	r1, #4
 8006544:	4875      	ldr	r0, [pc, #468]	; (800671c <mainTask+0x1750>)
 8006546:	f001 fe17 	bl	8008178 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d15f      	bne.n	8006610 <mainTask+0x1644>
 8006550:	4b73      	ldr	r3, [pc, #460]	; (8006720 <mainTask+0x1754>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05b      	beq.n	8006610 <mainTask+0x1644>
 8006558:	4b72      	ldr	r3, [pc, #456]	; (8006724 <mainTask+0x1758>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d057      	beq.n	8006610 <mainTask+0x1644>

				  		calismaSayisi1=calismaSayisi1+1;
 8006560:	4b72      	ldr	r3, [pc, #456]	; (800672c <mainTask+0x1760>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	4b70      	ldr	r3, [pc, #448]	; (800672c <mainTask+0x1760>)
 800656a:	701a      	strb	r2, [r3, #0]
				  		if(calismaSayisi1>9){
 800656c:	4b6f      	ldr	r3, [pc, #444]	; (800672c <mainTask+0x1760>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b09      	cmp	r3, #9
 8006572:	d908      	bls.n	8006586 <mainTask+0x15ba>
				  		calismaSayisi1=0;
 8006574:	4b6d      	ldr	r3, [pc, #436]	; (800672c <mainTask+0x1760>)
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10=calismaSayisi10+1;
 800657a:	4b6d      	ldr	r3, [pc, #436]	; (8006730 <mainTask+0x1764>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4b6b      	ldr	r3, [pc, #428]	; (8006730 <mainTask+0x1764>)
 8006584:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi10>9){
 8006586:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <mainTask+0x1764>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b09      	cmp	r3, #9
 800658c:	d908      	bls.n	80065a0 <mainTask+0x15d4>
				  		calismaSayisi10=0;
 800658e:	4b68      	ldr	r3, [pc, #416]	; (8006730 <mainTask+0x1764>)
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi100=calismaSayisi100+1;
 8006594:	4b67      	ldr	r3, [pc, #412]	; (8006734 <mainTask+0x1768>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	b2da      	uxtb	r2, r3
 800659c:	4b65      	ldr	r3, [pc, #404]	; (8006734 <mainTask+0x1768>)
 800659e:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi100>9){
 80065a0:	4b64      	ldr	r3, [pc, #400]	; (8006734 <mainTask+0x1768>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	d908      	bls.n	80065ba <mainTask+0x15ee>
				  		calismaSayisi100=0;
 80065a8:	4b62      	ldr	r3, [pc, #392]	; (8006734 <mainTask+0x1768>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi1000=calismaSayisi1000+1;
 80065ae:	4b62      	ldr	r3, [pc, #392]	; (8006738 <mainTask+0x176c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4b60      	ldr	r3, [pc, #384]	; (8006738 <mainTask+0x176c>)
 80065b8:	701a      	strb	r2, [r3, #0]
				  		}
				  		if(calismaSayisi1000>9){
 80065ba:	4b5f      	ldr	r3, [pc, #380]	; (8006738 <mainTask+0x176c>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b09      	cmp	r3, #9
 80065c0:	d908      	bls.n	80065d4 <mainTask+0x1608>
				  		calismaSayisi1000=0;
 80065c2:	4b5d      	ldr	r3, [pc, #372]	; (8006738 <mainTask+0x176c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
				  		calismaSayisi10000=calismaSayisi10000+1;
 80065c8:	4b5c      	ldr	r3, [pc, #368]	; (800673c <mainTask+0x1770>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	4b5a      	ldr	r3, [pc, #360]	; (800673c <mainTask+0x1770>)
 80065d2:	701a      	strb	r2, [r3, #0]
				  		}
				  		eepromData[32]=calismaSayisi10000;
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <mainTask+0x1770>)
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	4b59      	ldr	r3, [pc, #356]	; (8006740 <mainTask+0x1774>)
 80065da:	f883 2020 	strb.w	r2, [r3, #32]
				  		eepromData[31]=calismaSayisi1000;
 80065de:	4b56      	ldr	r3, [pc, #344]	; (8006738 <mainTask+0x176c>)
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	4b57      	ldr	r3, [pc, #348]	; (8006740 <mainTask+0x1774>)
 80065e4:	77da      	strb	r2, [r3, #31]
				  		eepromData[30]=calismaSayisi100;
 80065e6:	4b53      	ldr	r3, [pc, #332]	; (8006734 <mainTask+0x1768>)
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	4b55      	ldr	r3, [pc, #340]	; (8006740 <mainTask+0x1774>)
 80065ec:	779a      	strb	r2, [r3, #30]
				  		eepromData[29]=calismaSayisi10;
 80065ee:	4b50      	ldr	r3, [pc, #320]	; (8006730 <mainTask+0x1764>)
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	4b53      	ldr	r3, [pc, #332]	; (8006740 <mainTask+0x1774>)
 80065f4:	775a      	strb	r2, [r3, #29]
				  		eepromData[28]=calismaSayisi1;
 80065f6:	4b4d      	ldr	r3, [pc, #308]	; (800672c <mainTask+0x1760>)
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	4b51      	ldr	r3, [pc, #324]	; (8006740 <mainTask+0x1774>)
 80065fc:	771a      	strb	r2, [r3, #28]

				  		hafizaYaz=1;
 80065fe:	4b51      	ldr	r3, [pc, #324]	; (8006744 <mainTask+0x1778>)
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]

				  		CalismaSayisiYukari=0;
 8006604:	4b44      	ldr	r3, [pc, #272]	; (8006718 <mainTask+0x174c>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
				  		CalismaSayisiAsagi=0;
 800660a:	4b47      	ldr	r3, [pc, #284]	; (8006728 <mainTask+0x175c>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
				  }

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				  if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006614:	484c      	ldr	r0, [pc, #304]	; (8006748 <mainTask+0x177c>)
 8006616:	f001 fdaf 	bl	8008178 <HAL_GPIO_ReadPin>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d016      	beq.n	800664e <mainTask+0x1682>
				  		||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006624:	4848      	ldr	r0, [pc, #288]	; (8006748 <mainTask+0x177c>)
 8006626:	f001 fda7 	bl	8008178 <HAL_GPIO_ReadPin>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <mainTask+0x1682>
				  		||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006634:	4844      	ldr	r0, [pc, #272]	; (8006748 <mainTask+0x177c>)
 8006636:	f001 fd9f 	bl	8008178 <HAL_GPIO_ReadPin>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <mainTask+0x1682>
				  	    ||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)){
 8006640:	2140      	movs	r1, #64	; 0x40
 8006642:	4836      	ldr	r0, [pc, #216]	; (800671c <mainTask+0x1750>)
 8006644:	f001 fd98 	bl	8008178 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <mainTask+0x168a>

				  		 startBasili=1;
 800664e:	4b3f      	ldr	r3, [pc, #252]	; (800674c <mainTask+0x1780>)
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e002      	b.n	800665c <mainTask+0x1690>
				  }
				  else
				  	     startBasili=0;
 8006656:	4b3d      	ldr	r3, [pc, #244]	; (800674c <mainTask+0x1780>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]

				  if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1)
 800665c:	4b3b      	ldr	r3, [pc, #236]	; (800674c <mainTask+0x1780>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d014      	beq.n	800668e <mainTask+0x16c2>
 8006664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006668:	4837      	ldr	r0, [pc, #220]	; (8006748 <mainTask+0x177c>)
 800666a:	f001 fd85 	bl	8008178 <HAL_GPIO_ReadPin>
 800666e:	4603      	mov	r3, r0
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10c      	bne.n	800668e <mainTask+0x16c2>
				  	{
				  		hataVar=1;
 8006674:	4b36      	ldr	r3, [pc, #216]	; (8006750 <mainTask+0x1784>)
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(1);
 800667a:	2001      	movs	r0, #1
 800667c:	f7fd ff5c 	bl	8004538 <hataKoduLcdGoster>
				  		hata2EEPROM(1);
 8006680:	2001      	movs	r0, #1
 8006682:	f7fe fa9b 	bl	8004bbc <hata2EEPROM>
				  		acilstophatasi=1;
 8006686:	4b33      	ldr	r3, [pc, #204]	; (8006754 <mainTask+0x1788>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	e018      	b.n	80066c0 <mainTask+0x16f4>
				  	}

				  else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0)
 800668e:	4b31      	ldr	r3, [pc, #196]	; (8006754 <mainTask+0x1788>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <mainTask+0x16f4>
 8006696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800669a:	482b      	ldr	r0, [pc, #172]	; (8006748 <mainTask+0x177c>)
 800669c:	f001 fd6c 	bl	8008178 <HAL_GPIO_ReadPin>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10c      	bne.n	80066c0 <mainTask+0x16f4>
 80066a6:	4b29      	ldr	r3, [pc, #164]	; (800674c <mainTask+0x1780>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <mainTask+0x16f4>
				  	 {
				  		acilstophatasi=0;
 80066b4:	4b27      	ldr	r3, [pc, #156]	; (8006754 <mainTask+0x1788>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(1);
 80066ba:	2001      	movs	r0, #1
 80066bc:	f7fd fee8 	bl	8004490 <lcdUpdate>
				  	}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				  if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1))
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <mainTask+0x178c>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04c      	beq.n	8006768 <mainTask+0x179c>
 80066ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066d2:	481d      	ldr	r0, [pc, #116]	; (8006748 <mainTask+0x177c>)
 80066d4:	f001 fd50 	bl	8008178 <HAL_GPIO_ReadPin>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <mainTask+0x171a>
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <mainTask+0x1790>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d040      	beq.n	8006768 <mainTask+0x179c>
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <mainTask+0x1794>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d13c      	bne.n	8006768 <mainTask+0x179c>
				   {
				  		hataVar=1;
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <mainTask+0x1784>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(2);
 80066f4:	2002      	movs	r0, #2
 80066f6:	f7fd ff1f 	bl	8004538 <hataKoduLcdGoster>
				  		hata2EEPROM(2);
 80066fa:	2002      	movs	r0, #2
 80066fc:	f7fe fa5e 	bl	8004bbc <hata2EEPROM>
				  		emniyetCercevesihatasi=1;
 8006700:	4b18      	ldr	r3, [pc, #96]	; (8006764 <mainTask+0x1798>)
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e047      	b.n	8006798 <mainTask+0x17cc>
 8006708:	20000cc6 	.word	0x20000cc6
 800670c:	20000cc5 	.word	0x20000cc5
 8006710:	20000cc4 	.word	0x20000cc4
 8006714:	40010800 	.word	0x40010800
 8006718:	20000cba 	.word	0x20000cba
 800671c:	40011000 	.word	0x40011000
 8006720:	20000c82 	.word	0x20000c82
 8006724:	20000cbd 	.word	0x20000cbd
 8006728:	20000cbb 	.word	0x20000cbb
 800672c:	20000c79 	.word	0x20000c79
 8006730:	20000c7a 	.word	0x20000c7a
 8006734:	20000940 	.word	0x20000940
 8006738:	20000941 	.word	0x20000941
 800673c:	20000c7b 	.word	0x20000c7b
 8006740:	20000c14 	.word	0x20000c14
 8006744:	20000ca7 	.word	0x20000ca7
 8006748:	40010c00 	.word	0x40010c00
 800674c:	20000cc9 	.word	0x20000cc9
 8006750:	20000cd0 	.word	0x20000cd0
 8006754:	20000ccb 	.word	0x20000ccb
 8006758:	20000cd2 	.word	0x20000cd2
 800675c:	20000cdc 	.word	0x20000cdc
 8006760:	20000c80 	.word	0x20000c80
 8006764:	20000ccc 	.word	0x20000ccc
				  	}
				  	else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0){
 8006768:	4b97      	ldr	r3, [pc, #604]	; (80069c8 <mainTask+0x19fc>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <mainTask+0x17cc>
 8006770:	4b96      	ldr	r3, [pc, #600]	; (80069cc <mainTask+0x1a00>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <mainTask+0x17cc>
 8006778:	4b95      	ldr	r3, [pc, #596]	; (80069d0 <mainTask+0x1a04>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <mainTask+0x17cc>
				  		emniyetCercevesihatasi=0;
 8006786:	4b90      	ldr	r3, [pc, #576]	; (80069c8 <mainTask+0x19fc>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
				  		cercevesasagicalisma=0;
 800678c:	4b91      	ldr	r3, [pc, #580]	; (80069d4 <mainTask+0x1a08>)
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(2);
 8006792:	2002      	movs	r0, #2
 8006794:	f7fd fe7c 	bl	8004490 <lcdUpdate>
				  	}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

				  	if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1)
 8006798:	4b8f      	ldr	r3, [pc, #572]	; (80069d8 <mainTask+0x1a0c>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11c      	bne.n	80067da <mainTask+0x180e>
 80067a0:	4b8e      	ldr	r3, [pc, #568]	; (80069dc <mainTask+0x1a10>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d118      	bne.n	80067da <mainTask+0x180e>
 80067a8:	4b8d      	ldr	r3, [pc, #564]	; (80069e0 <mainTask+0x1a14>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <mainTask+0x180e>
 80067b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067b4:	488b      	ldr	r0, [pc, #556]	; (80069e4 <mainTask+0x1a18>)
 80067b6:	f001 fcdf 	bl	8008178 <HAL_GPIO_ReadPin>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10c      	bne.n	80067da <mainTask+0x180e>
				  	{
				  		hataVar=1;
 80067c0:	4b89      	ldr	r3, [pc, #548]	; (80069e8 <mainTask+0x1a1c>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(3);
 80067c6:	2003      	movs	r0, #3
 80067c8:	f7fd feb6 	bl	8004538 <hataKoduLcdGoster>
				  		hata2EEPROM(3);
 80067cc:	2003      	movs	r0, #3
 80067ce:	f7fe f9f5 	bl	8004bbc <hata2EEPROM>
				  		basinchatasi=1;
 80067d2:	4b86      	ldr	r3, [pc, #536]	; (80069ec <mainTask+0x1a20>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e015      	b.n	8006806 <mainTask+0x183a>
				  	}
				  	else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1){
 80067da:	4b84      	ldr	r3, [pc, #528]	; (80069ec <mainTask+0x1a20>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d011      	beq.n	8006806 <mainTask+0x183a>
 80067e2:	4b7d      	ldr	r3, [pc, #500]	; (80069d8 <mainTask+0x1a0c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10d      	bne.n	8006806 <mainTask+0x183a>
 80067ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067ee:	4880      	ldr	r0, [pc, #512]	; (80069f0 <mainTask+0x1a24>)
 80067f0:	f001 fcc2 	bl	8008178 <HAL_GPIO_ReadPin>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <mainTask+0x183a>
				  		basinchatasi=0;
 80067fa:	4b7c      	ldr	r3, [pc, #496]	; (80069ec <mainTask+0x1a20>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(3);
 8006800:	2003      	movs	r0, #3
 8006802:	f7fd fe45 	bl	8004490 <lcdUpdate>

				  	}
		/************************************ KAPI SİVİÇ HATASI **************************************************/
				  if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 8006806:	4b7b      	ldr	r3, [pc, #492]	; (80069f4 <mainTask+0x1a28>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <mainTask+0x184a>
 800680e:	4b7a      	ldr	r3, [pc, #488]	; (80069f8 <mainTask+0x1a2c>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01c      	beq.n	8006850 <mainTask+0x1884>
 8006816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800681a:	4878      	ldr	r0, [pc, #480]	; (80069fc <mainTask+0x1a30>)
 800681c:	f001 fcac 	bl	8008178 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d114      	bne.n	8006850 <mainTask+0x1884>
 8006826:	4b76      	ldr	r3, [pc, #472]	; (8006a00 <mainTask+0x1a34>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d003      	beq.n	8006836 <mainTask+0x186a>
 800682e:	4b74      	ldr	r3, [pc, #464]	; (8006a00 <mainTask+0x1a34>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d10c      	bne.n	8006850 <mainTask+0x1884>
				  {
					  hataVar=1;
 8006836:	4b6c      	ldr	r3, [pc, #432]	; (80069e8 <mainTask+0x1a1c>)
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(4);
 800683c:	2004      	movs	r0, #4
 800683e:	f7fd fe7b 	bl	8004538 <hataKoduLcdGoster>
					  hata2EEPROM(4);
 8006842:	2004      	movs	r0, #4
 8006844:	f7fe f9ba 	bl	8004bbc <hata2EEPROM>
					  katkapisivicihatasi=1;
 8006848:	4b6e      	ldr	r3, [pc, #440]	; (8006a04 <mainTask+0x1a38>)
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e01f      	b.n	8006890 <mainTask+0x18c4>
				  }
				  else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)
 8006850:	4b6c      	ldr	r3, [pc, #432]	; (8006a04 <mainTask+0x1a38>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <mainTask+0x18c4>
 8006858:	4b6b      	ldr	r3, [pc, #428]	; (8006a08 <mainTask+0x1a3c>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d017      	beq.n	8006890 <mainTask+0x18c4>
 8006860:	4b64      	ldr	r3, [pc, #400]	; (80069f4 <mainTask+0x1a28>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f083 0301 	eor.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <mainTask+0x18c4>
 800686e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006872:	4862      	ldr	r0, [pc, #392]	; (80069fc <mainTask+0x1a30>)
 8006874:	f001 fc80 	bl	8008178 <HAL_GPIO_ReadPin>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <mainTask+0x18c4>
				  {
					  katkapisivicihatasi=0;
 800687e:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <mainTask+0x1a38>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyorkapi=0;
 8006884:	4b5c      	ldr	r3, [pc, #368]	; (80069f8 <mainTask+0x1a2c>)
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
				  	  lcdUpdate(4);
 800688a:	2004      	movs	r0, #4
 800688c:	f7fd fe00 	bl	8004490 <lcdUpdate>
				  }

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				  if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3))
 8006890:	4b58      	ldr	r3, [pc, #352]	; (80069f4 <mainTask+0x1a28>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <mainTask+0x18d4>
 8006898:	4b5c      	ldr	r3, [pc, #368]	; (8006a0c <mainTask+0x1a40>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01c      	beq.n	80068da <mainTask+0x190e>
 80068a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a4:	4855      	ldr	r0, [pc, #340]	; (80069fc <mainTask+0x1a30>)
 80068a6:	f001 fc67 	bl	8008178 <HAL_GPIO_ReadPin>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d114      	bne.n	80068da <mainTask+0x190e>
 80068b0:	4b53      	ldr	r3, [pc, #332]	; (8006a00 <mainTask+0x1a34>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d003      	beq.n	80068c0 <mainTask+0x18f4>
 80068b8:	4b51      	ldr	r3, [pc, #324]	; (8006a00 <mainTask+0x1a34>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d10c      	bne.n	80068da <mainTask+0x190e>
				  {
					  hataVar=1;
 80068c0:	4b49      	ldr	r3, [pc, #292]	; (80069e8 <mainTask+0x1a1c>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
					  hataKoduLcdGoster(5);
 80068c6:	2005      	movs	r0, #5
 80068c8:	f7fd fe36 	bl	8004538 <hataKoduLcdGoster>
					  hata2EEPROM(5);
 80068cc:	2005      	movs	r0, #5
 80068ce:	f7fe f975 	bl	8004bbc <hata2EEPROM>
					  tablakapisivicihatasi=1;
 80068d2:	4b4f      	ldr	r3, [pc, #316]	; (8006a10 <mainTask+0x1a44>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e023      	b.n	8006922 <mainTask+0x1956>
				  }
				  else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1)
 80068da:	4b4d      	ldr	r3, [pc, #308]	; (8006a10 <mainTask+0x1a44>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01f      	beq.n	8006922 <mainTask+0x1956>
 80068e2:	4b49      	ldr	r3, [pc, #292]	; (8006a08 <mainTask+0x1a3c>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01b      	beq.n	8006922 <mainTask+0x1956>
 80068ea:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <mainTask+0x1a28>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f083 0301 	eor.w	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <mainTask+0x1956>
 80068f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068fc:	483f      	ldr	r0, [pc, #252]	; (80069fc <mainTask+0x1a30>)
 80068fe:	f001 fc3b 	bl	8008178 <HAL_GPIO_ReadPin>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <mainTask+0x1956>
 8006908:	4b3f      	ldr	r3, [pc, #252]	; (8006a08 <mainTask+0x1a3c>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <mainTask+0x1956>
				  {
					  tablakapisivicihatasi=0;
 8006910:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <mainTask+0x1a44>)
 8006912:	2200      	movs	r2, #0
 8006914:	701a      	strb	r2, [r3, #0]
				  	  HataMakineCalisiyortabla=0;
 8006916:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <mainTask+0x1a40>)
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
				  	  lcdUpdate(5);
 800691c:	2005      	movs	r0, #5
 800691e:	f7fd fdb7 	bl	8004490 <lcdUpdate>
				  }


		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				   if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor))
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <mainTask+0x1a14>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <mainTask+0x196e>
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <mainTask+0x1a04>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <mainTask+0x196e>
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <mainTask+0x1a48>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d014      	beq.n	8006964 <mainTask+0x1998>
				  	 {

			    	if(millis-timer4>=makineCalismaTmr)
 800693a:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <mainTask+0x1a4c>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b37      	ldr	r3, [pc, #220]	; (8006a1c <mainTask+0x1a50>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	4a36      	ldr	r2, [pc, #216]	; (8006a20 <mainTask+0x1a54>)
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	4293      	cmp	r3, r2
 800694a:	d30b      	bcc.n	8006964 <mainTask+0x1998>
				  	  {
				  		hataVar=1;
 800694c:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <mainTask+0x1a1c>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
				  		hataKoduLcdGoster(6);
 8006952:	2006      	movs	r0, #6
 8006954:	f7fd fdf0 	bl	8004538 <hataKoduLcdGoster>
				  		hata2EEPROM(6);
 8006958:	2006      	movs	r0, #6
 800695a:	f7fe f92f 	bl	8004bbc <hata2EEPROM>
				  		maksimumcalismahatasi=1;
 800695e:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <mainTask+0x1a58>)
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
				  	  }
				    }

				   if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0){
 8006964:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <mainTask+0x1a58>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <mainTask+0x19c8>
 800696c:	2108      	movs	r1, #8
 800696e:	4823      	ldr	r0, [pc, #140]	; (80069fc <mainTask+0x1a30>)
 8006970:	f001 fc02 	bl	8008178 <HAL_GPIO_ReadPin>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <mainTask+0x19c8>
 800697a:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <mainTask+0x1a28>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f083 0301 	eor.w	r3, r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <mainTask+0x19c8>

				  		maksimumcalismahatasi=0;
 8006988:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <mainTask+0x1a58>)
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
				  		lcdUpdate(6);
 800698e:	2006      	movs	r0, #6
 8006990:	f7fd fd7e 	bl	8004490 <lcdUpdate>
				  	}

				  	if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)){
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <mainTask+0x1a5c>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <mainTask+0x19e8>
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <mainTask+0x1a04>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <mainTask+0x19e8>
 80069a4:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <mainTask+0x1a60>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <mainTask+0x19e8>
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <mainTask+0x1a48>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d03f      	beq.n	8006a34 <mainTask+0x1a68>
				  		makineCalisiyor=0;
 80069b4:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <mainTask+0x1a64>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyorkapi=1;
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <mainTask+0x1a2c>)
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
				  		HataMakineCalisiyortabla=1;
 80069c0:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <mainTask+0x1a40>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e03c      	b.n	8006a42 <mainTask+0x1a76>
 80069c8:	20000ccc 	.word	0x20000ccc
 80069cc:	20000cd2 	.word	0x20000cd2
 80069d0:	20000cb3 	.word	0x20000cb3
 80069d4:	20000cdc 	.word	0x20000cdc
 80069d8:	20000c7f 	.word	0x20000c7f
 80069dc:	20000c83 	.word	0x20000c83
 80069e0:	20000ccf 	.word	0x20000ccf
 80069e4:	40011000 	.word	0x40011000
 80069e8:	20000cd0 	.word	0x20000cd0
 80069ec:	20000cd9 	.word	0x20000cd9
 80069f0:	40010c00 	.word	0x40010c00
 80069f4:	20000cc9 	.word	0x20000cc9
 80069f8:	20000cdd 	.word	0x20000cdd
 80069fc:	40010800 	.word	0x40010800
 8006a00:	20000c84 	.word	0x20000c84
 8006a04:	20000cda 	.word	0x20000cda
 8006a08:	20000cbd 	.word	0x20000cbd
 8006a0c:	20000cde 	.word	0x20000cde
 8006a10:	20000cdb 	.word	0x20000cdb
 8006a14:	20000cb2 	.word	0x20000cb2
 8006a18:	20000c5c 	.word	0x20000c5c
 8006a1c:	20000c70 	.word	0x20000c70
 8006a20:	20000c94 	.word	0x20000c94
 8006a24:	20000cca 	.word	0x20000cca
 8006a28:	20000cb0 	.word	0x20000cb0
 8006a2c:	20000cb1 	.word	0x20000cb1
 8006a30:	20000cd1 	.word	0x20000cd1
				  	}
				  	else
				  	{
				  		makineCalisiyor=1;
 8006a34:	4b8e      	ldr	r3, [pc, #568]	; (8006c70 <mainTask+0x1ca4>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
				  		timer4=millis;
 8006a3a:	4b8e      	ldr	r3, [pc, #568]	; (8006c74 <mainTask+0x1ca8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a8e      	ldr	r2, [pc, #568]	; (8006c78 <mainTask+0x1cac>)
 8006a40:	6013      	str	r3, [r2, #0]
				  	}
		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				  if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006a42:	4b8e      	ldr	r3, [pc, #568]	; (8006c7c <mainTask+0x1cb0>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02f      	beq.n	8006aaa <mainTask+0x1ade>
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <mainTask+0x1cb4>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	f083 0301 	eor.w	r3, r3, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d028      	beq.n	8006aaa <mainTask+0x1ade>
 8006a58:	4b8a      	ldr	r3, [pc, #552]	; (8006c84 <mainTask+0x1cb8>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f083 0301 	eor.w	r3, r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d021      	beq.n	8006aaa <mainTask+0x1ade>
 8006a66:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <mainTask+0x1cbc>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f083 0301 	eor.w	r3, r3, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <mainTask+0x1ade>
						  && katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0){
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <mainTask+0x1cc0>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f083 0301 	eor.w	r3, r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <mainTask+0x1ade>
 8006a82:	4b83      	ldr	r3, [pc, #524]	; (8006c90 <mainTask+0x1cc4>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f083 0301 	eor.w	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00c      	beq.n	8006aaa <mainTask+0x1ade>
 8006a90:	4b80      	ldr	r3, [pc, #512]	; (8006c94 <mainTask+0x1cc8>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f083 0301 	eor.w	r3, r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <mainTask+0x1ade>
					  hataVar=0;
 8006a9e:	4b77      	ldr	r3, [pc, #476]	; (8006c7c <mainTask+0x1cb0>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
					  lcdUpdate(7);
 8006aa4:	2007      	movs	r0, #7
 8006aa6:	f7fd fcf3 	bl	8004490 <lcdUpdate>

				  // DEMO MOD BASLIYOR

				  // DEMO YUKARI CALISMA

				  if((demoMode==1)&&(stopVar)&&(menuGiris==0)){
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	; (8006c98 <mainTask+0x1ccc>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	f040 8268 	bne.w	8006f84 <mainTask+0x1fb8>
 8006ab4:	4b79      	ldr	r3, [pc, #484]	; (8006c9c <mainTask+0x1cd0>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8263 	beq.w	8006f84 <mainTask+0x1fb8>
 8006abe:	4b78      	ldr	r3, [pc, #480]	; (8006ca0 <mainTask+0x1cd4>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 825e 	bne.w	8006f84 <mainTask+0x1fb8>

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ac8:	2102      	movs	r1, #2
 8006aca:	4876      	ldr	r0, [pc, #472]	; (8006ca4 <mainTask+0x1cd8>)
 8006acc:	f001 fb54 	bl	8008178 <HAL_GPIO_ReadPin>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d11d      	bne.n	8006b12 <mainTask+0x1b46>
						      && (demoAsagiCalis==0)
 8006ad6:	4b74      	ldr	r3, [pc, #464]	; (8006ca8 <mainTask+0x1cdc>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f083 0301 	eor.w	r3, r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d016      	beq.n	8006b12 <mainTask+0x1b46>
							  && (demoDevYukari==0)
 8006ae4:	4b71      	ldr	r3, [pc, #452]	; (8006cac <mainTask+0x1ce0>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f083 0301 	eor.w	r3, r3, #1
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00f      	beq.n	8006b12 <mainTask+0x1b46>
							  && (demoDevAsagi==0)){
 8006af2:	4b6f      	ldr	r3, [pc, #444]	; (8006cb0 <mainTask+0x1ce4>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f083 0301 	eor.w	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <mainTask+0x1b46>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006b00:	2201      	movs	r2, #1
 8006b02:	2104      	movs	r1, #4
 8006b04:	486b      	ldr	r0, [pc, #428]	; (8006cb4 <mainTask+0x1ce8>)
 8006b06:	f001 fb4e 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoYukariCalis=1;
 8006b0a:	4b6b      	ldr	r3, [pc, #428]	; (8006cb8 <mainTask+0x1cec>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e00e      	b.n	8006b30 <mainTask+0x1b64>
					  }
					  else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1){
 8006b12:	2102      	movs	r1, #2
 8006b14:	4863      	ldr	r0, [pc, #396]	; (8006ca4 <mainTask+0x1cd8>)
 8006b16:	f001 fb2f 	bl	8008178 <HAL_GPIO_ReadPin>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d107      	bne.n	8006b30 <mainTask+0x1b64>
						  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b20:	2200      	movs	r2, #0
 8006b22:	2104      	movs	r1, #4
 8006b24:	4863      	ldr	r0, [pc, #396]	; (8006cb4 <mainTask+0x1ce8>)
 8006b26:	f001 fb3e 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoYukariCalis=0;
 8006b2a:	4b63      	ldr	r3, [pc, #396]	; (8006cb8 <mainTask+0x1cec>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO MOTOR CALISMASI

					  if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)){
 8006b30:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <mainTask+0x1cec>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <mainTask+0x1b84>
 8006b38:	4b5c      	ldr	r3, [pc, #368]	; (8006cac <mainTask+0x1ce0>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <mainTask+0x1b84>
 8006b40:	4b5b      	ldr	r3, [pc, #364]	; (8006cb0 <mainTask+0x1ce4>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <mainTask+0x1b84>
 8006b48:	4b57      	ldr	r3, [pc, #348]	; (8006ca8 <mainTask+0x1cdc>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <mainTask+0x1b9e>

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006b50:	2201      	movs	r2, #1
 8006b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b56:	4857      	ldr	r0, [pc, #348]	; (8006cb4 <mainTask+0x1ce8>)
 8006b58:	f001 fb25 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b62:	4854      	ldr	r0, [pc, #336]	; (8006cb4 <mainTask+0x1ce8>)
 8006b64:	f001 fb1f 	bl	80081a6 <HAL_GPIO_WritePin>
 8006b68:	e00b      	b.n	8006b82 <mainTask+0x1bb6>

					  }
					  else {

						  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b70:	4850      	ldr	r0, [pc, #320]	; (8006cb4 <mainTask+0x1ce8>)
 8006b72:	f001 fb18 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b76:	2200      	movs	r2, #0
 8006b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b7c:	484d      	ldr	r0, [pc, #308]	; (8006cb4 <mainTask+0x1ce8>)
 8006b7e:	f001 fb12 	bl	80081a6 <HAL_GPIO_WritePin>
					  }
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b82:	2102      	movs	r1, #2
 8006b84:	4847      	ldr	r0, [pc, #284]	; (8006ca4 <mainTask+0x1cd8>)
 8006b86:	f001 faf7 	bl	8008178 <HAL_GPIO_ReadPin>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10d      	bne.n	8006bac <mainTask+0x1be0>
							  && (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b94:	4843      	ldr	r0, [pc, #268]	; (8006ca4 <mainTask+0x1cd8>)
 8006b96:	f001 faef 	bl	8008178 <HAL_GPIO_ReadPin>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <mainTask+0x1be0>
							  && (demoYukariCalis==0)
 8006ba0:	4b45      	ldr	r3, [pc, #276]	; (8006cb8 <mainTask+0x1cec>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0


					  }

					  //DEVİRME YUKARI CALIS
					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006bac:	2102      	movs	r1, #2
 8006bae:	483d      	ldr	r0, [pc, #244]	; (8006ca4 <mainTask+0x1cd8>)
 8006bb0:	f001 fae2 	bl	8008178 <HAL_GPIO_ReadPin>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d125      	bne.n	8006c06 <mainTask+0x1c3a>
							  &&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bbe:	4839      	ldr	r0, [pc, #228]	; (8006ca4 <mainTask+0x1cd8>)
 8006bc0:	f001 fada 	bl	8008178 <HAL_GPIO_ReadPin>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d11d      	bne.n	8006c06 <mainTask+0x1c3a>
							  &&(demoYukariCalis==0)
 8006bca:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <mainTask+0x1cec>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f083 0301 	eor.w	r3, r3, #1
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d016      	beq.n	8006c06 <mainTask+0x1c3a>
							  &&(demoAsagiCalis==0)
 8006bd8:	4b33      	ldr	r3, [pc, #204]	; (8006ca8 <mainTask+0x1cdc>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f083 0301 	eor.w	r3, r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <mainTask+0x1c3a>
							  && (demoDevAsagi==0)){
 8006be6:	4b32      	ldr	r3, [pc, #200]	; (8006cb0 <mainTask+0x1ce4>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	f083 0301 	eor.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <mainTask+0x1c3a>
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2120      	movs	r1, #32
 8006bf8:	482a      	ldr	r0, [pc, #168]	; (8006ca4 <mainTask+0x1cd8>)
 8006bfa:	f001 fad4 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoDevYukari=1;
 8006bfe:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <mainTask+0x1ce0>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e007      	b.n	8006c16 <mainTask+0x1c4a>
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2120      	movs	r1, #32
 8006c0a:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <mainTask+0x1cd8>)
 8006c0c:	f001 facb 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoDevYukari=0;
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <mainTask+0x1ce0>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
					  }

					  // DEVIRME ASAGI CALIS

					  if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c16:	2102      	movs	r1, #2
 8006c18:	4822      	ldr	r0, [pc, #136]	; (8006ca4 <mainTask+0x1cd8>)
 8006c1a:	f001 faad 	bl	8008178 <HAL_GPIO_ReadPin>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d14b      	bne.n	8006cbc <mainTask+0x1cf0>
							  &&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c28:	481e      	ldr	r0, [pc, #120]	; (8006ca4 <mainTask+0x1cd8>)
 8006c2a:	f001 faa5 	bl	8008178 <HAL_GPIO_ReadPin>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d143      	bne.n	8006cbc <mainTask+0x1cf0>
							  &&(demoYukariCalis==0)
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <mainTask+0x1cec>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f083 0301 	eor.w	r3, r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d03c      	beq.n	8006cbc <mainTask+0x1cf0>
							  &&(demoDevYukari==0)
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <mainTask+0x1ce0>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f083 0301 	eor.w	r3, r3, #1
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d035      	beq.n	8006cbc <mainTask+0x1cf0>
							  && (demoAsagiCalis==0)){
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <mainTask+0x1cdc>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f083 0301 	eor.w	r3, r3, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d02e      	beq.n	8006cbc <mainTask+0x1cf0>
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006c5e:	2201      	movs	r2, #1
 8006c60:	2110      	movs	r1, #16
 8006c62:	4810      	ldr	r0, [pc, #64]	; (8006ca4 <mainTask+0x1cd8>)
 8006c64:	f001 fa9f 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoDevAsagi=1;
 8006c68:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <mainTask+0x1ce4>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	e02d      	b.n	8006ccc <mainTask+0x1d00>
 8006c70:	20000cd1 	.word	0x20000cd1
 8006c74:	20000c5c 	.word	0x20000c5c
 8006c78:	20000c70 	.word	0x20000c70
 8006c7c:	20000cd0 	.word	0x20000cd0
 8006c80:	20000ccb 	.word	0x20000ccb
 8006c84:	20000ccc 	.word	0x20000ccc
 8006c88:	20000cd9 	.word	0x20000cd9
 8006c8c:	20000cda 	.word	0x20000cda
 8006c90:	20000cdb 	.word	0x20000cdb
 8006c94:	20000cca 	.word	0x20000cca
 8006c98:	20000c9a 	.word	0x20000c9a
 8006c9c:	20000ccd 	.word	0x20000ccd
 8006ca0:	20000c99 	.word	0x20000c99
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	20000cd4 	.word	0x20000cd4
 8006cac:	20000cd5 	.word	0x20000cd5
 8006cb0:	20000cd6 	.word	0x20000cd6
 8006cb4:	40010c00 	.word	0x40010c00
 8006cb8:	20000cd3 	.word	0x20000cd3
					  }
					  else{
						  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2110      	movs	r1, #16
 8006cc0:	489a      	ldr	r0, [pc, #616]	; (8006f2c <mainTask+0x1f60>)
 8006cc2:	f001 fa70 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoDevAsagi=0;
 8006cc6:	4b9a      	ldr	r3, [pc, #616]	; (8006f30 <mainTask+0x1f64>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
					  }

					  // DEMO ASAGI CALISMA

					  if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006ccc:	2104      	movs	r1, #4
 8006cce:	4897      	ldr	r0, [pc, #604]	; (8006f2c <mainTask+0x1f60>)
 8006cd0:	f001 fa52 	bl	8008178 <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d125      	bne.n	8006d26 <mainTask+0x1d5a>
						      && (demoYukariCalis==0)
 8006cda:	4b96      	ldr	r3, [pc, #600]	; (8006f34 <mainTask+0x1f68>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01e      	beq.n	8006d26 <mainTask+0x1d5a>
							  && (demoDevAsagi==0)
 8006ce8:	4b91      	ldr	r3, [pc, #580]	; (8006f30 <mainTask+0x1f64>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f083 0301 	eor.w	r3, r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <mainTask+0x1d5a>
							  && (demoDevYukari==0)){
 8006cf6:	4b90      	ldr	r3, [pc, #576]	; (8006f38 <mainTask+0x1f6c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	f083 0301 	eor.w	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d010      	beq.n	8006d26 <mainTask+0x1d5a>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006d04:	2201      	movs	r2, #1
 8006d06:	2102      	movs	r1, #2
 8006d08:	488c      	ldr	r0, [pc, #560]	; (8006f3c <mainTask+0x1f70>)
 8006d0a:	f001 fa4c 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2101      	movs	r1, #1
 8006d12:	488a      	ldr	r0, [pc, #552]	; (8006f3c <mainTask+0x1f70>)
 8006d14:	f001 fa47 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoAsagiCalis=1;
 8006d18:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <mainTask+0x1f74>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
						  demoCalismaSayisiYar=1;
 8006d1e:	4b89      	ldr	r3, [pc, #548]	; (8006f44 <mainTask+0x1f78>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	e013      	b.n	8006d4e <mainTask+0x1d82>
					  }
					  else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)){
 8006d26:	2104      	movs	r1, #4
 8006d28:	4880      	ldr	r0, [pc, #512]	; (8006f2c <mainTask+0x1f60>)
 8006d2a:	f001 fa25 	bl	8008178 <HAL_GPIO_ReadPin>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10c      	bne.n	8006d4e <mainTask+0x1d82>
						  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006d34:	2200      	movs	r2, #0
 8006d36:	2102      	movs	r1, #2
 8006d38:	4880      	ldr	r0, [pc, #512]	; (8006f3c <mainTask+0x1f70>)
 8006d3a:	f001 fa34 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2101      	movs	r1, #1
 8006d42:	487e      	ldr	r0, [pc, #504]	; (8006f3c <mainTask+0x1f70>)
 8006d44:	f001 fa2f 	bl	80081a6 <HAL_GPIO_WritePin>
						  demoAsagiCalis=0;
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <mainTask+0x1f74>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
					  }

					  if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)
 8006d4e:	2104      	movs	r1, #4
 8006d50:	4876      	ldr	r0, [pc, #472]	; (8006f2c <mainTask+0x1f60>)
 8006d52:	f001 fa11 	bl	8008178 <HAL_GPIO_ReadPin>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d10d      	bne.n	8006d78 <mainTask+0x1dac>
					  {

						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2180      	movs	r1, #128	; 0x80
 8006d60:	4879      	ldr	r0, [pc, #484]	; (8006f48 <mainTask+0x1f7c>)
 8006d62:	f001 fa20 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006d66:	2201      	movs	r2, #1
 8006d68:	2120      	movs	r1, #32
 8006d6a:	4877      	ldr	r0, [pc, #476]	; (8006f48 <mainTask+0x1f7c>)
 8006d6c:	f001 fa1b 	bl	80081a6 <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006d70:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <mainTask+0x1f80>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a76      	ldr	r2, [pc, #472]	; (8006f50 <mainTask+0x1f84>)
 8006d76:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006d78:	4b74      	ldr	r3, [pc, #464]	; (8006f4c <mainTask+0x1f80>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	4b74      	ldr	r3, [pc, #464]	; (8006f50 <mainTask+0x1f84>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d909      	bls.n	8006d9a <mainTask+0x1dce>
					  {
						  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	486f      	ldr	r0, [pc, #444]	; (8006f48 <mainTask+0x1f7c>)
 8006d8c:	f001 fa0b 	bl	80081a6 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006d90:	2200      	movs	r2, #0
 8006d92:	2120      	movs	r1, #32
 8006d94:	486c      	ldr	r0, [pc, #432]	; (8006f48 <mainTask+0x1f7c>)
 8006d96:	f001 fa06 	bl	80081a6 <HAL_GPIO_WritePin>
					  }

					  if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	4863      	ldr	r0, [pc, #396]	; (8006f2c <mainTask+0x1f60>)
 8006d9e:	f001 f9eb 	bl	8008178 <HAL_GPIO_ReadPin>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d108      	bne.n	8006dba <mainTask+0x1dee>
					  {

						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006da8:	2201      	movs	r2, #1
 8006daa:	2140      	movs	r1, #64	; 0x40
 8006dac:	4866      	ldr	r0, [pc, #408]	; (8006f48 <mainTask+0x1f7c>)
 8006dae:	f001 f9fa 	bl	80081a6 <HAL_GPIO_WritePin>
						  timer3 = millis;
 8006db2:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <mainTask+0x1f80>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a66      	ldr	r2, [pc, #408]	; (8006f50 <mainTask+0x1f84>)
 8006db8:	6013      	str	r3, [r2, #0]

					  }

					  if(millis-timer3 >= 5)
 8006dba:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <mainTask+0x1f80>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b64      	ldr	r3, [pc, #400]	; (8006f50 <mainTask+0x1f84>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d904      	bls.n	8006dd2 <mainTask+0x1e06>
					  {
						  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2140      	movs	r1, #64	; 0x40
 8006dcc:	485e      	ldr	r0, [pc, #376]	; (8006f48 <mainTask+0x1f7c>)
 8006dce:	f001 f9ea 	bl	80081a6 <HAL_GPIO_WritePin>

					  }
					  if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)){
 8006dd2:	4b58      	ldr	r3, [pc, #352]	; (8006f34 <mainTask+0x1f68>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d058      	beq.n	8006e8c <mainTask+0x1ec0>
 8006dda:	4b5a      	ldr	r3, [pc, #360]	; (8006f44 <mainTask+0x1f78>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d054      	beq.n	8006e8c <mainTask+0x1ec0>
						  //mesajYazildi=0;
							calismaSayisi1=calismaSayisi1+1;
 8006de2:	4b5c      	ldr	r3, [pc, #368]	; (8006f54 <mainTask+0x1f88>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b5a      	ldr	r3, [pc, #360]	; (8006f54 <mainTask+0x1f88>)
 8006dec:	701a      	strb	r2, [r3, #0]
							if(calismaSayisi1>9){
 8006dee:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <mainTask+0x1f88>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d908      	bls.n	8006e08 <mainTask+0x1e3c>
								calismaSayisi1=0;
 8006df6:	4b57      	ldr	r3, [pc, #348]	; (8006f54 <mainTask+0x1f88>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
								calismaSayisi10=calismaSayisi10+1;
 8006dfc:	4b56      	ldr	r3, [pc, #344]	; (8006f58 <mainTask+0x1f8c>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	4b54      	ldr	r3, [pc, #336]	; (8006f58 <mainTask+0x1f8c>)
 8006e06:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi10>9){
 8006e08:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <mainTask+0x1f8c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d908      	bls.n	8006e22 <mainTask+0x1e56>
								calismaSayisi10=0;
 8006e10:	4b51      	ldr	r3, [pc, #324]	; (8006f58 <mainTask+0x1f8c>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
								calismaSayisi100=calismaSayisi100+1;
 8006e16:	4b51      	ldr	r3, [pc, #324]	; (8006f5c <mainTask+0x1f90>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4b4f      	ldr	r3, [pc, #316]	; (8006f5c <mainTask+0x1f90>)
 8006e20:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi100>9){
 8006e22:	4b4e      	ldr	r3, [pc, #312]	; (8006f5c <mainTask+0x1f90>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d908      	bls.n	8006e3c <mainTask+0x1e70>
								calismaSayisi100=0;
 8006e2a:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <mainTask+0x1f90>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
								calismaSayisi1000=calismaSayisi1000+1;
 8006e30:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <mainTask+0x1f94>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	4b49      	ldr	r3, [pc, #292]	; (8006f60 <mainTask+0x1f94>)
 8006e3a:	701a      	strb	r2, [r3, #0]
							}
							if(calismaSayisi1000>9){
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <mainTask+0x1f94>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d908      	bls.n	8006e56 <mainTask+0x1e8a>
								calismaSayisi1000=0;
 8006e44:	4b46      	ldr	r3, [pc, #280]	; (8006f60 <mainTask+0x1f94>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
								calismaSayisi10000=calismaSayisi10000+1;
 8006e4a:	4b46      	ldr	r3, [pc, #280]	; (8006f64 <mainTask+0x1f98>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	4b44      	ldr	r3, [pc, #272]	; (8006f64 <mainTask+0x1f98>)
 8006e54:	701a      	strb	r2, [r3, #0]
							}
							eepromData[32]=calismaSayisi10000;
 8006e56:	4b43      	ldr	r3, [pc, #268]	; (8006f64 <mainTask+0x1f98>)
 8006e58:	781a      	ldrb	r2, [r3, #0]
 8006e5a:	4b43      	ldr	r3, [pc, #268]	; (8006f68 <mainTask+0x1f9c>)
 8006e5c:	f883 2020 	strb.w	r2, [r3, #32]
							eepromData[31]=calismaSayisi1000;
 8006e60:	4b3f      	ldr	r3, [pc, #252]	; (8006f60 <mainTask+0x1f94>)
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	4b40      	ldr	r3, [pc, #256]	; (8006f68 <mainTask+0x1f9c>)
 8006e66:	77da      	strb	r2, [r3, #31]
							eepromData[30]=calismaSayisi100;
 8006e68:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <mainTask+0x1f90>)
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <mainTask+0x1f9c>)
 8006e6e:	779a      	strb	r2, [r3, #30]
							eepromData[29]=calismaSayisi10;
 8006e70:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <mainTask+0x1f8c>)
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <mainTask+0x1f9c>)
 8006e76:	775a      	strb	r2, [r3, #29]
							eepromData[28]=calismaSayisi1;
 8006e78:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <mainTask+0x1f88>)
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <mainTask+0x1f9c>)
 8006e7e:	771a      	strb	r2, [r3, #28]
							hafizaYaz=1;
 8006e80:	4b3a      	ldr	r3, [pc, #232]	; (8006f6c <mainTask+0x1fa0>)
 8006e82:	2201      	movs	r2, #1
 8006e84:	701a      	strb	r2, [r3, #0]
		   				  //mesajYazildi=0;
						  demoCalismaSayisiYar=0;
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <mainTask+0x1f78>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
					  }
					  if (menuGiris==0){
 8006e8c:	4b38      	ldr	r3, [pc, #224]	; (8006f70 <mainTask+0x1fa4>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 80b4 	bne.w	8006ffe <mainTask+0x2032>
						  lcd_print(2,1,"Cycle      ");
 8006e96:	4a37      	ldr	r2, [pc, #220]	; (8006f74 <mainTask+0x1fa8>)
 8006e98:	2101      	movs	r1, #1
 8006e9a:	2002      	movs	r0, #2
 8006e9c:	f7f9 faa8 	bl	80003f0 <lcd_print>
						  lcd_print(1,1, "    DEMO MODE   ");
 8006ea0:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <mainTask+0x1fac>)
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7f9 faa3 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10000, snum, 10);
 8006eaa:	4b2e      	ldr	r3, [pc, #184]	; (8006f64 <mainTask+0x1f98>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	220a      	movs	r2, #10
 8006eb0:	4932      	ldr	r1, [pc, #200]	; (8006f7c <mainTask+0x1fb0>)
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f005 fb64 	bl	800c580 <itoa>
						    lcd_print(2,12,snum);
 8006eb8:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <mainTask+0x1fb0>)
 8006eba:	210c      	movs	r1, #12
 8006ebc:	2002      	movs	r0, #2
 8006ebe:	f7f9 fa97 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1000, snum, 10);
 8006ec2:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <mainTask+0x1f94>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	220a      	movs	r2, #10
 8006ec8:	492c      	ldr	r1, [pc, #176]	; (8006f7c <mainTask+0x1fb0>)
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f005 fb58 	bl	800c580 <itoa>
						    lcd_print(2,13,snum);
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	; (8006f7c <mainTask+0x1fb0>)
 8006ed2:	210d      	movs	r1, #13
 8006ed4:	2002      	movs	r0, #2
 8006ed6:	f7f9 fa8b 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi100, snum, 10);
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <mainTask+0x1f90>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	220a      	movs	r2, #10
 8006ee0:	4926      	ldr	r1, [pc, #152]	; (8006f7c <mainTask+0x1fb0>)
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f005 fb4c 	bl	800c580 <itoa>
						    lcd_print(2,14,snum);
 8006ee8:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <mainTask+0x1fb0>)
 8006eea:	210e      	movs	r1, #14
 8006eec:	2002      	movs	r0, #2
 8006eee:	f7f9 fa7f 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi10, snum, 10);
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <mainTask+0x1f8c>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	4920      	ldr	r1, [pc, #128]	; (8006f7c <mainTask+0x1fb0>)
 8006efa:	4618      	mov	r0, r3
 8006efc:	f005 fb40 	bl	800c580 <itoa>
						    lcd_print(2,15,snum);
 8006f00:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <mainTask+0x1fb0>)
 8006f02:	210f      	movs	r1, #15
 8006f04:	2002      	movs	r0, #2
 8006f06:	f7f9 fa73 	bl	80003f0 <lcd_print>
						    itoa(calismaSayisi1, snum, 10);
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <mainTask+0x1f88>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	220a      	movs	r2, #10
 8006f10:	491a      	ldr	r1, [pc, #104]	; (8006f7c <mainTask+0x1fb0>)
 8006f12:	4618      	mov	r0, r3
 8006f14:	f005 fb34 	bl	800c580 <itoa>
						    lcd_print(2,16,snum);
 8006f18:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <mainTask+0x1fb0>)
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	2002      	movs	r0, #2
 8006f1e:	f7f9 fa67 	bl	80003f0 <lcd_print>
						  mesajYazildi=1;
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <mainTask+0x1fb4>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]
					  if (menuGiris==0){
 8006f28:	e069      	b.n	8006ffe <mainTask+0x2032>
 8006f2a:	bf00      	nop
 8006f2c:	40011000 	.word	0x40011000
 8006f30:	20000cd6 	.word	0x20000cd6
 8006f34:	20000cd3 	.word	0x20000cd3
 8006f38:	20000cd5 	.word	0x20000cd5
 8006f3c:	40010c00 	.word	0x40010c00
 8006f40:	20000cd4 	.word	0x20000cd4
 8006f44:	20000cb9 	.word	0x20000cb9
 8006f48:	40010800 	.word	0x40010800
 8006f4c:	20000c5c 	.word	0x20000c5c
 8006f50:	20000c6c 	.word	0x20000c6c
 8006f54:	20000c79 	.word	0x20000c79
 8006f58:	20000c7a 	.word	0x20000c7a
 8006f5c:	20000940 	.word	0x20000940
 8006f60:	20000941 	.word	0x20000941
 8006f64:	20000c7b 	.word	0x20000c7b
 8006f68:	20000c14 	.word	0x20000c14
 8006f6c:	20000ca7 	.word	0x20000ca7
 8006f70:	20000c99 	.word	0x20000c99
 8006f74:	0800d5d4 	.word	0x0800d5d4
 8006f78:	0800d5e0 	.word	0x0800d5e0
 8006f7c:	20000c54 	.word	0x20000c54
 8006f80:	20000caf 	.word	0x20000caf
				  }
		    /* USER CODE END WHILE */

		    /* USER CODE BEGIN 3 */

				  else if(demoMode==1 || menuGiris==1)
 8006f84:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <mainTask+0x2038>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d004      	beq.n	8006f96 <mainTask+0x1fca>
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <mainTask+0x203c>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	f47e a81f 	bne.w	8004fd4 <mainTask+0x8>
				  {
					  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006f96:	2200      	movs	r2, #0
 8006f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f9c:	481b      	ldr	r0, [pc, #108]	; (800700c <mainTask+0x2040>)
 8006f9e:	f001 f902 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fa8:	4818      	ldr	r0, [pc, #96]	; (800700c <mainTask+0x2040>)
 8006faa:	f001 f8fc 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	4816      	ldr	r0, [pc, #88]	; (800700c <mainTask+0x2040>)
 8006fb4:	f001 f8f7 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2102      	movs	r1, #2
 8006fbc:	4813      	ldr	r0, [pc, #76]	; (800700c <mainTask+0x2040>)
 8006fbe:	f001 f8f2 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4811      	ldr	r0, [pc, #68]	; (800700c <mainTask+0x2040>)
 8006fc8:	f001 f8ed 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2120      	movs	r1, #32
 8006fd0:	480f      	ldr	r0, [pc, #60]	; (8007010 <mainTask+0x2044>)
 8006fd2:	f001 f8e8 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2110      	movs	r1, #16
 8006fda:	480d      	ldr	r0, [pc, #52]	; (8007010 <mainTask+0x2044>)
 8006fdc:	f001 f8e3 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	480b      	ldr	r0, [pc, #44]	; (8007014 <mainTask+0x2048>)
 8006fe6:	f001 f8de 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006fea:	2200      	movs	r2, #0
 8006fec:	2140      	movs	r1, #64	; 0x40
 8006fee:	4809      	ldr	r0, [pc, #36]	; (8007014 <mainTask+0x2048>)
 8006ff0:	f001 f8d9 	bl	80081a6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2120      	movs	r1, #32
 8006ff8:	4806      	ldr	r0, [pc, #24]	; (8007014 <mainTask+0x2048>)
 8006ffa:	f001 f8d4 	bl	80081a6 <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1))
 8006ffe:	f7fd bfe9 	b.w	8004fd4 <mainTask+0x8>
 8007002:	bf00      	nop
 8007004:	20000c9a 	.word	0x20000c9a
 8007008:	20000c99 	.word	0x20000c99
 800700c:	40010c00 	.word	0x40010c00
 8007010:	40011000 	.word	0x40011000
 8007014:	40010800 	.word	0x40010800

08007018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b090      	sub	sp, #64	; 0x40
 800701c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800701e:	f107 0318 	add.w	r3, r7, #24
 8007022:	2228      	movs	r2, #40	; 0x28
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f005 fba2 	bl	800c770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	609a      	str	r2, [r3, #8]
 8007036:	60da      	str	r2, [r3, #12]
 8007038:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800703a:	2301      	movs	r3, #1
 800703c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800703e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007044:	2300      	movs	r3, #0
 8007046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007048:	2301      	movs	r3, #1
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800704c:	2302      	movs	r3, #2
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007056:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800705c:	f107 0318 	add.w	r3, r7, #24
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fa99 	bl	8009598 <HAL_RCC_OscConfig>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800706c:	f000 f9aa 	bl	80073c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007070:	230f      	movs	r3, #15
 8007072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007074:	2302      	movs	r3, #2
 8007076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800707c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	2102      	movs	r1, #2
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fd06 	bl	8009a9c <HAL_RCC_ClockConfig>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007096:	f000 f995 	bl	80073c4 <Error_Handler>
  }
}
 800709a:	bf00      	nop
 800709c:	3740      	adds	r7, #64	; 0x40
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80070a8:	4b16      	ldr	r3, [pc, #88]	; (8007104 <MX_CAN_Init+0x60>)
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <MX_CAN_Init+0x64>)
 80070ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <MX_CAN_Init+0x60>)
 80070b0:	2210      	movs	r2, #16
 80070b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80070b4:	4b13      	ldr	r3, [pc, #76]	; (8007104 <MX_CAN_Init+0x60>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <MX_CAN_Init+0x60>)
 80070bc:	2200      	movs	r2, #0
 80070be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <MX_CAN_Init+0x60>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <MX_CAN_Init+0x60>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80070cc:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <MX_CAN_Init+0x60>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <MX_CAN_Init+0x60>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <MX_CAN_Init+0x60>)
 80070da:	2200      	movs	r2, #0
 80070dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <MX_CAN_Init+0x60>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <MX_CAN_Init+0x60>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <MX_CAN_Init+0x60>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80070f0:	4804      	ldr	r0, [pc, #16]	; (8007104 <MX_CAN_Init+0x60>)
 80070f2:	f000 fbd7 	bl	80078a4 <HAL_CAN_Init>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80070fc:	f000 f962 	bl	80073c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007100:	bf00      	nop
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000e14 	.word	0x20000e14
 8007108:	40006400 	.word	0x40006400

0800710c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007110:	4b12      	ldr	r3, [pc, #72]	; (800715c <MX_I2C1_Init+0x50>)
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <MX_I2C1_Init+0x54>)
 8007114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <MX_I2C1_Init+0x50>)
 8007118:	4a12      	ldr	r2, [pc, #72]	; (8007164 <MX_I2C1_Init+0x58>)
 800711a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <MX_I2C1_Init+0x50>)
 800711e:	2200      	movs	r2, #0
 8007120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007122:	4b0e      	ldr	r3, [pc, #56]	; (800715c <MX_I2C1_Init+0x50>)
 8007124:	2200      	movs	r2, #0
 8007126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <MX_I2C1_Init+0x50>)
 800712a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800712e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <MX_I2C1_Init+0x50>)
 8007132:	2200      	movs	r2, #0
 8007134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <MX_I2C1_Init+0x50>)
 8007138:	2200      	movs	r2, #0
 800713a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <MX_I2C1_Init+0x50>)
 800713e:	2200      	movs	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <MX_I2C1_Init+0x50>)
 8007144:	2200      	movs	r2, #0
 8007146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007148:	4804      	ldr	r0, [pc, #16]	; (800715c <MX_I2C1_Init+0x50>)
 800714a:	f001 f85d 	bl	8008208 <HAL_I2C_Init>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007154:	f000 f936 	bl	80073c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007158:	bf00      	nop
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000e3c 	.word	0x20000e3c
 8007160:	40005400 	.word	0x40005400
 8007164:	00061a80 	.word	0x00061a80

08007168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	605a      	str	r2, [r3, #4]
 8007178:	609a      	str	r2, [r3, #8]
 800717a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800717c:	463b      	mov	r3, r7
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007184:	4b1f      	ldr	r3, [pc, #124]	; (8007204 <MX_TIM1_Init+0x9c>)
 8007186:	4a20      	ldr	r2, [pc, #128]	; (8007208 <MX_TIM1_Init+0xa0>)
 8007188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <MX_TIM1_Init+0x9c>)
 800718c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007190:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <MX_TIM1_Init+0x9c>)
 8007194:	2200      	movs	r2, #0
 8007196:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <MX_TIM1_Init+0x9c>)
 800719a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800719e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071a0:	4b18      	ldr	r3, [pc, #96]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80071a6:	4b17      	ldr	r3, [pc, #92]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071ac:	4b15      	ldr	r3, [pc, #84]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80071b2:	4814      	ldr	r0, [pc, #80]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071b4:	f002 fe0a 	bl	8009dcc <HAL_TIM_Base_Init>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80071be:	f000 f901 	bl	80073c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	4619      	mov	r1, r3
 80071ce:	480d      	ldr	r0, [pc, #52]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071d0:	f002 ffb4 	bl	800a13c <HAL_TIM_ConfigClockSource>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80071da:	f000 f8f3 	bl	80073c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071de:	2300      	movs	r3, #0
 80071e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80071e6:	463b      	mov	r3, r7
 80071e8:	4619      	mov	r1, r3
 80071ea:	4806      	ldr	r0, [pc, #24]	; (8007204 <MX_TIM1_Init+0x9c>)
 80071ec:	f003 f99e 	bl	800a52c <HAL_TIMEx_MasterConfigSynchronization>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80071f6:	f000 f8e5 	bl	80073c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80071fa:	bf00      	nop
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000ed8 	.word	0x20000ed8
 8007208:	40012c00 	.word	0x40012c00

0800720c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007210:	4b11      	ldr	r3, [pc, #68]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <MX_USART1_UART_Init+0x50>)
 8007214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800721c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007220:	2200      	movs	r2, #0
 8007222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007226:	2200      	movs	r2, #0
 8007228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 800722c:	2200      	movs	r2, #0
 800722e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007232:	220c      	movs	r2, #12
 8007234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007238:	2200      	movs	r2, #0
 800723a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 800723e:	2200      	movs	r2, #0
 8007240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <MX_USART1_UART_Init+0x4c>)
 8007244:	f003 f9f0 	bl	800a628 <HAL_UART_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800724e:	f000 f8b9 	bl	80073c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000e90 	.word	0x20000e90
 800725c:	40013800 	.word	0x40013800

08007260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007266:	f107 0310 	add.w	r3, r7, #16
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	605a      	str	r2, [r3, #4]
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007274:	4b4b      	ldr	r3, [pc, #300]	; (80073a4 <MX_GPIO_Init+0x144>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	4a4a      	ldr	r2, [pc, #296]	; (80073a4 <MX_GPIO_Init+0x144>)
 800727a:	f043 0310 	orr.w	r3, r3, #16
 800727e:	6193      	str	r3, [r2, #24]
 8007280:	4b48      	ldr	r3, [pc, #288]	; (80073a4 <MX_GPIO_Init+0x144>)
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800728c:	4b45      	ldr	r3, [pc, #276]	; (80073a4 <MX_GPIO_Init+0x144>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	4a44      	ldr	r2, [pc, #272]	; (80073a4 <MX_GPIO_Init+0x144>)
 8007292:	f043 0320 	orr.w	r3, r3, #32
 8007296:	6193      	str	r3, [r2, #24]
 8007298:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <MX_GPIO_Init+0x144>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072a4:	4b3f      	ldr	r3, [pc, #252]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	4a3e      	ldr	r2, [pc, #248]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072aa:	f043 0304 	orr.w	r3, r3, #4
 80072ae:	6193      	str	r3, [r2, #24]
 80072b0:	4b3c      	ldr	r3, [pc, #240]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072bc:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	4a38      	ldr	r2, [pc, #224]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072c2:	f043 0308 	orr.w	r3, r3, #8
 80072c6:	6193      	str	r3, [r2, #24]
 80072c8:	4b36      	ldr	r3, [pc, #216]	; (80073a4 <MX_GPIO_Init+0x144>)
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80072d4:	2200      	movs	r2, #0
 80072d6:	21f0      	movs	r1, #240	; 0xf0
 80072d8:	4833      	ldr	r0, [pc, #204]	; (80073a8 <MX_GPIO_Init+0x148>)
 80072da:	f000 ff64 	bl	80081a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80072de:	2200      	movs	r2, #0
 80072e0:	f241 0130 	movw	r1, #4144	; 0x1030
 80072e4:	4831      	ldr	r0, [pc, #196]	; (80073ac <MX_GPIO_Init+0x14c>)
 80072e6:	f000 ff5e 	bl	80081a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80072ea:	2200      	movs	r2, #0
 80072ec:	f640 4107 	movw	r1, #3079	; 0xc07
 80072f0:	482f      	ldr	r0, [pc, #188]	; (80073b0 <MX_GPIO_Init+0x150>)
 80072f2:	f000 ff58 	bl	80081a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80072f6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80072fa:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	4619      	mov	r1, r3
 800730a:	4828      	ldr	r0, [pc, #160]	; (80073ac <MX_GPIO_Init+0x14c>)
 800730c:	f000 fcd4 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007310:	f248 130f 	movw	r3, #33039	; 0x810f
 8007314:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800731e:	f107 0310 	add.w	r3, r7, #16
 8007322:	4619      	mov	r1, r3
 8007324:	4820      	ldr	r0, [pc, #128]	; (80073a8 <MX_GPIO_Init+0x148>)
 8007326:	f000 fcc7 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800732a:	23f0      	movs	r3, #240	; 0xf0
 800732c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007336:	2302      	movs	r3, #2
 8007338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800733a:	f107 0310 	add.w	r3, r7, #16
 800733e:	4619      	mov	r1, r3
 8007340:	4819      	ldr	r0, [pc, #100]	; (80073a8 <MX_GPIO_Init+0x148>)
 8007342:	f000 fcb9 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007346:	f241 0330 	movw	r3, #4144	; 0x1030
 800734a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800734c:	2301      	movs	r3, #1
 800734e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007354:	2302      	movs	r3, #2
 8007356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	4619      	mov	r1, r3
 800735e:	4813      	ldr	r0, [pc, #76]	; (80073ac <MX_GPIO_Init+0x14c>)
 8007360:	f000 fcaa 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007364:	f640 4307 	movw	r3, #3079	; 0xc07
 8007368:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800736a:	2301      	movs	r3, #1
 800736c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007372:	2302      	movs	r3, #2
 8007374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007376:	f107 0310 	add.w	r3, r7, #16
 800737a:	4619      	mov	r1, r3
 800737c:	480c      	ldr	r0, [pc, #48]	; (80073b0 <MX_GPIO_Init+0x150>)
 800737e:	f000 fc9b 	bl	8007cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007382:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	4619      	mov	r1, r3
 8007396:	4806      	ldr	r0, [pc, #24]	; (80073b0 <MX_GPIO_Init+0x150>)
 8007398:	f000 fc8e 	bl	8007cb8 <HAL_GPIO_Init>

}
 800739c:	bf00      	nop
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40010800 	.word	0x40010800
 80073ac:	40011000 	.word	0x40011000
 80073b0:	40010c00 	.word	0x40010c00

080073b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80073bc:	2001      	movs	r0, #1
 80073be:	f003 fae1 	bl	800a984 <osDelay>
 80073c2:	e7fb      	b.n	80073bc <StartDefaultTask+0x8>

080073c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80073d6:	4b18      	ldr	r3, [pc, #96]	; (8007438 <HAL_MspInit+0x68>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <HAL_MspInit+0x68>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6193      	str	r3, [r2, #24]
 80073e2:	4b15      	ldr	r3, [pc, #84]	; (8007438 <HAL_MspInit+0x68>)
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <HAL_MspInit+0x68>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	4a11      	ldr	r2, [pc, #68]	; (8007438 <HAL_MspInit+0x68>)
 80073f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f8:	61d3      	str	r3, [r2, #28]
 80073fa:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <HAL_MspInit+0x68>)
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007406:	2200      	movs	r2, #0
 8007408:	210f      	movs	r1, #15
 800740a:	f06f 0001 	mvn.w	r0, #1
 800740e:	f000 fc1c 	bl	8007c4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_MspInit+0x6c>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	4a04      	ldr	r2, [pc, #16]	; (800743c <HAL_MspInit+0x6c>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
 800743c:	40010000 	.word	0x40010000

08007440 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	609a      	str	r2, [r3, #8]
 8007454:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <HAL_CAN_MspInit+0x8c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d131      	bne.n	80074c4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007460:	4b1b      	ldr	r3, [pc, #108]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 8007466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800746a:	61d3      	str	r3, [r2, #28]
 800746c:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	4a14      	ldr	r2, [pc, #80]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 800747e:	f043 0304 	orr.w	r3, r3, #4
 8007482:	6193      	str	r3, [r2, #24]
 8007484:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <HAL_CAN_MspInit+0x90>)
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800749e:	f107 0310 	add.w	r3, r7, #16
 80074a2:	4619      	mov	r1, r3
 80074a4:	480b      	ldr	r0, [pc, #44]	; (80074d4 <HAL_CAN_MspInit+0x94>)
 80074a6:	f000 fc07 	bl	8007cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074b0:	2302      	movs	r3, #2
 80074b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074b4:	2303      	movs	r3, #3
 80074b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b8:	f107 0310 	add.w	r3, r7, #16
 80074bc:	4619      	mov	r1, r3
 80074be:	4805      	ldr	r0, [pc, #20]	; (80074d4 <HAL_CAN_MspInit+0x94>)
 80074c0:	f000 fbfa 	bl	8007cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80074c4:	bf00      	nop
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40006400 	.word	0x40006400
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40010800 	.word	0x40010800

080074d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_I2C_MspInit+0x70>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d123      	bne.n	8007540 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <HAL_I2C_MspInit+0x74>)
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	4a13      	ldr	r2, [pc, #76]	; (800754c <HAL_I2C_MspInit+0x74>)
 80074fe:	f043 0308 	orr.w	r3, r3, #8
 8007502:	6193      	str	r3, [r2, #24]
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <HAL_I2C_MspInit+0x74>)
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007510:	23c0      	movs	r3, #192	; 0xc0
 8007512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007514:	2312      	movs	r3, #18
 8007516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007518:	2303      	movs	r3, #3
 800751a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	4619      	mov	r1, r3
 8007522:	480b      	ldr	r0, [pc, #44]	; (8007550 <HAL_I2C_MspInit+0x78>)
 8007524:	f000 fbc8 	bl	8007cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007528:	4b08      	ldr	r3, [pc, #32]	; (800754c <HAL_I2C_MspInit+0x74>)
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	4a07      	ldr	r2, [pc, #28]	; (800754c <HAL_I2C_MspInit+0x74>)
 800752e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007532:	61d3      	str	r3, [r2, #28]
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_I2C_MspInit+0x74>)
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007540:	bf00      	nop
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40005400 	.word	0x40005400
 800754c:	40021000 	.word	0x40021000
 8007550:	40010c00 	.word	0x40010c00

08007554 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <HAL_I2C_MspDeInit+0x38>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d10d      	bne.n	8007582 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <HAL_I2C_MspDeInit+0x3c>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <HAL_I2C_MspDeInit+0x3c>)
 800756c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007570:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007572:	2140      	movs	r1, #64	; 0x40
 8007574:	4807      	ldr	r0, [pc, #28]	; (8007594 <HAL_I2C_MspDeInit+0x40>)
 8007576:	f000 fd33 	bl	8007fe0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800757a:	2180      	movs	r1, #128	; 0x80
 800757c:	4805      	ldr	r0, [pc, #20]	; (8007594 <HAL_I2C_MspDeInit+0x40>)
 800757e:	f000 fd2f 	bl	8007fe0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40005400 	.word	0x40005400
 8007590:	40021000 	.word	0x40021000
 8007594:	40010c00 	.word	0x40010c00

08007598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <HAL_TIM_Base_MspInit+0x44>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d113      	bne.n	80075d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <HAL_TIM_Base_MspInit+0x48>)
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <HAL_TIM_Base_MspInit+0x48>)
 80075b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075b4:	6193      	str	r3, [r2, #24]
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <HAL_TIM_Base_MspInit+0x48>)
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2105      	movs	r1, #5
 80075c6:	2019      	movs	r0, #25
 80075c8:	f000 fb3f 	bl	8007c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80075cc:	2019      	movs	r0, #25
 80075ce:	f000 fb58 	bl	8007c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40021000 	.word	0x40021000

080075e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <HAL_UART_MspInit+0x8c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d131      	bne.n	8007668 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007604:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_UART_MspInit+0x90>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	4a1a      	ldr	r2, [pc, #104]	; (8007674 <HAL_UART_MspInit+0x90>)
 800760a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800760e:	6193      	str	r3, [r2, #24]
 8007610:	4b18      	ldr	r3, [pc, #96]	; (8007674 <HAL_UART_MspInit+0x90>)
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800761c:	4b15      	ldr	r3, [pc, #84]	; (8007674 <HAL_UART_MspInit+0x90>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	4a14      	ldr	r2, [pc, #80]	; (8007674 <HAL_UART_MspInit+0x90>)
 8007622:	f043 0304 	orr.w	r3, r3, #4
 8007626:	6193      	str	r3, [r2, #24]
 8007628:	4b12      	ldr	r3, [pc, #72]	; (8007674 <HAL_UART_MspInit+0x90>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	60bb      	str	r3, [r7, #8]
 8007632:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763a:	2302      	movs	r3, #2
 800763c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800763e:	2303      	movs	r3, #3
 8007640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	4619      	mov	r1, r3
 8007648:	480b      	ldr	r0, [pc, #44]	; (8007678 <HAL_UART_MspInit+0x94>)
 800764a:	f000 fb35 	bl	8007cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800764e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	4619      	mov	r1, r3
 8007662:	4805      	ldr	r0, [pc, #20]	; (8007678 <HAL_UART_MspInit+0x94>)
 8007664:	f000 fb28 	bl	8007cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007668:	bf00      	nop
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40013800 	.word	0x40013800
 8007674:	40021000 	.word	0x40021000
 8007678:	40010800 	.word	0x40010800

0800767c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007680:	e7fe      	b.n	8007680 <NMI_Handler+0x4>

08007682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007682:	b480      	push	{r7}
 8007684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007686:	e7fe      	b.n	8007686 <HardFault_Handler+0x4>

08007688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800768c:	e7fe      	b.n	800768c <MemManage_Handler+0x4>

0800768e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007692:	e7fe      	b.n	8007692 <BusFault_Handler+0x4>

08007694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007698:	e7fe      	b.n	8007698 <UsageFault_Handler+0x4>

0800769a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076aa:	f000 f8bb 	bl	8007824 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80076ae:	f004 fabb 	bl	800bc28 <xTaskGetSchedulerState>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d001      	beq.n	80076bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80076b8:	f004 fd2e 	bl	800c118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}

080076c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <TIM1_UP_IRQHandler+0x10>)
 80076c6:	f002 fc31 	bl	8009f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000ed8 	.word	0x20000ed8

080076d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076dc:	4a14      	ldr	r2, [pc, #80]	; (8007730 <_sbrk+0x5c>)
 80076de:	4b15      	ldr	r3, [pc, #84]	; (8007734 <_sbrk+0x60>)
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <_sbrk+0x64>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <_sbrk+0x64>)
 80076f2:	4a12      	ldr	r2, [pc, #72]	; (800773c <_sbrk+0x68>)
 80076f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <_sbrk+0x64>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d207      	bcs.n	8007714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007704:	f005 f84c 	bl	800c7a0 <__errno>
 8007708:	4603      	mov	r3, r0
 800770a:	220c      	movs	r2, #12
 800770c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	e009      	b.n	8007728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007714:	4b08      	ldr	r3, [pc, #32]	; (8007738 <_sbrk+0x64>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <_sbrk+0x64>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	4a05      	ldr	r2, [pc, #20]	; (8007738 <_sbrk+0x64>)
 8007724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	2000c000 	.word	0x2000c000
 8007734:	00000400 	.word	0x00000400
 8007738:	20000f24 	.word	0x20000f24
 800773c:	20001dc0 	.word	0x20001dc0

08007740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800774c:	480c      	ldr	r0, [pc, #48]	; (8007780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800774e:	490d      	ldr	r1, [pc, #52]	; (8007784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007750:	4a0d      	ldr	r2, [pc, #52]	; (8007788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007754:	e002      	b.n	800775c <LoopCopyDataInit>

08007756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800775a:	3304      	adds	r3, #4

0800775c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800775c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800775e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007760:	d3f9      	bcc.n	8007756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007762:	4a0a      	ldr	r2, [pc, #40]	; (800778c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007764:	4c0a      	ldr	r4, [pc, #40]	; (8007790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007768:	e001      	b.n	800776e <LoopFillZerobss>

0800776a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800776a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800776c:	3204      	adds	r2, #4

0800776e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800776e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007770:	d3fb      	bcc.n	800776a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007772:	f7ff ffe5 	bl	8007740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007776:	f005 f819 	bl	800c7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800777a:	f7fd faa9 	bl	8004cd0 <main>
  bx lr
 800777e:	4770      	bx	lr
  ldr r0, =_sdata
 8007780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007784:	200009a4 	.word	0x200009a4
  ldr r2, =_sidata
 8007788:	0800d654 	.word	0x0800d654
  ldr r2, =_sbss
 800778c:	200009a4 	.word	0x200009a4
  ldr r4, =_ebss
 8007790:	20001dc0 	.word	0x20001dc0

08007794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007794:	e7fe      	b.n	8007794 <ADC1_2_IRQHandler>
	...

08007798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <HAL_Init+0x28>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <HAL_Init+0x28>)
 80077a2:	f043 0310 	orr.w	r3, r3, #16
 80077a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077a8:	2003      	movs	r0, #3
 80077aa:	f000 fa43 	bl	8007c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ae:	200f      	movs	r0, #15
 80077b0:	f000 f808 	bl	80077c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077b4:	f7ff fe0c 	bl	80073d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40022000 	.word	0x40022000

080077c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <HAL_InitTick+0x54>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b12      	ldr	r3, [pc, #72]	; (800781c <HAL_InitTick+0x58>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077da:	fbb3 f3f1 	udiv	r3, r3, r1
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa5b 	bl	8007c9e <HAL_SYSTICK_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e00e      	b.n	8007810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b0f      	cmp	r3, #15
 80077f6:	d80a      	bhi.n	800780e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077f8:	2200      	movs	r2, #0
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	f000 fa23 	bl	8007c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007804:	4a06      	ldr	r2, [pc, #24]	; (8007820 <HAL_InitTick+0x5c>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000944 	.word	0x20000944
 800781c:	2000094c 	.word	0x2000094c
 8007820:	20000948 	.word	0x20000948

08007824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <HAL_IncTick+0x1c>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <HAL_IncTick+0x20>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4413      	add	r3, r2
 8007834:	4a03      	ldr	r2, [pc, #12]	; (8007844 <HAL_IncTick+0x20>)
 8007836:	6013      	str	r3, [r2, #0]
}
 8007838:	bf00      	nop
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	2000094c 	.word	0x2000094c
 8007844:	20000f28 	.word	0x20000f28

08007848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return uwTick;
 800784c:	4b02      	ldr	r3, [pc, #8]	; (8007858 <HAL_GetTick+0x10>)
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	20000f28 	.word	0x20000f28

0800785c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007864:	f7ff fff0 	bl	8007848 <HAL_GetTick>
 8007868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d005      	beq.n	8007882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <HAL_Delay+0x44>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007882:	bf00      	nop
 8007884:	f7ff ffe0 	bl	8007848 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	429a      	cmp	r2, r3
 8007892:	d8f7      	bhi.n	8007884 <HAL_Delay+0x28>
  {
  }
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2000094c 	.word	0x2000094c

080078a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0ed      	b.n	8007a92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fdbc 	bl	8007440 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078d8:	f7ff ffb6 	bl	8007848 <HAL_GetTick>
 80078dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078de:	e012      	b.n	8007906 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078e0:	f7ff ffb2 	bl	8007848 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b0a      	cmp	r3, #10
 80078ec:	d90b      	bls.n	8007906 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2205      	movs	r2, #5
 80078fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e0c5      	b.n	8007a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0e5      	beq.n	80078e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0202 	bic.w	r2, r2, #2
 8007922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007924:	f7ff ff90 	bl	8007848 <HAL_GetTick>
 8007928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800792a:	e012      	b.n	8007952 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800792c:	f7ff ff8c 	bl	8007848 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b0a      	cmp	r3, #10
 8007938:	d90b      	bls.n	8007952 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2205      	movs	r2, #5
 800794a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e09f      	b.n	8007a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7e1b      	ldrb	r3, [r3, #24]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d108      	bne.n	800797a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e007      	b.n	800798a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7e5b      	ldrb	r3, [r3, #25]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d108      	bne.n	80079a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e007      	b.n	80079b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7e9b      	ldrb	r3, [r3, #26]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d108      	bne.n	80079ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0220 	orr.w	r2, r2, #32
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	e007      	b.n	80079de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0220 	bic.w	r2, r2, #32
 80079dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7edb      	ldrb	r3, [r3, #27]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d108      	bne.n	80079f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0210 	bic.w	r2, r2, #16
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e007      	b.n	8007a08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0210 	orr.w	r2, r2, #16
 8007a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7f1b      	ldrb	r3, [r3, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d108      	bne.n	8007a22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e007      	b.n	8007a32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0208 	bic.w	r2, r2, #8
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7f5b      	ldrb	r3, [r3, #29]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d108      	bne.n	8007a4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0204 	orr.w	r2, r2, #4
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	e007      	b.n	8007a5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0204 	bic.w	r2, r2, #4
 8007a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	ea42 0103 	orr.w	r1, r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <__NVIC_SetPriorityGrouping>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aac:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ace:	4a04      	ldr	r2, [pc, #16]	; (8007ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	60d3      	str	r3, [r2, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <__NVIC_GetPriorityGrouping>:
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <__NVIC_GetPriorityGrouping+0x18>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	0a1b      	lsrs	r3, r3, #8
 8007aee:	f003 0307 	and.w	r3, r3, #7
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <__NVIC_EnableIRQ>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	db0b      	blt.n	8007b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f003 021f 	and.w	r2, r3, #31
 8007b18:	4906      	ldr	r1, [pc, #24]	; (8007b34 <__NVIC_EnableIRQ+0x34>)
 8007b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	2001      	movs	r0, #1
 8007b22:	fa00 f202 	lsl.w	r2, r0, r2
 8007b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr
 8007b34:	e000e100 	.word	0xe000e100

08007b38 <__NVIC_SetPriority>:
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db0a      	blt.n	8007b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	490c      	ldr	r1, [pc, #48]	; (8007b84 <__NVIC_SetPriority+0x4c>)
 8007b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b56:	0112      	lsls	r2, r2, #4
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b60:	e00a      	b.n	8007b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	4908      	ldr	r1, [pc, #32]	; (8007b88 <__NVIC_SetPriority+0x50>)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	3b04      	subs	r3, #4
 8007b70:	0112      	lsls	r2, r2, #4
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	440b      	add	r3, r1
 8007b76:	761a      	strb	r2, [r3, #24]
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	e000e100 	.word	0xe000e100
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <NVIC_EncodePriority>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	; 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f1c3 0307 	rsb	r3, r3, #7
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	bf28      	it	cs
 8007baa:	2304      	movcs	r3, #4
 8007bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d902      	bls.n	8007bbc <NVIC_EncodePriority+0x30>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3b03      	subs	r3, #3
 8007bba:	e000      	b.n	8007bbe <NVIC_EncodePriority+0x32>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	401a      	ands	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	43d9      	mvns	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be4:	4313      	orrs	r3, r2
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3724      	adds	r7, #36	; 0x24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr

08007bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c00:	d301      	bcc.n	8007c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c02:	2301      	movs	r3, #1
 8007c04:	e00f      	b.n	8007c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c06:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <SysTick_Config+0x40>)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c0e:	210f      	movs	r1, #15
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	f7ff ff90 	bl	8007b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <SysTick_Config+0x40>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <SysTick_Config+0x40>)
 8007c20:	2207      	movs	r2, #7
 8007c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	e000e010 	.word	0xe000e010

08007c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ff2d 	bl	8007a9c <__NVIC_SetPriorityGrouping>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b086      	sub	sp, #24
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	4603      	mov	r3, r0
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c5c:	f7ff ff42 	bl	8007ae4 <__NVIC_GetPriorityGrouping>
 8007c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	6978      	ldr	r0, [r7, #20]
 8007c68:	f7ff ff90 	bl	8007b8c <NVIC_EncodePriority>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff ff5f 	bl	8007b38 <__NVIC_SetPriority>
}
 8007c7a:	bf00      	nop
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	4603      	mov	r3, r0
 8007c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff ff35 	bl	8007b00 <__NVIC_EnableIRQ>
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ffa2 	bl	8007bf0 <SysTick_Config>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b08b      	sub	sp, #44	; 0x2c
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007cca:	e179      	b.n	8007fc0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007ccc:	2201      	movs	r2, #1
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	f040 8168 	bne.w	8007fba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4a96      	ldr	r2, [pc, #600]	; (8007f48 <HAL_GPIO_Init+0x290>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d05e      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
 8007cf4:	4a94      	ldr	r2, [pc, #592]	; (8007f48 <HAL_GPIO_Init+0x290>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d875      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007cfa:	4a94      	ldr	r2, [pc, #592]	; (8007f4c <HAL_GPIO_Init+0x294>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d058      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
 8007d00:	4a92      	ldr	r2, [pc, #584]	; (8007f4c <HAL_GPIO_Init+0x294>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d86f      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007d06:	4a92      	ldr	r2, [pc, #584]	; (8007f50 <HAL_GPIO_Init+0x298>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d052      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
 8007d0c:	4a90      	ldr	r2, [pc, #576]	; (8007f50 <HAL_GPIO_Init+0x298>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d869      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007d12:	4a90      	ldr	r2, [pc, #576]	; (8007f54 <HAL_GPIO_Init+0x29c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d04c      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
 8007d18:	4a8e      	ldr	r2, [pc, #568]	; (8007f54 <HAL_GPIO_Init+0x29c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d863      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007d1e:	4a8e      	ldr	r2, [pc, #568]	; (8007f58 <HAL_GPIO_Init+0x2a0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d046      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
 8007d24:	4a8c      	ldr	r2, [pc, #560]	; (8007f58 <HAL_GPIO_Init+0x2a0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d85d      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007d2a:	2b12      	cmp	r3, #18
 8007d2c:	d82a      	bhi.n	8007d84 <HAL_GPIO_Init+0xcc>
 8007d2e:	2b12      	cmp	r3, #18
 8007d30:	d859      	bhi.n	8007de6 <HAL_GPIO_Init+0x12e>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_GPIO_Init+0x80>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007db3 	.word	0x08007db3
 8007d3c:	08007d8d 	.word	0x08007d8d
 8007d40:	08007d9f 	.word	0x08007d9f
 8007d44:	08007de1 	.word	0x08007de1
 8007d48:	08007de7 	.word	0x08007de7
 8007d4c:	08007de7 	.word	0x08007de7
 8007d50:	08007de7 	.word	0x08007de7
 8007d54:	08007de7 	.word	0x08007de7
 8007d58:	08007de7 	.word	0x08007de7
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007de7 	.word	0x08007de7
 8007d64:	08007de7 	.word	0x08007de7
 8007d68:	08007de7 	.word	0x08007de7
 8007d6c:	08007de7 	.word	0x08007de7
 8007d70:	08007de7 	.word	0x08007de7
 8007d74:	08007de7 	.word	0x08007de7
 8007d78:	08007de7 	.word	0x08007de7
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	4a75      	ldr	r2, [pc, #468]	; (8007f5c <HAL_GPIO_Init+0x2a4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007d8a:	e02c      	b.n	8007de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	623b      	str	r3, [r7, #32]
          break;
 8007d92:	e029      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	623b      	str	r3, [r7, #32]
          break;
 8007d9c:	e024      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	3308      	adds	r3, #8
 8007da4:	623b      	str	r3, [r7, #32]
          break;
 8007da6:	e01f      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	330c      	adds	r3, #12
 8007dae:	623b      	str	r3, [r7, #32]
          break;
 8007db0:	e01a      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007dba:	2304      	movs	r3, #4
 8007dbc:	623b      	str	r3, [r7, #32]
          break;
 8007dbe:	e013      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d105      	bne.n	8007dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007dc8:	2308      	movs	r3, #8
 8007dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	611a      	str	r2, [r3, #16]
          break;
 8007dd2:	e009      	b.n	8007de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	615a      	str	r2, [r3, #20]
          break;
 8007dde:	e003      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007de0:	2300      	movs	r3, #0
 8007de2:	623b      	str	r3, [r7, #32]
          break;
 8007de4:	e000      	b.n	8007de8 <HAL_GPIO_Init+0x130>
          break;
 8007de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2bff      	cmp	r3, #255	; 0xff
 8007dec:	d801      	bhi.n	8007df2 <HAL_GPIO_Init+0x13a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	e001      	b.n	8007df6 <HAL_GPIO_Init+0x13e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2bff      	cmp	r3, #255	; 0xff
 8007dfc:	d802      	bhi.n	8007e04 <HAL_GPIO_Init+0x14c>
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	e002      	b.n	8007e0a <HAL_GPIO_Init+0x152>
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	3b08      	subs	r3, #8
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	210f      	movs	r1, #15
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	fa01 f303 	lsl.w	r3, r1, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	6a39      	ldr	r1, [r7, #32]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	fa01 f303 	lsl.w	r3, r1, r3
 8007e24:	431a      	orrs	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80c1 	beq.w	8007fba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e38:	4b49      	ldr	r3, [pc, #292]	; (8007f60 <HAL_GPIO_Init+0x2a8>)
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	4a48      	ldr	r2, [pc, #288]	; (8007f60 <HAL_GPIO_Init+0x2a8>)
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	6193      	str	r3, [r2, #24]
 8007e44:	4b46      	ldr	r3, [pc, #280]	; (8007f60 <HAL_GPIO_Init+0x2a8>)
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	60bb      	str	r3, [r7, #8]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007e50:	4a44      	ldr	r2, [pc, #272]	; (8007f64 <HAL_GPIO_Init+0x2ac>)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	089b      	lsrs	r3, r3, #2
 8007e56:	3302      	adds	r3, #2
 8007e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	220f      	movs	r2, #15
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <HAL_GPIO_Init+0x2b0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d01f      	beq.n	8007ebc <HAL_GPIO_Init+0x204>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a3b      	ldr	r2, [pc, #236]	; (8007f6c <HAL_GPIO_Init+0x2b4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d019      	beq.n	8007eb8 <HAL_GPIO_Init+0x200>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3a      	ldr	r2, [pc, #232]	; (8007f70 <HAL_GPIO_Init+0x2b8>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d013      	beq.n	8007eb4 <HAL_GPIO_Init+0x1fc>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a39      	ldr	r2, [pc, #228]	; (8007f74 <HAL_GPIO_Init+0x2bc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00d      	beq.n	8007eb0 <HAL_GPIO_Init+0x1f8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a38      	ldr	r2, [pc, #224]	; (8007f78 <HAL_GPIO_Init+0x2c0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d007      	beq.n	8007eac <HAL_GPIO_Init+0x1f4>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <HAL_GPIO_Init+0x2c4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d101      	bne.n	8007ea8 <HAL_GPIO_Init+0x1f0>
 8007ea4:	2305      	movs	r3, #5
 8007ea6:	e00a      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007ea8:	2306      	movs	r3, #6
 8007eaa:	e008      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007eac:	2304      	movs	r3, #4
 8007eae:	e006      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e004      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e002      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <HAL_GPIO_Init+0x206>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec0:	f002 0203 	and.w	r2, r2, #3
 8007ec4:	0092      	lsls	r2, r2, #2
 8007ec6:	4093      	lsls	r3, r2
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007ece:	4925      	ldr	r1, [pc, #148]	; (8007f64 <HAL_GPIO_Init+0x2ac>)
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d006      	beq.n	8007ef6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007ee8:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4924      	ldr	r1, [pc, #144]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	600b      	str	r3, [r1, #0]
 8007ef4:	e006      	b.n	8007f04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007ef6:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	43db      	mvns	r3, r3
 8007efe:	4920      	ldr	r1, [pc, #128]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007f10:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	491a      	ldr	r1, [pc, #104]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	604b      	str	r3, [r1, #4]
 8007f1c:	e006      	b.n	8007f2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007f1e:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	4916      	ldr	r1, [pc, #88]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d025      	beq.n	8007f84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007f38:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	4910      	ldr	r1, [pc, #64]	; (8007f80 <HAL_GPIO_Init+0x2c8>)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	608b      	str	r3, [r1, #8]
 8007f44:	e025      	b.n	8007f92 <HAL_GPIO_Init+0x2da>
 8007f46:	bf00      	nop
 8007f48:	10320000 	.word	0x10320000
 8007f4c:	10310000 	.word	0x10310000
 8007f50:	10220000 	.word	0x10220000
 8007f54:	10210000 	.word	0x10210000
 8007f58:	10120000 	.word	0x10120000
 8007f5c:	10110000 	.word	0x10110000
 8007f60:	40021000 	.word	0x40021000
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010800 	.word	0x40010800
 8007f6c:	40010c00 	.word	0x40010c00
 8007f70:	40011000 	.word	0x40011000
 8007f74:	40011400 	.word	0x40011400
 8007f78:	40011800 	.word	0x40011800
 8007f7c:	40011c00 	.word	0x40011c00
 8007f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007f84:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	43db      	mvns	r3, r3
 8007f8c:	4913      	ldr	r1, [pc, #76]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	490e      	ldr	r1, [pc, #56]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60cb      	str	r3, [r1, #12]
 8007faa:	e006      	b.n	8007fba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	4909      	ldr	r1, [pc, #36]	; (8007fdc <HAL_GPIO_Init+0x324>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f47f ae7e 	bne.w	8007ccc <HAL_GPIO_Init+0x14>
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	372c      	adds	r7, #44	; 0x2c
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr
 8007fdc:	40010400 	.word	0x40010400

08007fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8007fee:	e0a6      	b.n	800813e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8099 	beq.w	8008138 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008006:	4a54      	ldr	r2, [pc, #336]	; (8008158 <HAL_GPIO_DeInit+0x178>)
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	3302      	adds	r3, #2
 800800e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008012:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	220f      	movs	r2, #15
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4013      	ands	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a4c      	ldr	r2, [pc, #304]	; (800815c <HAL_GPIO_DeInit+0x17c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d01f      	beq.n	8008070 <HAL_GPIO_DeInit+0x90>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a4b      	ldr	r2, [pc, #300]	; (8008160 <HAL_GPIO_DeInit+0x180>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d019      	beq.n	800806c <HAL_GPIO_DeInit+0x8c>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a4a      	ldr	r2, [pc, #296]	; (8008164 <HAL_GPIO_DeInit+0x184>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d013      	beq.n	8008068 <HAL_GPIO_DeInit+0x88>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a49      	ldr	r2, [pc, #292]	; (8008168 <HAL_GPIO_DeInit+0x188>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00d      	beq.n	8008064 <HAL_GPIO_DeInit+0x84>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a48      	ldr	r2, [pc, #288]	; (800816c <HAL_GPIO_DeInit+0x18c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <HAL_GPIO_DeInit+0x80>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a47      	ldr	r2, [pc, #284]	; (8008170 <HAL_GPIO_DeInit+0x190>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d101      	bne.n	800805c <HAL_GPIO_DeInit+0x7c>
 8008058:	2305      	movs	r3, #5
 800805a:	e00a      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 800805c:	2306      	movs	r3, #6
 800805e:	e008      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 8008060:	2304      	movs	r3, #4
 8008062:	e006      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 8008064:	2303      	movs	r3, #3
 8008066:	e004      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 8008068:	2302      	movs	r3, #2
 800806a:	e002      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_GPIO_DeInit+0x92>
 8008070:	2300      	movs	r3, #0
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	f002 0203 	and.w	r2, r2, #3
 8008078:	0092      	lsls	r2, r2, #2
 800807a:	4093      	lsls	r3, r2
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	429a      	cmp	r2, r3
 8008080:	d132      	bne.n	80080e8 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	220f      	movs	r2, #15
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008092:	4a31      	ldr	r2, [pc, #196]	; (8008158 <HAL_GPIO_DeInit+0x178>)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	089b      	lsrs	r3, r3, #2
 8008098:	3302      	adds	r3, #2
 800809a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	43da      	mvns	r2, r3
 80080a2:	482d      	ldr	r0, [pc, #180]	; (8008158 <HAL_GPIO_DeInit+0x178>)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	400a      	ands	r2, r1
 80080aa:	3302      	adds	r3, #2
 80080ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80080b0:	4b30      	ldr	r3, [pc, #192]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	492e      	ldr	r1, [pc, #184]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80080be:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	492b      	ldr	r1, [pc, #172]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80080cc:	4b29      	ldr	r3, [pc, #164]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	43db      	mvns	r3, r3
 80080d4:	4927      	ldr	r1, [pc, #156]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80080da:	4b26      	ldr	r3, [pc, #152]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	4924      	ldr	r1, [pc, #144]	; (8008174 <HAL_GPIO_DeInit+0x194>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	2bff      	cmp	r3, #255	; 0xff
 80080ec:	d801      	bhi.n	80080f2 <HAL_GPIO_DeInit+0x112>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	e001      	b.n	80080f6 <HAL_GPIO_DeInit+0x116>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2bff      	cmp	r3, #255	; 0xff
 80080fc:	d802      	bhi.n	8008104 <HAL_GPIO_DeInit+0x124>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	e002      	b.n	800810a <HAL_GPIO_DeInit+0x12a>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	3b08      	subs	r3, #8
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	210f      	movs	r1, #15
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	401a      	ands	r2, r3
 800811c:	2104      	movs	r1, #4
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	43db      	mvns	r3, r3
 8008132:	401a      	ands	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	fa22 f303 	lsr.w	r3, r2, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	f47f af52 	bne.w	8007ff0 <HAL_GPIO_DeInit+0x10>
  }
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	3724      	adds	r7, #36	; 0x24
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr
 8008158:	40010000 	.word	0x40010000
 800815c:	40010800 	.word	0x40010800
 8008160:	40010c00 	.word	0x40010c00
 8008164:	40011000 	.word	0x40011000
 8008168:	40011400 	.word	0x40011400
 800816c:	40011800 	.word	0x40011800
 8008170:	40011c00 	.word	0x40011c00
 8008174:	40010400 	.word	0x40010400

08008178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	887b      	ldrh	r3, [r7, #2]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008190:	2301      	movs	r3, #1
 8008192:	73fb      	strb	r3, [r7, #15]
 8008194:	e001      	b.n	800819a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	807b      	strh	r3, [r7, #2]
 80081b2:	4613      	mov	r3, r2
 80081b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081b6:	787b      	ldrb	r3, [r7, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80081c2:	e003      	b.n	80081cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80081c4:	887b      	ldrh	r3, [r7, #2]
 80081c6:	041a      	lsls	r2, r3, #16
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	611a      	str	r2, [r3, #16]
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr

080081d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80081e8:	887a      	ldrh	r2, [r7, #2]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4013      	ands	r3, r2
 80081ee:	041a      	lsls	r2, r3, #16
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	43d9      	mvns	r1, r3
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	400b      	ands	r3, r1
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]
}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e12b      	b.n	8008472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff f952 	bl	80074d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2224      	movs	r2, #36	; 0x24
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800825a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800826a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800826c:	f001 fd68 	bl	8009d40 <HAL_RCC_GetPCLK1Freq>
 8008270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	4a81      	ldr	r2, [pc, #516]	; (800847c <HAL_I2C_Init+0x274>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d807      	bhi.n	800828c <HAL_I2C_Init+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4a80      	ldr	r2, [pc, #512]	; (8008480 <HAL_I2C_Init+0x278>)
 8008280:	4293      	cmp	r3, r2
 8008282:	bf94      	ite	ls
 8008284:	2301      	movls	r3, #1
 8008286:	2300      	movhi	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	e006      	b.n	800829a <HAL_I2C_Init+0x92>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a7d      	ldr	r2, [pc, #500]	; (8008484 <HAL_I2C_Init+0x27c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	bf94      	ite	ls
 8008294:	2301      	movls	r3, #1
 8008296:	2300      	movhi	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e0e7      	b.n	8008472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a78      	ldr	r2, [pc, #480]	; (8008488 <HAL_I2C_Init+0x280>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	0c9b      	lsrs	r3, r3, #18
 80082ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	430a      	orrs	r2, r1
 80082c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4a6a      	ldr	r2, [pc, #424]	; (800847c <HAL_I2C_Init+0x274>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d802      	bhi.n	80082dc <HAL_I2C_Init+0xd4>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3301      	adds	r3, #1
 80082da:	e009      	b.n	80082f0 <HAL_I2C_Init+0xe8>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082e2:	fb02 f303 	mul.w	r3, r2, r3
 80082e6:	4a69      	ldr	r2, [pc, #420]	; (800848c <HAL_I2C_Init+0x284>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	3301      	adds	r3, #1
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	430b      	orrs	r3, r1
 80082f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	495c      	ldr	r1, [pc, #368]	; (800847c <HAL_I2C_Init+0x274>)
 800830c:	428b      	cmp	r3, r1
 800830e:	d819      	bhi.n	8008344 <HAL_I2C_Init+0x13c>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	1e59      	subs	r1, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	fbb1 f3f3 	udiv	r3, r1, r3
 800831e:	1c59      	adds	r1, r3, #1
 8008320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008324:	400b      	ands	r3, r1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_I2C_Init+0x138>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	1e59      	subs	r1, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	fbb1 f3f3 	udiv	r3, r1, r3
 8008338:	3301      	adds	r3, #1
 800833a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800833e:	e051      	b.n	80083e4 <HAL_I2C_Init+0x1dc>
 8008340:	2304      	movs	r3, #4
 8008342:	e04f      	b.n	80083e4 <HAL_I2C_Init+0x1dc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d111      	bne.n	8008370 <HAL_I2C_Init+0x168>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1e58      	subs	r0, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6859      	ldr	r1, [r3, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	440b      	add	r3, r1
 800835a:	fbb0 f3f3 	udiv	r3, r0, r3
 800835e:	3301      	adds	r3, #1
 8008360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008364:	2b00      	cmp	r3, #0
 8008366:	bf0c      	ite	eq
 8008368:	2301      	moveq	r3, #1
 800836a:	2300      	movne	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e012      	b.n	8008396 <HAL_I2C_Init+0x18e>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	1e58      	subs	r0, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6859      	ldr	r1, [r3, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	0099      	lsls	r1, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	fbb0 f3f3 	udiv	r3, r0, r3
 8008386:	3301      	adds	r3, #1
 8008388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_I2C_Init+0x196>
 800839a:	2301      	movs	r3, #1
 800839c:	e022      	b.n	80083e4 <HAL_I2C_Init+0x1dc>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10e      	bne.n	80083c4 <HAL_I2C_Init+0x1bc>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1e58      	subs	r0, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6859      	ldr	r1, [r3, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	440b      	add	r3, r1
 80083b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80083b8:	3301      	adds	r3, #1
 80083ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c2:	e00f      	b.n	80083e4 <HAL_I2C_Init+0x1dc>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	1e58      	subs	r0, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6859      	ldr	r1, [r3, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	0099      	lsls	r1, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80083da:	3301      	adds	r3, #1
 80083dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	6809      	ldr	r1, [r1, #0]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69da      	ldr	r2, [r3, #28]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	431a      	orrs	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6911      	ldr	r1, [r2, #16]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68d2      	ldr	r2, [r2, #12]
 800841e:	4311      	orrs	r1, r2
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	430b      	orrs	r3, r1
 8008426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	000186a0 	.word	0x000186a0
 8008480:	001e847f 	.word	0x001e847f
 8008484:	003d08ff 	.word	0x003d08ff
 8008488:	431bde83 	.word	0x431bde83
 800848c:	10624dd3 	.word	0x10624dd3

08008490 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e021      	b.n	80084e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2224      	movs	r2, #36	; 0x24
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0201 	bic.w	r2, r2, #1
 80084b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff f84a 	bl	8007554 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	461a      	mov	r2, r3
 80084fc:	460b      	mov	r3, r1
 80084fe:	817b      	strh	r3, [r7, #10]
 8008500:	4613      	mov	r3, r2
 8008502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008504:	f7ff f9a0 	bl	8007848 <HAL_GetTick>
 8008508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b20      	cmp	r3, #32
 8008514:	f040 80e0 	bne.w	80086d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	2319      	movs	r3, #25
 800851e:	2201      	movs	r2, #1
 8008520:	4970      	ldr	r1, [pc, #448]	; (80086e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fe5c 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800852e:	2302      	movs	r3, #2
 8008530:	e0d3      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_I2C_Master_Transmit+0x50>
 800853c:	2302      	movs	r3, #2
 800853e:	e0cc      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d007      	beq.n	8008566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2221      	movs	r2, #33	; 0x21
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2210      	movs	r2, #16
 8008582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	893a      	ldrh	r2, [r7, #8]
 8008596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4a50      	ldr	r2, [pc, #320]	; (80086e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80085a8:	8979      	ldrh	r1, [r7, #10]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6a3a      	ldr	r2, [r7, #32]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fc16 	bl	8008de0 <I2C_MasterRequestWrite>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e08d      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80085d4:	e066      	b.n	80086a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	6a39      	ldr	r1, [r7, #32]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fed6 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d107      	bne.n	80085fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e06b      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b04      	cmp	r3, #4
 800863e:	d11b      	bne.n	8008678 <HAL_I2C_Master_Transmit+0x188>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	2b00      	cmp	r3, #0
 8008646:	d017      	beq.n	8008678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	6a39      	ldr	r1, [r7, #32]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fec6 	bl	800940e <I2C_WaitOnBTFFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b04      	cmp	r3, #4
 800868e:	d107      	bne.n	80086a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800869e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e01a      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d194      	bne.n	80085d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e000      	b.n	80086da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80086d8:	2302      	movs	r3, #2
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	00100002 	.word	0x00100002
 80086e8:	ffff0000 	.word	0xffff0000

080086ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	817b      	strh	r3, [r7, #10]
 80086fe:	460b      	mov	r3, r1
 8008700:	813b      	strh	r3, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008706:	f7ff f89f 	bl	8007848 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b20      	cmp	r3, #32
 8008716:	f040 80d9 	bne.w	80088cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2319      	movs	r3, #25
 8008720:	2201      	movs	r2, #1
 8008722:	496d      	ldr	r1, [pc, #436]	; (80088d8 <HAL_I2C_Mem_Write+0x1ec>)
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fd5b 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	e0cc      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_I2C_Mem_Write+0x56>
 800873e:	2302      	movs	r3, #2
 8008740:	e0c5      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b01      	cmp	r3, #1
 8008756:	d007      	beq.n	8008768 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2221      	movs	r2, #33	; 0x21
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4a4d      	ldr	r2, [pc, #308]	; (80088dc <HAL_I2C_Mem_Write+0x1f0>)
 80087a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087aa:	88f8      	ldrh	r0, [r7, #6]
 80087ac:	893a      	ldrh	r2, [r7, #8]
 80087ae:	8979      	ldrh	r1, [r7, #10]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	4603      	mov	r3, r0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 fb92 	bl	8008ee4 <I2C_RequestMemoryWrite>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d052      	beq.n	800886c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e081      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 fddc 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00d      	beq.n	80087f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d107      	bne.n	80087f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e06b      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d11b      	bne.n	800886c <HAL_I2C_Mem_Write+0x180>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	2b00      	cmp	r3, #0
 800883a:	d017      	beq.n	800886c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1aa      	bne.n	80087ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fdc8 	bl	800940e <I2C_WaitOnBTFFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00d      	beq.n	80088a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	2b04      	cmp	r3, #4
 800888a:	d107      	bne.n	800889c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800889a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e016      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e000      	b.n	80088ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80088cc:	2302      	movs	r3, #2
  }
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	00100002 	.word	0x00100002
 80088dc:	ffff0000 	.word	0xffff0000

080088e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08c      	sub	sp, #48	; 0x30
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	817b      	strh	r3, [r7, #10]
 80088f2:	460b      	mov	r3, r1
 80088f4:	813b      	strh	r3, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088fe:	f7fe ffa3 	bl	8007848 <HAL_GetTick>
 8008902:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b20      	cmp	r3, #32
 800890e:	f040 8244 	bne.w	8008d9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	2319      	movs	r3, #25
 8008918:	2201      	movs	r2, #1
 800891a:	4982      	ldr	r1, [pc, #520]	; (8008b24 <HAL_I2C_Mem_Read+0x244>)
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fc5f 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
 800892a:	e237      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_I2C_Mem_Read+0x5a>
 8008936:	2302      	movs	r3, #2
 8008938:	e230      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b01      	cmp	r3, #1
 800894e:	d007      	beq.n	8008960 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0201 	orr.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800896e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2222      	movs	r2, #34	; 0x22
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2240      	movs	r2, #64	; 0x40
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4a62      	ldr	r2, [pc, #392]	; (8008b28 <HAL_I2C_Mem_Read+0x248>)
 80089a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089a2:	88f8      	ldrh	r0, [r7, #6]
 80089a4:	893a      	ldrh	r2, [r7, #8]
 80089a6:	8979      	ldrh	r1, [r7, #10]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	4603      	mov	r3, r0
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fb2c 	bl	8009010 <I2C_RequestMemoryRead>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e1ec      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d113      	bne.n	80089f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	e1c0      	b.n	8008d74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d11e      	bne.n	8008a38 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a0a:	b672      	cpsid	i
}
 8008a0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008a34:	b662      	cpsie	i
}
 8008a36:	e035      	b.n	8008aa4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d11e      	bne.n	8008a7e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a50:	b672      	cpsid	i
}
 8008a52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008a7a:	b662      	cpsie	i
}
 8008a7c:	e012      	b.n	8008aa4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a8c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	613b      	str	r3, [r7, #16]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008aa4:	e166      	b.n	8008d74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	f200 811f 	bhi.w	8008cee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d123      	bne.n	8008b00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fce7 	bl	8009490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e167      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008afe:	e139      	b.n	8008d74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d152      	bne.n	8008bae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4906      	ldr	r1, [pc, #24]	; (8008b2c <HAL_I2C_Mem_Read+0x24c>)
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fb64 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e13c      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
 8008b22:	bf00      	nop
 8008b24:	00100002 	.word	0x00100002
 8008b28:	ffff0000 	.word	0xffff0000
 8008b2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008b30:	b672      	cpsid	i
}
 8008b32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	691a      	ldr	r2, [r3, #16]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008b76:	b662      	cpsie	i
}
 8008b78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bac:	e0e2      	b.n	8008d74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	497b      	ldr	r1, [pc, #492]	; (8008da4 <HAL_I2C_Mem_Read+0x4c4>)
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fb11 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e0e9      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd8:	b672      	cpsid	i
}
 8008bda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	b2d2      	uxtb	r2, r2
 8008be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008c0e:	4b66      	ldr	r3, [pc, #408]	; (8008da8 <HAL_I2C_Mem_Read+0x4c8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	08db      	lsrs	r3, r3, #3
 8008c14:	4a65      	ldr	r2, [pc, #404]	; (8008dac <HAL_I2C_Mem_Read+0x4cc>)
 8008c16:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1a:	0a1a      	lsrs	r2, r3, #8
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	00da      	lsls	r2, r3, #3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d118      	bne.n	8008c66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	f043 0220 	orr.w	r2, r3, #32
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008c56:	b662      	cpsie	i
}
 8008c58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e09a      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d1d9      	bne.n	8008c28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691a      	ldr	r2, [r3, #16]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008cb6:	b662      	cpsie	i
}
 8008cb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cec:	e042      	b.n	8008d74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fbcc 	bl	8009490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e04c      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d118      	bne.n	8008d74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f47f ae94 	bne.w	8008aa6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e000      	b.n	8008d9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
  }
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	00010004 	.word	0x00010004
 8008da8:	20000944 	.word	0x20000944
 8008dac:	14f8b589 	.word	0x14f8b589

08008db0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dbe:	b2db      	uxtb	r3, r3
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	607a      	str	r2, [r7, #4]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	460b      	mov	r3, r1
 8008dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d006      	beq.n	8008e0a <I2C_MasterRequestWrite+0x2a>
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d003      	beq.n	8008e0a <I2C_MasterRequestWrite+0x2a>
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e08:	d108      	bne.n	8008e1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	e00b      	b.n	8008e34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	2b12      	cmp	r3, #18
 8008e22:	d107      	bne.n	8008e34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9cd 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00d      	beq.n	8008e68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5a:	d103      	bne.n	8008e64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e035      	b.n	8008ed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e70:	d108      	bne.n	8008e84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e72:	897b      	ldrh	r3, [r7, #10]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e80:	611a      	str	r2, [r3, #16]
 8008e82:	e01b      	b.n	8008ebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e84:	897b      	ldrh	r3, [r7, #10]
 8008e86:	11db      	asrs	r3, r3, #7
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0306 	and.w	r3, r3, #6
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f063 030f 	orn	r3, r3, #15
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	490e      	ldr	r1, [pc, #56]	; (8008edc <I2C_MasterRequestWrite+0xfc>)
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f9f3 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e010      	b.n	8008ed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008eb2:	897b      	ldrh	r3, [r7, #10]
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4907      	ldr	r1, [pc, #28]	; (8008ee0 <I2C_MasterRequestWrite+0x100>)
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f9e3 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	00010008 	.word	0x00010008
 8008ee0:	00010002 	.word	0x00010002

08008ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	817b      	strh	r3, [r7, #10]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	813b      	strh	r3, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f960 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f34:	d103      	bne.n	8008f3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e05f      	b.n	8009002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f42:	897b      	ldrh	r3, [r7, #10]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	6a3a      	ldr	r2, [r7, #32]
 8008f56:	492d      	ldr	r1, [pc, #180]	; (800900c <I2C_RequestMemoryWrite+0x128>)
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f998 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e04c      	b.n	8009002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f80:	6a39      	ldr	r1, [r7, #32]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fa02 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00d      	beq.n	8008faa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d107      	bne.n	8008fa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e02b      	b.n	8009002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d105      	bne.n	8008fbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fb0:	893b      	ldrh	r3, [r7, #8]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	611a      	str	r2, [r3, #16]
 8008fba:	e021      	b.n	8009000 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fbc:	893b      	ldrh	r3, [r7, #8]
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fcc:	6a39      	ldr	r1, [r7, #32]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f9dc 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00d      	beq.n	8008ff6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d107      	bne.n	8008ff2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e005      	b.n	8009002 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ff6:	893b      	ldrh	r3, [r7, #8]
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	00010002 	.word	0x00010002

08009010 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af02      	add	r7, sp, #8
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	4608      	mov	r0, r1
 800901a:	4611      	mov	r1, r2
 800901c:	461a      	mov	r2, r3
 800901e:	4603      	mov	r3, r0
 8009020:	817b      	strh	r3, [r7, #10]
 8009022:	460b      	mov	r3, r1
 8009024:	813b      	strh	r3, [r7, #8]
 8009026:	4613      	mov	r3, r2
 8009028:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009038:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	2200      	movs	r2, #0
 8009052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f8c2 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00d      	beq.n	800907e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009070:	d103      	bne.n	800907a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009078:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e0aa      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800907e:	897b      	ldrh	r3, [r7, #10]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800908c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	4952      	ldr	r1, [pc, #328]	; (80091dc <I2C_RequestMemoryRead+0x1cc>)
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f8fa 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e097      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090bc:	6a39      	ldr	r1, [r7, #32]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f964 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00d      	beq.n	80090e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d107      	bne.n	80090e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e076      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d105      	bne.n	80090f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090ec:	893b      	ldrh	r3, [r7, #8]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	611a      	str	r2, [r3, #16]
 80090f6:	e021      	b.n	800913c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80090f8:	893b      	ldrh	r3, [r7, #8]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	6a39      	ldr	r1, [r7, #32]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f93e 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00d      	beq.n	8009132 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	2b04      	cmp	r3, #4
 800911c:	d107      	bne.n	800912e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800912c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e050      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009132:	893b      	ldrh	r3, [r7, #8]
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913e:	6a39      	ldr	r1, [r7, #32]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f923 	bl	800938c <I2C_WaitOnTXEFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00d      	beq.n	8009168 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	2b04      	cmp	r3, #4
 8009152:	d107      	bne.n	8009164 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009162:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e035      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009176:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	2200      	movs	r2, #0
 8009180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f82b 	bl	80091e0 <I2C_WaitOnFlagUntilTimeout>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00d      	beq.n	80091ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919e:	d103      	bne.n	80091a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e013      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091ac:	897b      	ldrh	r3, [r7, #10]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	6a3a      	ldr	r2, [r7, #32]
 80091c0:	4906      	ldr	r1, [pc, #24]	; (80091dc <I2C_RequestMemoryRead+0x1cc>)
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f863 	bl	800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	00010002 	.word	0x00010002

080091e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	4613      	mov	r3, r2
 80091ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091f0:	e025      	b.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d021      	beq.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091fa:	f7fe fb25 	bl	8007848 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f043 0220 	orr.w	r2, r3, #32
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e023      	b.n	8009286 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	0c1b      	lsrs	r3, r3, #16
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10d      	bne.n	8009264 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	43da      	mvns	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf0c      	ite	eq
 800925a:	2301      	moveq	r3, #1
 800925c:	2300      	movne	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	e00c      	b.n	800927e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	43da      	mvns	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4013      	ands	r3, r2
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf0c      	ite	eq
 8009276:	2301      	moveq	r3, #1
 8009278:	2300      	movne	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d0b6      	beq.n	80091f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800929c:	e051      	b.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ac:	d123      	bne.n	80092f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	f043 0204 	orr.w	r2, r3, #4
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e046      	b.n	8009384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d021      	beq.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092fe:	f7fe faa3 	bl	8007848 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d302      	bcc.n	8009314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d116      	bne.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932e:	f043 0220 	orr.w	r2, r3, #32
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e020      	b.n	8009384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10c      	bne.n	8009366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	43da      	mvns	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	bf14      	ite	ne
 800935e:	2301      	movne	r3, #1
 8009360:	2300      	moveq	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	e00b      	b.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	43da      	mvns	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4013      	ands	r3, r2
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d18d      	bne.n	800929e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009398:	e02d      	b.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f8ce 	bl	800953c <I2C_IsAcknowledgeFailed>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e02d      	b.n	8009406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d021      	beq.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b2:	f7fe fa49 	bl	8007848 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d116      	bne.n	80093f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e007      	b.n	8009406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d1ca      	bne.n	800939a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800941a:	e02d      	b.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f88d 	bl	800953c <I2C_IsAcknowledgeFailed>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e02d      	b.n	8009488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d021      	beq.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009434:	f7fe fa08 	bl	8007848 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d116      	bne.n	8009478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	f043 0220 	orr.w	r2, r3, #32
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e007      	b.n	8009488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b04      	cmp	r3, #4
 8009484:	d1ca      	bne.n	800941c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800949c:	e042      	b.n	8009524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d119      	bne.n	80094e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0210 	mvn.w	r2, #16
 80094b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2220      	movs	r2, #32
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e029      	b.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094e0:	f7fe f9b2 	bl	8007848 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d116      	bne.n	8009524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	f043 0220 	orr.w	r2, r3, #32
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e007      	b.n	8009534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952e:	2b40      	cmp	r3, #64	; 0x40
 8009530:	d1b5      	bne.n	800949e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800954e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009552:	d11b      	bne.n	800958c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800955c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f043 0204 	orr.w	r2, r3, #4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr

08009598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e272      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8087 	beq.w	80096c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80095b8:	4b92      	ldr	r3, [pc, #584]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f003 030c 	and.w	r3, r3, #12
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d00c      	beq.n	80095de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80095c4:	4b8f      	ldr	r3, [pc, #572]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f003 030c 	and.w	r3, r3, #12
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d112      	bne.n	80095f6 <HAL_RCC_OscConfig+0x5e>
 80095d0:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095dc:	d10b      	bne.n	80095f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095de:	4b89      	ldr	r3, [pc, #548]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d06c      	beq.n	80096c4 <HAL_RCC_OscConfig+0x12c>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d168      	bne.n	80096c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e24c      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fe:	d106      	bne.n	800960e <HAL_RCC_OscConfig+0x76>
 8009600:	4b80      	ldr	r3, [pc, #512]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a7f      	ldr	r2, [pc, #508]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	e02e      	b.n	800966c <HAL_RCC_OscConfig+0xd4>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10c      	bne.n	8009630 <HAL_RCC_OscConfig+0x98>
 8009616:	4b7b      	ldr	r3, [pc, #492]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a7a      	ldr	r2, [pc, #488]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800961c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	4b78      	ldr	r3, [pc, #480]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a77      	ldr	r2, [pc, #476]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	e01d      	b.n	800966c <HAL_RCC_OscConfig+0xd4>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009638:	d10c      	bne.n	8009654 <HAL_RCC_OscConfig+0xbc>
 800963a:	4b72      	ldr	r3, [pc, #456]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a71      	ldr	r2, [pc, #452]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	4b6f      	ldr	r3, [pc, #444]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a6e      	ldr	r2, [pc, #440]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800964c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	e00b      	b.n	800966c <HAL_RCC_OscConfig+0xd4>
 8009654:	4b6b      	ldr	r3, [pc, #428]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6a      	ldr	r2, [pc, #424]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800965a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	4b68      	ldr	r3, [pc, #416]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a67      	ldr	r2, [pc, #412]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800966a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d013      	beq.n	800969c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009674:	f7fe f8e8 	bl	8007848 <HAL_GetTick>
 8009678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800967a:	e008      	b.n	800968e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800967c:	f7fe f8e4 	bl	8007848 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b64      	cmp	r3, #100	; 0x64
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e200      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800968e:	4b5d      	ldr	r3, [pc, #372]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0f0      	beq.n	800967c <HAL_RCC_OscConfig+0xe4>
 800969a:	e014      	b.n	80096c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800969c:	f7fe f8d4 	bl	8007848 <HAL_GetTick>
 80096a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096a4:	f7fe f8d0 	bl	8007848 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b64      	cmp	r3, #100	; 0x64
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e1ec      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096b6:	4b53      	ldr	r3, [pc, #332]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f0      	bne.n	80096a4 <HAL_RCC_OscConfig+0x10c>
 80096c2:	e000      	b.n	80096c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d063      	beq.n	800979a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80096d2:	4b4c      	ldr	r3, [pc, #304]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f003 030c 	and.w	r3, r3, #12
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80096de:	4b49      	ldr	r3, [pc, #292]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f003 030c 	and.w	r3, r3, #12
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d11c      	bne.n	8009724 <HAL_RCC_OscConfig+0x18c>
 80096ea:	4b46      	ldr	r3, [pc, #280]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d116      	bne.n	8009724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096f6:	4b43      	ldr	r3, [pc, #268]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <HAL_RCC_OscConfig+0x176>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d001      	beq.n	800970e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e1c0      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970e:	4b3d      	ldr	r3, [pc, #244]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4939      	ldr	r1, [pc, #228]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009722:	e03a      	b.n	800979a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d020      	beq.n	800976e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800972c:	4b36      	ldr	r3, [pc, #216]	; (8009808 <HAL_RCC_OscConfig+0x270>)
 800972e:	2201      	movs	r2, #1
 8009730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009732:	f7fe f889 	bl	8007848 <HAL_GetTick>
 8009736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009738:	e008      	b.n	800974c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800973a:	f7fe f885 	bl	8007848 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	2b02      	cmp	r3, #2
 8009746:	d901      	bls.n	800974c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e1a1      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800974c:	4b2d      	ldr	r3, [pc, #180]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0f0      	beq.n	800973a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009758:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	4927      	ldr	r1, [pc, #156]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009768:	4313      	orrs	r3, r2
 800976a:	600b      	str	r3, [r1, #0]
 800976c:	e015      	b.n	800979a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800976e:	4b26      	ldr	r3, [pc, #152]	; (8009808 <HAL_RCC_OscConfig+0x270>)
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009774:	f7fe f868 	bl	8007848 <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800977c:	f7fe f864 	bl	8007848 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e180      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800978e:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1f0      	bne.n	800977c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d03a      	beq.n	800981c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d019      	beq.n	80097e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097ae:	4b17      	ldr	r3, [pc, #92]	; (800980c <HAL_RCC_OscConfig+0x274>)
 80097b0:	2201      	movs	r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097b4:	f7fe f848 	bl	8007848 <HAL_GetTick>
 80097b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097bc:	f7fe f844 	bl	8007848 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e160      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <HAL_RCC_OscConfig+0x26c>)
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0f0      	beq.n	80097bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80097da:	2001      	movs	r0, #1
 80097dc:	f000 fad8 	bl	8009d90 <RCC_Delay>
 80097e0:	e01c      	b.n	800981c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097e2:	4b0a      	ldr	r3, [pc, #40]	; (800980c <HAL_RCC_OscConfig+0x274>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097e8:	f7fe f82e 	bl	8007848 <HAL_GetTick>
 80097ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097ee:	e00f      	b.n	8009810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097f0:	f7fe f82a 	bl	8007848 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d908      	bls.n	8009810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e146      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
 8009802:	bf00      	nop
 8009804:	40021000 	.word	0x40021000
 8009808:	42420000 	.word	0x42420000
 800980c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009810:	4b92      	ldr	r3, [pc, #584]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e9      	bne.n	80097f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80a6 	beq.w	8009976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800982e:	4b8b      	ldr	r3, [pc, #556]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10d      	bne.n	8009856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800983a:	4b88      	ldr	r3, [pc, #544]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	4a87      	ldr	r2, [pc, #540]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009844:	61d3      	str	r3, [r2, #28]
 8009846:	4b85      	ldr	r3, [pc, #532]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009852:	2301      	movs	r3, #1
 8009854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009856:	4b82      	ldr	r3, [pc, #520]	; (8009a60 <HAL_RCC_OscConfig+0x4c8>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985e:	2b00      	cmp	r3, #0
 8009860:	d118      	bne.n	8009894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009862:	4b7f      	ldr	r3, [pc, #508]	; (8009a60 <HAL_RCC_OscConfig+0x4c8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a7e      	ldr	r2, [pc, #504]	; (8009a60 <HAL_RCC_OscConfig+0x4c8>)
 8009868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800986c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800986e:	f7fd ffeb 	bl	8007848 <HAL_GetTick>
 8009872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009874:	e008      	b.n	8009888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009876:	f7fd ffe7 	bl	8007848 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b64      	cmp	r3, #100	; 0x64
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e103      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009888:	4b75      	ldr	r3, [pc, #468]	; (8009a60 <HAL_RCC_OscConfig+0x4c8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f0      	beq.n	8009876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d106      	bne.n	80098aa <HAL_RCC_OscConfig+0x312>
 800989c:	4b6f      	ldr	r3, [pc, #444]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	4a6e      	ldr	r2, [pc, #440]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	6213      	str	r3, [r2, #32]
 80098a8:	e02d      	b.n	8009906 <HAL_RCC_OscConfig+0x36e>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <HAL_RCC_OscConfig+0x334>
 80098b2:	4b6a      	ldr	r3, [pc, #424]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	4a69      	ldr	r2, [pc, #420]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	6213      	str	r3, [r2, #32]
 80098be:	4b67      	ldr	r3, [pc, #412]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	4a66      	ldr	r2, [pc, #408]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098c4:	f023 0304 	bic.w	r3, r3, #4
 80098c8:	6213      	str	r3, [r2, #32]
 80098ca:	e01c      	b.n	8009906 <HAL_RCC_OscConfig+0x36e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d10c      	bne.n	80098ee <HAL_RCC_OscConfig+0x356>
 80098d4:	4b61      	ldr	r3, [pc, #388]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	4a60      	ldr	r2, [pc, #384]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098da:	f043 0304 	orr.w	r3, r3, #4
 80098de:	6213      	str	r3, [r2, #32]
 80098e0:	4b5e      	ldr	r3, [pc, #376]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	4a5d      	ldr	r2, [pc, #372]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098e6:	f043 0301 	orr.w	r3, r3, #1
 80098ea:	6213      	str	r3, [r2, #32]
 80098ec:	e00b      	b.n	8009906 <HAL_RCC_OscConfig+0x36e>
 80098ee:	4b5b      	ldr	r3, [pc, #364]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	4a5a      	ldr	r2, [pc, #360]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	6213      	str	r3, [r2, #32]
 80098fa:	4b58      	ldr	r3, [pc, #352]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	4a57      	ldr	r2, [pc, #348]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d015      	beq.n	800993a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800990e:	f7fd ff9b 	bl	8007848 <HAL_GetTick>
 8009912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009914:	e00a      	b.n	800992c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009916:	f7fd ff97 	bl	8007848 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	f241 3288 	movw	r2, #5000	; 0x1388
 8009924:	4293      	cmp	r3, r2
 8009926:	d901      	bls.n	800992c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e0b1      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800992c:	4b4b      	ldr	r3, [pc, #300]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0ee      	beq.n	8009916 <HAL_RCC_OscConfig+0x37e>
 8009938:	e014      	b.n	8009964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800993a:	f7fd ff85 	bl	8007848 <HAL_GetTick>
 800993e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009940:	e00a      	b.n	8009958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009942:	f7fd ff81 	bl	8007848 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009950:	4293      	cmp	r3, r2
 8009952:	d901      	bls.n	8009958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e09b      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009958:	4b40      	ldr	r3, [pc, #256]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1ee      	bne.n	8009942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d105      	bne.n	8009976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800996a:	4b3c      	ldr	r3, [pc, #240]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4a3b      	ldr	r2, [pc, #236]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8087 	beq.w	8009a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009980:	4b36      	ldr	r3, [pc, #216]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f003 030c 	and.w	r3, r3, #12
 8009988:	2b08      	cmp	r3, #8
 800998a:	d061      	beq.n	8009a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d146      	bne.n	8009a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009994:	4b33      	ldr	r3, [pc, #204]	; (8009a64 <HAL_RCC_OscConfig+0x4cc>)
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800999a:	f7fd ff55 	bl	8007848 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a2:	f7fd ff51 	bl	8007848 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e06d      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099b4:	4b29      	ldr	r3, [pc, #164]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f0      	bne.n	80099a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c8:	d108      	bne.n	80099dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80099ca:	4b24      	ldr	r3, [pc, #144]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	4921      	ldr	r1, [pc, #132]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099dc:	4b1f      	ldr	r3, [pc, #124]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a19      	ldr	r1, [r3, #32]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	430b      	orrs	r3, r1
 80099ee:	491b      	ldr	r1, [pc, #108]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099f4:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <HAL_RCC_OscConfig+0x4cc>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099fa:	f7fd ff25 	bl	8007848 <HAL_GetTick>
 80099fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009a00:	e008      	b.n	8009a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a02:	f7fd ff21 	bl	8007848 <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d901      	bls.n	8009a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e03d      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f0      	beq.n	8009a02 <HAL_RCC_OscConfig+0x46a>
 8009a20:	e035      	b.n	8009a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a22:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <HAL_RCC_OscConfig+0x4cc>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a28:	f7fd ff0e 	bl	8007848 <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a30:	f7fd ff0a 	bl	8007848 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e026      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a42:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <HAL_RCC_OscConfig+0x4c4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1f0      	bne.n	8009a30 <HAL_RCC_OscConfig+0x498>
 8009a4e:	e01e      	b.n	8009a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d107      	bne.n	8009a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e019      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
 8009a5c:	40021000 	.word	0x40021000
 8009a60:	40007000 	.word	0x40007000
 8009a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HAL_RCC_OscConfig+0x500>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d106      	bne.n	8009a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d001      	beq.n	8009a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40021000 	.word	0x40021000

08009a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0d0      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ab0:	4b6a      	ldr	r3, [pc, #424]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d910      	bls.n	8009ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009abe:	4b67      	ldr	r3, [pc, #412]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f023 0207 	bic.w	r2, r3, #7
 8009ac6:	4965      	ldr	r1, [pc, #404]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ace:	4b63      	ldr	r3, [pc, #396]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d001      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e0b8      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d020      	beq.n	8009b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009af8:	4b59      	ldr	r3, [pc, #356]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4a58      	ldr	r2, [pc, #352]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0308 	and.w	r3, r3, #8
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b10:	4b53      	ldr	r3, [pc, #332]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	4a52      	ldr	r2, [pc, #328]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b1c:	4b50      	ldr	r3, [pc, #320]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	494d      	ldr	r1, [pc, #308]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d040      	beq.n	8009bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d107      	bne.n	8009b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b42:	4b47      	ldr	r3, [pc, #284]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d115      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e07f      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d107      	bne.n	8009b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b5a:	4b41      	ldr	r3, [pc, #260]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e073      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b6a:	4b3d      	ldr	r3, [pc, #244]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e06b      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b7a:	4b39      	ldr	r3, [pc, #228]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f023 0203 	bic.w	r2, r3, #3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	4936      	ldr	r1, [pc, #216]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b8c:	f7fd fe5c 	bl	8007848 <HAL_GetTick>
 8009b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b92:	e00a      	b.n	8009baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b94:	f7fd fe58 	bl	8007848 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e053      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009baa:	4b2d      	ldr	r3, [pc, #180]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f003 020c 	and.w	r2, r3, #12
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d1eb      	bne.n	8009b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bbc:	4b27      	ldr	r3, [pc, #156]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d210      	bcs.n	8009bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f023 0207 	bic.w	r2, r3, #7
 8009bd2:	4922      	ldr	r1, [pc, #136]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bda:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d001      	beq.n	8009bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e032      	b.n	8009c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bf8:	4b19      	ldr	r3, [pc, #100]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	4916      	ldr	r1, [pc, #88]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009c16:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	490e      	ldr	r1, [pc, #56]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c2a:	f000 f821 	bl	8009c70 <HAL_RCC_GetSysClockFreq>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	4b0b      	ldr	r3, [pc, #44]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	091b      	lsrs	r3, r3, #4
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	490a      	ldr	r1, [pc, #40]	; (8009c64 <HAL_RCC_ClockConfig+0x1c8>)
 8009c3c:	5ccb      	ldrb	r3, [r1, r3]
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <HAL_RCC_ClockConfig+0x1cc>)
 8009c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <HAL_RCC_ClockConfig+0x1d0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fdba 	bl	80077c4 <HAL_InitTick>

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	40022000 	.word	0x40022000
 8009c60:	40021000 	.word	0x40021000
 8009c64:	0800d60c 	.word	0x0800d60c
 8009c68:	20000944 	.word	0x20000944
 8009c6c:	20000948 	.word	0x20000948

08009c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c70:	b490      	push	{r4, r7}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009c76:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <HAL_RCC_GetSysClockFreq+0xac>)
 8009c78:	1d3c      	adds	r4, r7, #4
 8009c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009c80:	f240 2301 	movw	r3, #513	; 0x201
 8009c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61fb      	str	r3, [r7, #28]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	f003 030c 	and.w	r3, r3, #12
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d002      	beq.n	8009cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8009caa:	2b08      	cmp	r3, #8
 8009cac:	d003      	beq.n	8009cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8009cae:	e02b      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009cb0:	4b1c      	ldr	r3, [pc, #112]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009cb2:	623b      	str	r3, [r7, #32]
      break;
 8009cb4:	e02b      	b.n	8009d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	0c9b      	lsrs	r3, r3, #18
 8009cba:	f003 030f 	and.w	r3, r3, #15
 8009cbe:	3328      	adds	r3, #40	; 0x28
 8009cc0:	443b      	add	r3, r7
 8009cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009cc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d012      	beq.n	8009cf8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	0c5b      	lsrs	r3, r3, #17
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	3328      	adds	r3, #40	; 0x28
 8009cde:	443b      	add	r3, r7
 8009ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009cea:	fb03 f202 	mul.w	r2, r3, r2
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf6:	e004      	b.n	8009d02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cfc:	fb02 f303 	mul.w	r3, r2, r3
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	623b      	str	r3, [r7, #32]
      break;
 8009d06:	e002      	b.n	8009d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009d08:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009d0a:	623b      	str	r3, [r7, #32]
      break;
 8009d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3728      	adds	r7, #40	; 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc90      	pop	{r4, r7}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	0800d5f4 	.word	0x0800d5f4
 8009d20:	40021000 	.word	0x40021000
 8009d24:	007a1200 	.word	0x007a1200
 8009d28:	003d0900 	.word	0x003d0900

08009d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8009d32:	681b      	ldr	r3, [r3, #0]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr
 8009d3c:	20000944 	.word	0x20000944

08009d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d44:	f7ff fff2 	bl	8009d2c <HAL_RCC_GetHCLKFreq>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	4903      	ldr	r1, [pc, #12]	; (8009d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d56:	5ccb      	ldrb	r3, [r1, r3]
 8009d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	40021000 	.word	0x40021000
 8009d64:	0800d61c 	.word	0x0800d61c

08009d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d6c:	f7ff ffde 	bl	8009d2c <HAL_RCC_GetHCLKFreq>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	0adb      	lsrs	r3, r3, #11
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	4903      	ldr	r1, [pc, #12]	; (8009d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d7e:	5ccb      	ldrb	r3, [r1, r3]
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	0800d61c 	.word	0x0800d61c

08009d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <RCC_Delay+0x34>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <RCC_Delay+0x38>)
 8009d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009da2:	0a5b      	lsrs	r3, r3, #9
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009dac:	bf00      	nop
  }
  while (Delay --);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1e5a      	subs	r2, r3, #1
 8009db2:	60fa      	str	r2, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f9      	bne.n	8009dac <RCC_Delay+0x1c>
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr
 8009dc4:	20000944 	.word	0x20000944
 8009dc8:	10624dd3 	.word	0x10624dd3

08009dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e041      	b.n	8009e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fd fbd0 	bl	8007598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f000 fa7e 	bl	800a30c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d001      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e044      	b.n	8009f0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	; (8009f18 <HAL_TIM_Base_Start_IT+0xac>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d018      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1c      	ldr	r2, [pc, #112]	; (8009f1c <HAL_TIM_Base_Start_IT+0xb0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d013      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb8:	d00e      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <HAL_TIM_Base_Start_IT+0xb4>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d009      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <HAL_TIM_Base_Start_IT+0xb8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <HAL_TIM_Base_Start_IT+0xbc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d111      	bne.n	8009efc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d010      	beq.n	8009f0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0201 	orr.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efa:	e007      	b.n	8009f0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40013400 	.word	0x40013400
 8009f20:	40000400 	.word	0x40000400
 8009f24:	40000800 	.word	0x40000800
 8009f28:	40000c00 	.word	0x40000c00

08009f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d122      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d11b      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f06f 0202 	mvn.w	r2, #2
 8009f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f9b1 	bl	800a2d6 <HAL_TIM_IC_CaptureCallback>
 8009f74:	e005      	b.n	8009f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f9a4 	bl	800a2c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9b3 	bl	800a2e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d122      	bne.n	8009fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d11b      	bne.n	8009fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f06f 0204 	mvn.w	r2, #4
 8009fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f987 	bl	800a2d6 <HAL_TIM_IC_CaptureCallback>
 8009fc8:	e005      	b.n	8009fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f97a 	bl	800a2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f989 	bl	800a2e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d122      	bne.n	800a030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f003 0308 	and.w	r3, r3, #8
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d11b      	bne.n	800a030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f06f 0208 	mvn.w	r2, #8
 800a000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2204      	movs	r2, #4
 800a006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f95d 	bl	800a2d6 <HAL_TIM_IC_CaptureCallback>
 800a01c:	e005      	b.n	800a02a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f950 	bl	800a2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f95f 	bl	800a2e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	f003 0310 	and.w	r3, r3, #16
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d122      	bne.n	800a084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f003 0310 	and.w	r3, r3, #16
 800a048:	2b10      	cmp	r3, #16
 800a04a:	d11b      	bne.n	800a084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f06f 0210 	mvn.w	r2, #16
 800a054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2208      	movs	r2, #8
 800a05a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f933 	bl	800a2d6 <HAL_TIM_IC_CaptureCallback>
 800a070:	e005      	b.n	800a07e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f926 	bl	800a2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f935 	bl	800a2e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d10e      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d107      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f06f 0201 	mvn.w	r2, #1
 800a0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7fa fe00 	bl	8004cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ba:	2b80      	cmp	r3, #128	; 0x80
 800a0bc:	d10e      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c8:	2b80      	cmp	r3, #128	; 0x80
 800a0ca:	d107      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa9d 	bl	800a616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d10e      	bne.n	800a108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f4:	2b40      	cmp	r3, #64	; 0x40
 800a0f6:	d107      	bne.n	800a108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8f9 	bl	800a2fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b20      	cmp	r3, #32
 800a114:	d10e      	bne.n	800a134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0320 	and.w	r3, r3, #32
 800a120:	2b20      	cmp	r3, #32
 800a122:	d107      	bne.n	800a134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f06f 0220 	mvn.w	r2, #32
 800a12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa68 	bl	800a604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_TIM_ConfigClockSource+0x18>
 800a150:	2302      	movs	r3, #2
 800a152:	e0b3      	b.n	800a2bc <HAL_TIM_ConfigClockSource+0x180>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2202      	movs	r2, #2
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a17a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18c:	d03e      	beq.n	800a20c <HAL_TIM_ConfigClockSource+0xd0>
 800a18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a192:	f200 8087 	bhi.w	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19a:	f000 8085 	beq.w	800a2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a2:	d87f      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1a4:	2b70      	cmp	r3, #112	; 0x70
 800a1a6:	d01a      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0xa2>
 800a1a8:	2b70      	cmp	r3, #112	; 0x70
 800a1aa:	d87b      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1ac:	2b60      	cmp	r3, #96	; 0x60
 800a1ae:	d050      	beq.n	800a252 <HAL_TIM_ConfigClockSource+0x116>
 800a1b0:	2b60      	cmp	r3, #96	; 0x60
 800a1b2:	d877      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1b4:	2b50      	cmp	r3, #80	; 0x50
 800a1b6:	d03c      	beq.n	800a232 <HAL_TIM_ConfigClockSource+0xf6>
 800a1b8:	2b50      	cmp	r3, #80	; 0x50
 800a1ba:	d873      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	d058      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0x136>
 800a1c0:	2b40      	cmp	r3, #64	; 0x40
 800a1c2:	d86f      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d064      	beq.n	800a292 <HAL_TIM_ConfigClockSource+0x156>
 800a1c8:	2b30      	cmp	r3, #48	; 0x30
 800a1ca:	d86b      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d060      	beq.n	800a292 <HAL_TIM_ConfigClockSource+0x156>
 800a1d0:	2b20      	cmp	r3, #32
 800a1d2:	d867      	bhi.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d05c      	beq.n	800a292 <HAL_TIM_ConfigClockSource+0x156>
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d05a      	beq.n	800a292 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a1dc:	e062      	b.n	800a2a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6899      	ldr	r1, [r3, #8]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f000 f97e 	bl	800a4ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	609a      	str	r2, [r3, #8]
      break;
 800a20a:	e04e      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	6899      	ldr	r1, [r3, #8]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f000 f967 	bl	800a4ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a22e:	609a      	str	r2, [r3, #8]
      break;
 800a230:	e03b      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6859      	ldr	r1, [r3, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	461a      	mov	r2, r3
 800a240:	f000 f8de 	bl	800a400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2150      	movs	r1, #80	; 0x50
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f935 	bl	800a4ba <TIM_ITRx_SetConfig>
      break;
 800a250:	e02b      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6859      	ldr	r1, [r3, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	461a      	mov	r2, r3
 800a260:	f000 f8fc 	bl	800a45c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2160      	movs	r1, #96	; 0x60
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f925 	bl	800a4ba <TIM_ITRx_SetConfig>
      break;
 800a270:	e01b      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6859      	ldr	r1, [r3, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	461a      	mov	r2, r3
 800a280:	f000 f8be 	bl	800a400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2140      	movs	r1, #64	; 0x40
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f915 	bl	800a4ba <TIM_ITRx_SetConfig>
      break;
 800a290:	e00b      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f000 f90c 	bl	800a4ba <TIM_ITRx_SetConfig>
        break;
 800a2a2:	e002      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr

0800a2d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bc80      	pop	{r7}
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr

0800a30c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a33      	ldr	r2, [pc, #204]	; (800a3ec <TIM_Base_SetConfig+0xe0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d013      	beq.n	800a34c <TIM_Base_SetConfig+0x40>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a32      	ldr	r2, [pc, #200]	; (800a3f0 <TIM_Base_SetConfig+0xe4>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00f      	beq.n	800a34c <TIM_Base_SetConfig+0x40>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a332:	d00b      	beq.n	800a34c <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a2f      	ldr	r2, [pc, #188]	; (800a3f4 <TIM_Base_SetConfig+0xe8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d007      	beq.n	800a34c <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a2e      	ldr	r2, [pc, #184]	; (800a3f8 <TIM_Base_SetConfig+0xec>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d003      	beq.n	800a34c <TIM_Base_SetConfig+0x40>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a2d      	ldr	r2, [pc, #180]	; (800a3fc <TIM_Base_SetConfig+0xf0>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d108      	bne.n	800a35e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a22      	ldr	r2, [pc, #136]	; (800a3ec <TIM_Base_SetConfig+0xe0>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d013      	beq.n	800a38e <TIM_Base_SetConfig+0x82>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <TIM_Base_SetConfig+0xe4>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d00f      	beq.n	800a38e <TIM_Base_SetConfig+0x82>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a374:	d00b      	beq.n	800a38e <TIM_Base_SetConfig+0x82>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a1e      	ldr	r2, [pc, #120]	; (800a3f4 <TIM_Base_SetConfig+0xe8>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d007      	beq.n	800a38e <TIM_Base_SetConfig+0x82>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a1d      	ldr	r2, [pc, #116]	; (800a3f8 <TIM_Base_SetConfig+0xec>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d003      	beq.n	800a38e <TIM_Base_SetConfig+0x82>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a1c      	ldr	r2, [pc, #112]	; (800a3fc <TIM_Base_SetConfig+0xf0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d108      	bne.n	800a3a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <TIM_Base_SetConfig+0xe0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_Base_SetConfig+0xc8>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <TIM_Base_SetConfig+0xe4>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d103      	bne.n	800a3dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	615a      	str	r2, [r3, #20]
}
 800a3e2:	bf00      	nop
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr
 800a3ec:	40012c00 	.word	0x40012c00
 800a3f0:	40013400 	.word	0x40013400
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800
 800a3fc:	40000c00 	.word	0x40000c00

0800a400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	f023 0201 	bic.w	r2, r3, #1
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a42a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f023 030a 	bic.w	r3, r3, #10
 800a43c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4313      	orrs	r3, r2
 800a444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	621a      	str	r2, [r3, #32]
}
 800a452:	bf00      	nop
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	f023 0210 	bic.w	r2, r3, #16
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a486:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	031b      	lsls	r3, r3, #12
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	621a      	str	r2, [r3, #32]
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr

0800a4ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f043 0307 	orr.w	r3, r3, #7
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	609a      	str	r2, [r3, #8]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr

0800a4ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b087      	sub	sp, #28
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	607a      	str	r2, [r7, #4]
 800a4fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a508:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	021a      	lsls	r2, r3, #8
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	431a      	orrs	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	4313      	orrs	r3, r2
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	4313      	orrs	r3, r2
 800a51a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	609a      	str	r2, [r3, #8]
}
 800a522:	bf00      	nop
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	bc80      	pop	{r7}
 800a52a:	4770      	bx	lr

0800a52c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a540:	2302      	movs	r3, #2
 800a542:	e050      	b.n	800a5e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a56a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a1b      	ldr	r2, [pc, #108]	; (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d018      	beq.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a19      	ldr	r2, [pc, #100]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d013      	beq.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59a:	d00e      	beq.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d009      	beq.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a14      	ldr	r2, [pc, #80]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d004      	beq.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a12      	ldr	r2, [pc, #72]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d10c      	bne.n	800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bc80      	pop	{r7}
 800a5ee:	4770      	bx	lr
 800a5f0:	40012c00 	.word	0x40012c00
 800a5f4:	40013400 	.word	0x40013400
 800a5f8:	40000400 	.word	0x40000400
 800a5fc:	40000800 	.word	0x40000800
 800a600:	40000c00 	.word	0x40000c00

0800a604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr

0800a616 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e03f      	b.n	800a6ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d106      	bne.n	800a654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7fc ffc8 	bl	80075e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2224      	movs	r2, #36	; 0x24
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a66a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f891 	bl	800a794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	695a      	ldr	r2, [r3, #20]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d11d      	bne.n	800a718 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <HAL_UART_Receive_IT+0x26>
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e016      	b.n	800a71a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d101      	bne.n	800a6fa <HAL_UART_Receive_IT+0x38>
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	e00f      	b.n	800a71a <HAL_UART_Receive_IT+0x58>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	461a      	mov	r2, r3
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 f807 	bl	800a722 <UART_Start_Receive_IT>
 800a714:	4603      	mov	r3, r0
 800a716:	e000      	b.n	800a71a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4613      	mov	r3, r2
 800a72e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2222      	movs	r2, #34	; 0x22
 800a74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a766:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695a      	ldr	r2, [r3, #20]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0220 	orr.w	r2, r2, #32
 800a786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	bc80      	pop	{r7}
 800a792:	4770      	bx	lr

0800a794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a7ce:	f023 030c 	bic.w	r3, r3, #12
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6812      	ldr	r2, [r2, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699a      	ldr	r2, [r3, #24]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a2c      	ldr	r2, [pc, #176]	; (800a8a8 <UART_SetConfig+0x114>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d103      	bne.n	800a804 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a7fc:	f7ff fab4 	bl	8009d68 <HAL_RCC_GetPCLK2Freq>
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	e002      	b.n	800a80a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a804:	f7ff fa9c 	bl	8009d40 <HAL_RCC_GetPCLK1Freq>
 800a808:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009a      	lsls	r2, r3, #2
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a820:	4a22      	ldr	r2, [pc, #136]	; (800a8ac <UART_SetConfig+0x118>)
 800a822:	fba2 2303 	umull	r2, r3, r2, r3
 800a826:	095b      	lsrs	r3, r3, #5
 800a828:	0119      	lsls	r1, r3, #4
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009a      	lsls	r2, r3, #2
 800a834:	441a      	add	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <UART_SetConfig+0x118>)
 800a842:	fba3 0302 	umull	r0, r3, r3, r2
 800a846:	095b      	lsrs	r3, r3, #5
 800a848:	2064      	movs	r0, #100	; 0x64
 800a84a:	fb00 f303 	mul.w	r3, r0, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	3332      	adds	r3, #50	; 0x32
 800a854:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <UART_SetConfig+0x118>)
 800a856:	fba2 2303 	umull	r2, r3, r2, r3
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a860:	4419      	add	r1, r3
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	009a      	lsls	r2, r3, #2
 800a86c:	441a      	add	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	fbb2 f2f3 	udiv	r2, r2, r3
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <UART_SetConfig+0x118>)
 800a87a:	fba3 0302 	umull	r0, r3, r3, r2
 800a87e:	095b      	lsrs	r3, r3, #5
 800a880:	2064      	movs	r0, #100	; 0x64
 800a882:	fb00 f303 	mul.w	r3, r0, r3
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	3332      	adds	r3, #50	; 0x32
 800a88c:	4a07      	ldr	r2, [pc, #28]	; (800a8ac <UART_SetConfig+0x118>)
 800a88e:	fba2 2303 	umull	r2, r3, r2, r3
 800a892:	095b      	lsrs	r3, r3, #5
 800a894:	f003 020f 	and.w	r2, r3, #15
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	440a      	add	r2, r1
 800a89e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a8a0:	bf00      	nop
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	40013800 	.word	0x40013800
 800a8ac:	51eb851f 	.word	0x51eb851f

0800a8b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8c2:	2b84      	cmp	r3, #132	; 0x84
 800a8c4:	d005      	beq.n	800a8d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3303      	adds	r3, #3
 800a8d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a8e2:	f000 fd9b 	bl	800b41c <vTaskStartScheduler>
  
  return osOK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ee:	b089      	sub	sp, #36	; 0x24
 800a8f0:	af04      	add	r7, sp, #16
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d020      	beq.n	800a940 <osThreadCreate+0x54>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01c      	beq.n	800a940 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685c      	ldr	r4, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691e      	ldr	r6, [r3, #16]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff ffc9 	bl	800a8b0 <makeFreeRtosPriority>
 800a91e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a928:	9202      	str	r2, [sp, #8]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	9100      	str	r1, [sp, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	4632      	mov	r2, r6
 800a932:	4629      	mov	r1, r5
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fbb3 	bl	800b0a0 <xTaskCreateStatic>
 800a93a:	4603      	mov	r3, r0
 800a93c:	60fb      	str	r3, [r7, #12]
 800a93e:	e01c      	b.n	800a97a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685c      	ldr	r4, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a94c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff ffab 	bl	800a8b0 <makeFreeRtosPriority>
 800a95a:	4602      	mov	r2, r0
 800a95c:	f107 030c 	add.w	r3, r7, #12
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	9200      	str	r2, [sp, #0]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	4632      	mov	r2, r6
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fbf4 	bl	800b158 <xTaskCreate>
 800a970:	4603      	mov	r3, r0
 800a972:	2b01      	cmp	r3, #1
 800a974:	d001      	beq.n	800a97a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	e000      	b.n	800a97c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a97a:	68fb      	ldr	r3, [r7, #12]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a984 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <osDelay+0x16>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	e000      	b.n	800a99c <osDelay+0x18>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fd09 	bl	800b3b4 <vTaskDelay>
  
  return osOK;
 800a9a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f103 0208 	add.w	r2, r3, #8
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f103 0208 	add.w	r2, r3, #8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bc80      	pop	{r7}
 800a9e8:	4770      	bx	lr

0800a9ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr

0800aa02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	601a      	str	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bc80      	pop	{r7}
 800aa46:	4770      	bx	lr

0800aa48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d103      	bne.n	800aa68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e00c      	b.n	800aa82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e002      	b.n	800aa76 <vListInsert+0x2e>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d2f6      	bcs.n	800aa70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685a      	ldr	r2, [r3, #4]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	601a      	str	r2, [r3, #0]
}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bc80      	pop	{r7}
 800aab6:	4770      	bx	lr

0800aab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6892      	ldr	r2, [r2, #8]
 800aace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6852      	ldr	r2, [r2, #4]
 800aad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d103      	bne.n	800aaec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689a      	ldr	r2, [r3, #8]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	1e5a      	subs	r2, r3, #1
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr
	...

0800ab0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab36:	f001 fa71 	bl	800c01c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab46:	fb01 f303 	mul.w	r3, r1, r3
 800ab4a:	441a      	add	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	3b01      	subs	r3, #1
 800ab68:	68f9      	ldr	r1, [r7, #12]
 800ab6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab6c:	fb01 f303 	mul.w	r3, r1, r3
 800ab70:	441a      	add	r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	22ff      	movs	r2, #255	; 0xff
 800ab7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	22ff      	movs	r2, #255	; 0xff
 800ab82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d114      	bne.n	800abb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01a      	beq.n	800abca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3310      	adds	r3, #16
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fe85 	bl	800b8a8 <xTaskRemoveFromEventList>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d012      	beq.n	800abca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aba4:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <xQueueGenericReset+0xcc>)
 800aba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	e009      	b.n	800abca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3310      	adds	r3, #16
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fef6 	bl	800a9ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fef1 	bl	800a9ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abca:	f001 fa57 	bl	800c07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abce:	2301      	movs	r3, #1
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	; 0x28
 800abe0:	af02      	add	r7, sp, #8
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <xQueueGenericCreate+0x2a>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e004      	b.n	800ac1c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	fb02 f303 	mul.w	r3, r2, r3
 800ac1a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	3348      	adds	r3, #72	; 0x48
 800ac20:	4618      	mov	r0, r3
 800ac22:	f001 fabd 	bl	800c1a0 <pvPortMalloc>
 800ac26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00f      	beq.n	800ac4e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	3348      	adds	r3, #72	; 0x48
 800ac32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac3c:	79fa      	ldrb	r2, [r7, #7]
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	4613      	mov	r3, r2
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f805 	bl	800ac58 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3720      	adds	r7, #32
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d103      	bne.n	800ac74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac86:	2101      	movs	r1, #1
 800ac88:	69b8      	ldr	r0, [r7, #24]
 800ac8a:	f7ff ff3f 	bl	800ab0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00e      	beq.n	800acc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800acb6:	2300      	movs	r3, #0
 800acb8:	2200      	movs	r2, #0
 800acba:	2100      	movs	r1, #0
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f81d 	bl	800acfc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800acc2:	bf00      	nop
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800acca:	b580      	push	{r7, lr}
 800accc:	b086      	sub	sp, #24
 800acce:	af00      	add	r7, sp, #0
 800acd0:	4603      	mov	r3, r0
 800acd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acd4:	2301      	movs	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	461a      	mov	r2, r3
 800ace0:	6939      	ldr	r1, [r7, #16]
 800ace2:	6978      	ldr	r0, [r7, #20]
 800ace4:	f7ff ff7a 	bl	800abdc <xQueueGenericCreate>
 800ace8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff ffd3 	bl	800ac96 <prvInitialiseMutex>

		return pxNewQueue;
 800acf0:	68fb      	ldr	r3, [r7, #12]
	}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08e      	sub	sp, #56	; 0x38
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xQueueGenericSend+0x32>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d103      	bne.n	800ad3c <xQueueGenericSend+0x40>
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <xQueueGenericSend+0x44>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e000      	b.n	800ad42 <xQueueGenericSend+0x46>
 800ad40:	2300      	movs	r3, #0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10a      	bne.n	800ad5c <xQueueGenericSend+0x60>
	__asm volatile
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad58:	bf00      	nop
 800ad5a:	e7fe      	b.n	800ad5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d103      	bne.n	800ad6a <xQueueGenericSend+0x6e>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <xQueueGenericSend+0x72>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <xQueueGenericSend+0x74>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <xQueueGenericSend+0x8e>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	623b      	str	r3, [r7, #32]
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad8a:	f000 ff4d 	bl	800bc28 <xTaskGetSchedulerState>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <xQueueGenericSend+0x9e>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <xQueueGenericSend+0xa2>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <xQueueGenericSend+0xa4>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xQueueGenericSend+0xbe>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	61fb      	str	r3, [r7, #28]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adba:	f001 f92f 	bl	800c01c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d302      	bcc.n	800add0 <xQueueGenericSend+0xd4>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d129      	bne.n	800ae24 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800add6:	f000 f88f 	bl	800aef8 <prvCopyDataToQueue>
 800adda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d010      	beq.n	800ae06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	3324      	adds	r3, #36	; 0x24
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fd5d 	bl	800b8a8 <xTaskRemoveFromEventList>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d013      	beq.n	800ae1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adf4:	4b3f      	ldr	r3, [pc, #252]	; (800aef4 <xQueueGenericSend+0x1f8>)
 800adf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	e00a      	b.n	800ae1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d007      	beq.n	800ae1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae0c:	4b39      	ldr	r3, [pc, #228]	; (800aef4 <xQueueGenericSend+0x1f8>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae1c:	f001 f92e 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e063      	b.n	800aeec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae2a:	f001 f927 	bl	800c07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e05c      	b.n	800aeec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae38:	f107 0314 	add.w	r3, r7, #20
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fd95 	bl	800b96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae42:	2301      	movs	r3, #1
 800ae44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae46:	f001 f919 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae4a:	f000 fb47 	bl	800b4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae4e:	f001 f8e5 	bl	800c01c <vPortEnterCritical>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5e:	d103      	bne.n	800ae68 <xQueueGenericSend+0x16c>
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae6e:	b25b      	sxtb	r3, r3
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d103      	bne.n	800ae7e <xQueueGenericSend+0x182>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae7e:	f001 f8fd 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae82:	1d3a      	adds	r2, r7, #4
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	4611      	mov	r1, r2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fd84 	bl	800b998 <xTaskCheckForTimeOut>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d124      	bne.n	800aee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae98:	f000 f8ea 	bl	800b070 <prvIsQueueFull>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d018      	beq.n	800aed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	3310      	adds	r3, #16
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 fcd8 	bl	800b860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aeb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb2:	f000 f88b 	bl	800afcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeb6:	f000 fb1f 	bl	800b4f8 <xTaskResumeAll>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f47f af7c 	bne.w	800adba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <xQueueGenericSend+0x1f8>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	e772      	b.n	800adba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f000 f879 	bl	800afcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeda:	f000 fb0d 	bl	800b4f8 <xTaskResumeAll>
 800aede:	e76c      	b.n	800adba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee2:	f000 f873 	bl	800afcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aee6:	f000 fb07 	bl	800b4f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aeea:	2300      	movs	r3, #0
		}
	}
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3738      	adds	r7, #56	; 0x38
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af04:	2300      	movs	r3, #0
 800af06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10d      	bne.n	800af32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d14d      	bne.n	800afba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fe9e 	bl	800bc64 <xTaskPriorityDisinherit>
 800af28:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	e043      	b.n	800afba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d119      	bne.n	800af6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6898      	ldr	r0, [r3, #8]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	461a      	mov	r2, r3
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	f001 fc60 	bl	800c808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689a      	ldr	r2, [r3, #8]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d32b      	bcc.n	800afba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	609a      	str	r2, [r3, #8]
 800af6a:	e026      	b.n	800afba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68d8      	ldr	r0, [r3, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af74:	461a      	mov	r2, r3
 800af76:	68b9      	ldr	r1, [r7, #8]
 800af78:	f001 fc46 	bl	800c808 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af84:	425b      	negs	r3, r3
 800af86:	441a      	add	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d207      	bcs.n	800afa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	425b      	negs	r3, r3
 800afa2:	441a      	add	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d105      	bne.n	800afba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afd4:	f001 f822 	bl	800c01c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afe0:	e011      	b.n	800b006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d012      	beq.n	800b010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3324      	adds	r3, #36	; 0x24
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fc5a 	bl	800b8a8 <xTaskRemoveFromEventList>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800affa:	f000 fd2f 	bl	800ba5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	3b01      	subs	r3, #1
 800b002:	b2db      	uxtb	r3, r3
 800b004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dce9      	bgt.n	800afe2 <prvUnlockQueue+0x16>
 800b00e:	e000      	b.n	800b012 <prvUnlockQueue+0x46>
					break;
 800b010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	22ff      	movs	r2, #255	; 0xff
 800b016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b01a:	f001 f82f 	bl	800c07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b01e:	f000 fffd 	bl	800c01c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b02a:	e011      	b.n	800b050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d012      	beq.n	800b05a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3310      	adds	r3, #16
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fc35 	bl	800b8a8 <xTaskRemoveFromEventList>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b044:	f000 fd0a 	bl	800ba5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b054:	2b00      	cmp	r3, #0
 800b056:	dce9      	bgt.n	800b02c <prvUnlockQueue+0x60>
 800b058:	e000      	b.n	800b05c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b05a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	22ff      	movs	r2, #255	; 0xff
 800b060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b064:	f001 f80a 	bl	800c07c <vPortExitCritical>
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b078:	f000 ffd0 	bl	800c01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b084:	429a      	cmp	r2, r3
 800b086:	d102      	bne.n	800b08e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	e001      	b.n	800b092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b092:	f000 fff3 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800b096:	68fb      	ldr	r3, [r7, #12]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08e      	sub	sp, #56	; 0x38
 800b0a4:	af04      	add	r7, sp, #16
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	623b      	str	r3, [r7, #32]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	61fb      	str	r3, [r7, #28]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0e6:	2354      	movs	r3, #84	; 0x54
 800b0e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2b54      	cmp	r3, #84	; 0x54
 800b0ee:	d00a      	beq.n	800b106 <xTaskCreateStatic+0x66>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	61bb      	str	r3, [r7, #24]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01e      	beq.n	800b14a <xTaskCreateStatic+0xaa>
 800b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01b      	beq.n	800b14a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b124:	2300      	movs	r3, #0
 800b126:	9303      	str	r3, [sp, #12]
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	9302      	str	r3, [sp, #8]
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f850 	bl	800b1e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b144:	f000 f8cc 	bl	800b2e0 <prvAddNewTaskToReadyList>
 800b148:	e001      	b.n	800b14e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b14e:	697b      	ldr	r3, [r7, #20]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	3728      	adds	r7, #40	; 0x28
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	; 0x30
 800b15c:	af04      	add	r7, sp, #16
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b168:	88fb      	ldrh	r3, [r7, #6]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 f817 	bl	800c1a0 <pvPortMalloc>
 800b172:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b17a:	2054      	movs	r0, #84	; 0x54
 800b17c:	f001 f810 	bl	800c1a0 <pvPortMalloc>
 800b180:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	631a      	str	r2, [r3, #48]	; 0x30
 800b18e:	e005      	b.n	800b19c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b190:	6978      	ldr	r0, [r7, #20]
 800b192:	f001 f8c9 	bl	800c328 <vPortFree>
 800b196:	e001      	b.n	800b19c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d017      	beq.n	800b1d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	9302      	str	r3, [sp, #8]
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f80e 	bl	800b1e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c6:	69f8      	ldr	r0, [r7, #28]
 800b1c8:	f000 f88a 	bl	800b2e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	61bb      	str	r3, [r7, #24]
 800b1d0:	e002      	b.n	800b1d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
	}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3720      	adds	r7, #32
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b088      	sub	sp, #32
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	f023 0307 	bic.w	r3, r3, #7
 800b208:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	f003 0307 	and.w	r3, r3, #7
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <prvInitialiseNewTask+0x48>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	617b      	str	r3, [r7, #20]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b22a:	2300      	movs	r3, #0
 800b22c:	61fb      	str	r3, [r7, #28]
 800b22e:	e012      	b.n	800b256 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	4413      	add	r3, r2
 800b236:	7819      	ldrb	r1, [r3, #0]
 800b238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	4413      	add	r3, r2
 800b23e:	3334      	adds	r3, #52	; 0x34
 800b240:	460a      	mov	r2, r1
 800b242:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d006      	beq.n	800b25e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	3301      	adds	r3, #1
 800b254:	61fb      	str	r3, [r7, #28]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	2b0f      	cmp	r3, #15
 800b25a:	d9e9      	bls.n	800b230 <prvInitialiseNewTask+0x4e>
 800b25c:	e000      	b.n	800b260 <prvInitialiseNewTask+0x7e>
		{
			break;
 800b25e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	2b06      	cmp	r3, #6
 800b26c:	d901      	bls.n	800b272 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b26e:	2306      	movs	r3, #6
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b27c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	2200      	movs	r2, #0
 800b282:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	3304      	adds	r3, #4
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fbae 	bl	800a9ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	3318      	adds	r3, #24
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fba9 	bl	800a9ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	f1c3 0207 	rsb	r2, r3, #7
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	69b8      	ldr	r0, [r7, #24]
 800b2c2:	f000 fdbb 	bl	800be3c <pxPortInitialiseStack>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d8:	bf00      	nop
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2e8:	f000 fe98 	bl	800c01c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2ec:	4b2a      	ldr	r3, [pc, #168]	; (800b398 <prvAddNewTaskToReadyList+0xb8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4a29      	ldr	r2, [pc, #164]	; (800b398 <prvAddNewTaskToReadyList+0xb8>)
 800b2f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2f6:	4b29      	ldr	r3, [pc, #164]	; (800b39c <prvAddNewTaskToReadyList+0xbc>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d109      	bne.n	800b312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2fe:	4a27      	ldr	r2, [pc, #156]	; (800b39c <prvAddNewTaskToReadyList+0xbc>)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <prvAddNewTaskToReadyList+0xb8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d110      	bne.n	800b32e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b30c:	f000 fbca 	bl	800baa4 <prvInitialiseTaskLists>
 800b310:	e00d      	b.n	800b32e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b312:	4b23      	ldr	r3, [pc, #140]	; (800b3a0 <prvAddNewTaskToReadyList+0xc0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b31a:	4b20      	ldr	r3, [pc, #128]	; (800b39c <prvAddNewTaskToReadyList+0xbc>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	429a      	cmp	r2, r3
 800b326:	d802      	bhi.n	800b32e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b328:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <prvAddNewTaskToReadyList+0xbc>)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b32e:	4b1d      	ldr	r3, [pc, #116]	; (800b3a4 <prvAddNewTaskToReadyList+0xc4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a1b      	ldr	r2, [pc, #108]	; (800b3a4 <prvAddNewTaskToReadyList+0xc4>)
 800b336:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	2201      	movs	r2, #1
 800b33e:	409a      	lsls	r2, r3
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <prvAddNewTaskToReadyList+0xc8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4313      	orrs	r3, r2
 800b346:	4a18      	ldr	r2, [pc, #96]	; (800b3a8 <prvAddNewTaskToReadyList+0xc8>)
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <prvAddNewTaskToReadyList+0xcc>)
 800b358:	441a      	add	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f7ff fb4e 	bl	800aa02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b366:	f000 fe89 	bl	800c07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b36a:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <prvAddNewTaskToReadyList+0xc0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00e      	beq.n	800b390 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <prvAddNewTaskToReadyList+0xbc>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d207      	bcs.n	800b390 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b380:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <prvAddNewTaskToReadyList+0xd0>)
 800b382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	2000102c 	.word	0x2000102c
 800b39c:	20000f2c 	.word	0x20000f2c
 800b3a0:	20001038 	.word	0x20001038
 800b3a4:	20001048 	.word	0x20001048
 800b3a8:	20001034 	.word	0x20001034
 800b3ac:	20000f30 	.word	0x20000f30
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d017      	beq.n	800b3f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <vTaskDelay+0x60>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <vTaskDelay+0x30>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	60bb      	str	r3, [r7, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e4:	f000 f87a 	bl	800b4dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fcc0 	bl	800bd70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f0:	f000 f882 	bl	800b4f8 <xTaskResumeAll>
 800b3f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d107      	bne.n	800b40c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <vTaskDelay+0x64>)
 800b3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20001054 	.word	0x20001054
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	; 0x28
 800b420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42a:	463a      	mov	r2, r7
 800b42c:	1d39      	adds	r1, r7, #4
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f7f4 ff04 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	9202      	str	r2, [sp, #8]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	2300      	movs	r3, #0
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2300      	movs	r3, #0
 800b448:	460a      	mov	r2, r1
 800b44a:	491e      	ldr	r1, [pc, #120]	; (800b4c4 <vTaskStartScheduler+0xa8>)
 800b44c:	481e      	ldr	r0, [pc, #120]	; (800b4c8 <vTaskStartScheduler+0xac>)
 800b44e:	f7ff fe27 	bl	800b0a0 <xTaskCreateStatic>
 800b452:	4603      	mov	r3, r0
 800b454:	4a1d      	ldr	r2, [pc, #116]	; (800b4cc <vTaskStartScheduler+0xb0>)
 800b456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b458:	4b1c      	ldr	r3, [pc, #112]	; (800b4cc <vTaskStartScheduler+0xb0>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e001      	b.n	800b46a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d116      	bne.n	800b49e <vTaskStartScheduler+0x82>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
}
 800b482:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b484:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <vTaskStartScheduler+0xb4>)
 800b486:	f04f 32ff 	mov.w	r2, #4294967295
 800b48a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b48c:	4b11      	ldr	r3, [pc, #68]	; (800b4d4 <vTaskStartScheduler+0xb8>)
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <vTaskStartScheduler+0xbc>)
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b498:	f000 fd4e 	bl	800bf38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b49c:	e00e      	b.n	800b4bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d10a      	bne.n	800b4bc <vTaskStartScheduler+0xa0>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	60fb      	str	r3, [r7, #12]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <vTaskStartScheduler+0x9e>
}
 800b4bc:	bf00      	nop
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	0800d604 	.word	0x0800d604
 800b4c8:	0800ba75 	.word	0x0800ba75
 800b4cc:	20001050 	.word	0x20001050
 800b4d0:	2000104c 	.word	0x2000104c
 800b4d4:	20001038 	.word	0x20001038
 800b4d8:	20001030 	.word	0x20001030

0800b4dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4e0:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <vTaskSuspendAll+0x18>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a03      	ldr	r2, [pc, #12]	; (800b4f4 <vTaskSuspendAll+0x18>)
 800b4e8:	6013      	str	r3, [r2, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	20001054 	.word	0x20001054

0800b4f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b506:	4b41      	ldr	r3, [pc, #260]	; (800b60c <xTaskResumeAll+0x114>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <xTaskResumeAll+0x2c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	603b      	str	r3, [r7, #0]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b524:	f000 fd7a 	bl	800c01c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b528:	4b38      	ldr	r3, [pc, #224]	; (800b60c <xTaskResumeAll+0x114>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	4a37      	ldr	r2, [pc, #220]	; (800b60c <xTaskResumeAll+0x114>)
 800b530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b532:	4b36      	ldr	r3, [pc, #216]	; (800b60c <xTaskResumeAll+0x114>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d161      	bne.n	800b5fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b53a:	4b35      	ldr	r3, [pc, #212]	; (800b610 <xTaskResumeAll+0x118>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d05d      	beq.n	800b5fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b542:	e02e      	b.n	800b5a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <xTaskResumeAll+0x11c>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3318      	adds	r3, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff fab1 	bl	800aab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3304      	adds	r3, #4
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff faac 	bl	800aab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	2201      	movs	r2, #1
 800b566:	409a      	lsls	r2, r3
 800b568:	4b2b      	ldr	r3, [pc, #172]	; (800b618 <xTaskResumeAll+0x120>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	4a2a      	ldr	r2, [pc, #168]	; (800b618 <xTaskResumeAll+0x120>)
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4a27      	ldr	r2, [pc, #156]	; (800b61c <xTaskResumeAll+0x124>)
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3304      	adds	r3, #4
 800b586:	4619      	mov	r1, r3
 800b588:	4610      	mov	r0, r2
 800b58a:	f7ff fa3a 	bl	800aa02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <xTaskResumeAll+0x128>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d302      	bcc.n	800b5a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b59c:	4b21      	ldr	r3, [pc, #132]	; (800b624 <xTaskResumeAll+0x12c>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <xTaskResumeAll+0x11c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1cc      	bne.n	800b544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5b0:	f000 fb16 	bl	800bbe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <xTaskResumeAll+0x130>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d010      	beq.n	800b5e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5c0:	f000 f836 	bl	800b630 <xTaskIncrementTick>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <xTaskResumeAll+0x12c>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1f1      	bne.n	800b5c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b5dc:	4b12      	ldr	r3, [pc, #72]	; (800b628 <xTaskResumeAll+0x130>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5e2:	4b10      	ldr	r3, [pc, #64]	; (800b624 <xTaskResumeAll+0x12c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <xTaskResumeAll+0x134>)
 800b5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5fe:	f000 fd3d 	bl	800c07c <vPortExitCritical>

	return xAlreadyYielded;
 800b602:	68bb      	ldr	r3, [r7, #8]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20001054 	.word	0x20001054
 800b610:	2000102c 	.word	0x2000102c
 800b614:	20000fec 	.word	0x20000fec
 800b618:	20001034 	.word	0x20001034
 800b61c:	20000f30 	.word	0x20000f30
 800b620:	20000f2c 	.word	0x20000f2c
 800b624:	20001040 	.word	0x20001040
 800b628:	2000103c 	.word	0x2000103c
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b63a:	4b51      	ldr	r3, [pc, #324]	; (800b780 <xTaskIncrementTick+0x150>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f040 808d 	bne.w	800b75e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b644:	4b4f      	ldr	r3, [pc, #316]	; (800b784 <xTaskIncrementTick+0x154>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3301      	adds	r3, #1
 800b64a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b64c:	4a4d      	ldr	r2, [pc, #308]	; (800b784 <xTaskIncrementTick+0x154>)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d120      	bne.n	800b69a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b658:	4b4b      	ldr	r3, [pc, #300]	; (800b788 <xTaskIncrementTick+0x158>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00a      	beq.n	800b678 <xTaskIncrementTick+0x48>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	603b      	str	r3, [r7, #0]
}
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <xTaskIncrementTick+0x46>
 800b678:	4b43      	ldr	r3, [pc, #268]	; (800b788 <xTaskIncrementTick+0x158>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	4b43      	ldr	r3, [pc, #268]	; (800b78c <xTaskIncrementTick+0x15c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a41      	ldr	r2, [pc, #260]	; (800b788 <xTaskIncrementTick+0x158>)
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	4a41      	ldr	r2, [pc, #260]	; (800b78c <xTaskIncrementTick+0x15c>)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	4b40      	ldr	r3, [pc, #256]	; (800b790 <xTaskIncrementTick+0x160>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	4a3f      	ldr	r2, [pc, #252]	; (800b790 <xTaskIncrementTick+0x160>)
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	f000 faa3 	bl	800bbe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b69a:	4b3e      	ldr	r3, [pc, #248]	; (800b794 <xTaskIncrementTick+0x164>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d34d      	bcc.n	800b740 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6a4:	4b38      	ldr	r3, [pc, #224]	; (800b788 <xTaskIncrementTick+0x158>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <xTaskIncrementTick+0x82>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <xTaskIncrementTick+0x84>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b8:	4b36      	ldr	r3, [pc, #216]	; (800b794 <xTaskIncrementTick+0x164>)
 800b6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b6be:	601a      	str	r2, [r3, #0]
					break;
 800b6c0:	e03e      	b.n	800b740 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b6c2:	4b31      	ldr	r3, [pc, #196]	; (800b788 <xTaskIncrementTick+0x158>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d203      	bcs.n	800b6e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6da:	4a2e      	ldr	r2, [pc, #184]	; (800b794 <xTaskIncrementTick+0x164>)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6013      	str	r3, [r2, #0]
						break;
 800b6e0:	e02e      	b.n	800b740 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff f9e6 	bl	800aab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3318      	adds	r3, #24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff f9dd 	bl	800aab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b702:	2201      	movs	r2, #1
 800b704:	409a      	lsls	r2, r3
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <xTaskIncrementTick+0x168>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	4a22      	ldr	r2, [pc, #136]	; (800b798 <xTaskIncrementTick+0x168>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4a1f      	ldr	r2, [pc, #124]	; (800b79c <xTaskIncrementTick+0x16c>)
 800b71e:	441a      	add	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7ff f96b 	bl	800aa02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b730:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <xTaskIncrementTick+0x170>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	429a      	cmp	r2, r3
 800b738:	d3b4      	bcc.n	800b6a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b73a:	2301      	movs	r3, #1
 800b73c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b73e:	e7b1      	b.n	800b6a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b740:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <xTaskIncrementTick+0x170>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b746:	4915      	ldr	r1, [pc, #84]	; (800b79c <xTaskIncrementTick+0x16c>)
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	440b      	add	r3, r1
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d907      	bls.n	800b768 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b758:	2301      	movs	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e004      	b.n	800b768 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b75e:	4b11      	ldr	r3, [pc, #68]	; (800b7a4 <xTaskIncrementTick+0x174>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a0f      	ldr	r2, [pc, #60]	; (800b7a4 <xTaskIncrementTick+0x174>)
 800b766:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b768:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <xTaskIncrementTick+0x178>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b770:	2301      	movs	r3, #1
 800b772:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b774:	697b      	ldr	r3, [r7, #20]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20001054 	.word	0x20001054
 800b784:	20001030 	.word	0x20001030
 800b788:	20000fe4 	.word	0x20000fe4
 800b78c:	20000fe8 	.word	0x20000fe8
 800b790:	20001044 	.word	0x20001044
 800b794:	2000104c 	.word	0x2000104c
 800b798:	20001034 	.word	0x20001034
 800b79c:	20000f30 	.word	0x20000f30
 800b7a0:	20000f2c 	.word	0x20000f2c
 800b7a4:	2000103c 	.word	0x2000103c
 800b7a8:	20001040 	.word	0x20001040

0800b7ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7b2:	4b26      	ldr	r3, [pc, #152]	; (800b84c <vTaskSwitchContext+0xa0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7ba:	4b25      	ldr	r3, [pc, #148]	; (800b850 <vTaskSwitchContext+0xa4>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7c0:	e03f      	b.n	800b842 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b7c2:	4b23      	ldr	r3, [pc, #140]	; (800b850 <vTaskSwitchContext+0xa4>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b7c8:	4b22      	ldr	r3, [pc, #136]	; (800b854 <vTaskSwitchContext+0xa8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	fab3 f383 	clz	r3, r3
 800b7d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
 800b7d8:	f1c3 031f 	rsb	r3, r3, #31
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	491e      	ldr	r1, [pc, #120]	; (800b858 <vTaskSwitchContext+0xac>)
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	440b      	add	r3, r1
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	607b      	str	r3, [r7, #4]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <vTaskSwitchContext+0x5a>
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4a11      	ldr	r2, [pc, #68]	; (800b858 <vTaskSwitchContext+0xac>)
 800b814:	4413      	add	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	3308      	adds	r3, #8
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d104      	bne.n	800b838 <vTaskSwitchContext+0x8c>
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	605a      	str	r2, [r3, #4]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	4a07      	ldr	r2, [pc, #28]	; (800b85c <vTaskSwitchContext+0xb0>)
 800b840:	6013      	str	r3, [r2, #0]
}
 800b842:	bf00      	nop
 800b844:	371c      	adds	r7, #28
 800b846:	46bd      	mov	sp, r7
 800b848:	bc80      	pop	{r7}
 800b84a:	4770      	bx	lr
 800b84c:	20001054 	.word	0x20001054
 800b850:	20001040 	.word	0x20001040
 800b854:	20001034 	.word	0x20001034
 800b858:	20000f30 	.word	0x20000f30
 800b85c:	20000f2c 	.word	0x20000f2c

0800b860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b886:	4b07      	ldr	r3, [pc, #28]	; (800b8a4 <vTaskPlaceOnEventList+0x44>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3318      	adds	r3, #24
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff f8da 	bl	800aa48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b894:	2101      	movs	r1, #1
 800b896:	6838      	ldr	r0, [r7, #0]
 800b898:	f000 fa6a 	bl	800bd70 <prvAddCurrentTaskToDelayedList>
}
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000f2c 	.word	0x20000f2c

0800b8a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60fb      	str	r3, [r7, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	3318      	adds	r3, #24
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff f8ed 	bl	800aab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8de:	4b1d      	ldr	r3, [pc, #116]	; (800b954 <xTaskRemoveFromEventList+0xac>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d11c      	bne.n	800b920 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff f8e4 	bl	800aab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	409a      	lsls	r2, r3
 800b8f8:	4b17      	ldr	r3, [pc, #92]	; (800b958 <xTaskRemoveFromEventList+0xb0>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	4a16      	ldr	r2, [pc, #88]	; (800b958 <xTaskRemoveFromEventList+0xb0>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4a13      	ldr	r2, [pc, #76]	; (800b95c <xTaskRemoveFromEventList+0xb4>)
 800b910:	441a      	add	r2, r3
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7ff f872 	bl	800aa02 <vListInsertEnd>
 800b91e:	e005      	b.n	800b92c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	3318      	adds	r3, #24
 800b924:	4619      	mov	r1, r3
 800b926:	480e      	ldr	r0, [pc, #56]	; (800b960 <xTaskRemoveFromEventList+0xb8>)
 800b928:	f7ff f86b 	bl	800aa02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <xTaskRemoveFromEventList+0xbc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	429a      	cmp	r2, r3
 800b938:	d905      	bls.n	800b946 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b93a:	2301      	movs	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b93e:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <xTaskRemoveFromEventList+0xc0>)
 800b940:	2201      	movs	r2, #1
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e001      	b.n	800b94a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b94a:	697b      	ldr	r3, [r7, #20]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20001054 	.word	0x20001054
 800b958:	20001034 	.word	0x20001034
 800b95c:	20000f30 	.word	0x20000f30
 800b960:	20000fec 	.word	0x20000fec
 800b964:	20000f2c 	.word	0x20000f2c
 800b968:	20001040 	.word	0x20001040

0800b96c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b974:	4b06      	ldr	r3, [pc, #24]	; (800b990 <vTaskInternalSetTimeOutState+0x24>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b97c:	4b05      	ldr	r3, [pc, #20]	; (800b994 <vTaskInternalSetTimeOutState+0x28>)
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	605a      	str	r2, [r3, #4]
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	bc80      	pop	{r7}
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	20001044 	.word	0x20001044
 800b994:	20001030 	.word	0x20001030

0800b998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	613b      	str	r3, [r7, #16]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	60fb      	str	r3, [r7, #12]
}
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b9da:	f000 fb1f 	bl	800c01c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9de:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <xTaskCheckForTimeOut+0xbc>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d102      	bne.n	800b9fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61fb      	str	r3, [r7, #28]
 800b9fc:	e023      	b.n	800ba46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <xTaskCheckForTimeOut+0xc0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d007      	beq.n	800ba1a <xTaskCheckForTimeOut+0x82>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d302      	bcc.n	800ba1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	e015      	b.n	800ba46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d20b      	bcs.n	800ba3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	1ad2      	subs	r2, r2, r3
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff ff9b 	bl	800b96c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba36:	2300      	movs	r3, #0
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	e004      	b.n	800ba46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba42:	2301      	movs	r3, #1
 800ba44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba46:	f000 fb19 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800ba4a:	69fb      	ldr	r3, [r7, #28]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3720      	adds	r7, #32
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20001030 	.word	0x20001030
 800ba58:	20001044 	.word	0x20001044

0800ba5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba60:	4b03      	ldr	r3, [pc, #12]	; (800ba70 <vTaskMissedYield+0x14>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	601a      	str	r2, [r3, #0]
}
 800ba66:	bf00      	nop
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bc80      	pop	{r7}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	20001040 	.word	0x20001040

0800ba74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba7c:	f000 f852 	bl	800bb24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <prvIdleTask+0x28>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d9f9      	bls.n	800ba7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba88:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <prvIdleTask+0x2c>)
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba98:	e7f0      	b.n	800ba7c <prvIdleTask+0x8>
 800ba9a:	bf00      	nop
 800ba9c:	20000f30 	.word	0x20000f30
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baaa:	2300      	movs	r3, #0
 800baac:	607b      	str	r3, [r7, #4]
 800baae:	e00c      	b.n	800baca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4a12      	ldr	r2, [pc, #72]	; (800bb04 <prvInitialiseTaskLists+0x60>)
 800babc:	4413      	add	r3, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe ff74 	bl	800a9ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3301      	adds	r3, #1
 800bac8:	607b      	str	r3, [r7, #4]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b06      	cmp	r3, #6
 800bace:	d9ef      	bls.n	800bab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bad0:	480d      	ldr	r0, [pc, #52]	; (800bb08 <prvInitialiseTaskLists+0x64>)
 800bad2:	f7fe ff6b 	bl	800a9ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bad6:	480d      	ldr	r0, [pc, #52]	; (800bb0c <prvInitialiseTaskLists+0x68>)
 800bad8:	f7fe ff68 	bl	800a9ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800badc:	480c      	ldr	r0, [pc, #48]	; (800bb10 <prvInitialiseTaskLists+0x6c>)
 800bade:	f7fe ff65 	bl	800a9ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bae2:	480c      	ldr	r0, [pc, #48]	; (800bb14 <prvInitialiseTaskLists+0x70>)
 800bae4:	f7fe ff62 	bl	800a9ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bae8:	480b      	ldr	r0, [pc, #44]	; (800bb18 <prvInitialiseTaskLists+0x74>)
 800baea:	f7fe ff5f 	bl	800a9ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800baee:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <prvInitialiseTaskLists+0x78>)
 800baf0:	4a05      	ldr	r2, [pc, #20]	; (800bb08 <prvInitialiseTaskLists+0x64>)
 800baf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800baf4:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <prvInitialiseTaskLists+0x7c>)
 800baf6:	4a05      	ldr	r2, [pc, #20]	; (800bb0c <prvInitialiseTaskLists+0x68>)
 800baf8:	601a      	str	r2, [r3, #0]
}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20000f30 	.word	0x20000f30
 800bb08:	20000fbc 	.word	0x20000fbc
 800bb0c:	20000fd0 	.word	0x20000fd0
 800bb10:	20000fec 	.word	0x20000fec
 800bb14:	20001000 	.word	0x20001000
 800bb18:	20001018 	.word	0x20001018
 800bb1c:	20000fe4 	.word	0x20000fe4
 800bb20:	20000fe8 	.word	0x20000fe8

0800bb24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb2a:	e019      	b.n	800bb60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb2c:	f000 fa76 	bl	800c01c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bb30:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <prvCheckTasksWaitingTermination+0x50>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe ffbb 	bl	800aab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb42:	4b0d      	ldr	r3, [pc, #52]	; (800bb78 <prvCheckTasksWaitingTermination+0x54>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3b01      	subs	r3, #1
 800bb48:	4a0b      	ldr	r2, [pc, #44]	; (800bb78 <prvCheckTasksWaitingTermination+0x54>)
 800bb4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb4c:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <prvCheckTasksWaitingTermination+0x58>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <prvCheckTasksWaitingTermination+0x58>)
 800bb54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb56:	f000 fa91 	bl	800c07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f810 	bl	800bb80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <prvCheckTasksWaitingTermination+0x58>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e1      	bne.n	800bb2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20001000 	.word	0x20001000
 800bb78:	2000102c 	.word	0x2000102c
 800bb7c:	20001014 	.word	0x20001014

0800bb80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d108      	bne.n	800bba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 fbc6 	bl	800c328 <vPortFree>
				vPortFree( pxTCB );
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fbc3 	bl	800c328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bba2:	e018      	b.n	800bbd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d103      	bne.n	800bbb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fbba 	bl	800c328 <vPortFree>
	}
 800bbb4:	e00f      	b.n	800bbd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d00a      	beq.n	800bbd6 <prvDeleteTCB+0x56>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	60fb      	str	r3, [r7, #12]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <prvDeleteTCB+0x54>
	}
 800bbd6:	bf00      	nop
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <prvResetNextTaskUnblockTime+0x40>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <prvResetNextTaskUnblockTime+0x14>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e000      	b.n	800bbf6 <prvResetNextTaskUnblockTime+0x16>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d004      	beq.n	800bc04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bbfa:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <prvResetNextTaskUnblockTime+0x44>)
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bc00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc02:	e008      	b.n	800bc16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc04:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <prvResetNextTaskUnblockTime+0x40>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	4a04      	ldr	r2, [pc, #16]	; (800bc24 <prvResetNextTaskUnblockTime+0x44>)
 800bc14:	6013      	str	r3, [r2, #0]
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bc80      	pop	{r7}
 800bc1e:	4770      	bx	lr
 800bc20:	20000fe4 	.word	0x20000fe4
 800bc24:	2000104c 	.word	0x2000104c

0800bc28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc2e:	4b0b      	ldr	r3, [pc, #44]	; (800bc5c <xTaskGetSchedulerState+0x34>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc36:	2301      	movs	r3, #1
 800bc38:	607b      	str	r3, [r7, #4]
 800bc3a:	e008      	b.n	800bc4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc3c:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <xTaskGetSchedulerState+0x38>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc44:	2302      	movs	r3, #2
 800bc46:	607b      	str	r3, [r7, #4]
 800bc48:	e001      	b.n	800bc4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc4e:	687b      	ldr	r3, [r7, #4]
	}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bc80      	pop	{r7}
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	20001038 	.word	0x20001038
 800bc60:	20001054 	.word	0x20001054

0800bc64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc70:	2300      	movs	r3, #0
 800bc72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d06e      	beq.n	800bd58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc7a:	4b3a      	ldr	r3, [pc, #232]	; (800bd64 <xTaskPriorityDisinherit+0x100>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d00a      	beq.n	800bc9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	60fb      	str	r3, [r7, #12]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	60bb      	str	r3, [r7, #8]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcbc:	1e5a      	subs	r2, r3, #1
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d044      	beq.n	800bd58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d140      	bne.n	800bd58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe feec 	bl	800aab8 <uxListRemove>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d115      	bne.n	800bd12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcea:	491f      	ldr	r1, [pc, #124]	; (800bd68 <xTaskPriorityDisinherit+0x104>)
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	440b      	add	r3, r1
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <xTaskPriorityDisinherit+0xae>
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	2201      	movs	r2, #1
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	43da      	mvns	r2, r3
 800bd08:	4b18      	ldr	r3, [pc, #96]	; (800bd6c <xTaskPriorityDisinherit+0x108>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	4a17      	ldr	r2, [pc, #92]	; (800bd6c <xTaskPriorityDisinherit+0x108>)
 800bd10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	f1c3 0207 	rsb	r2, r3, #7
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	409a      	lsls	r2, r3
 800bd2e:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <xTaskPriorityDisinherit+0x108>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	4a0d      	ldr	r2, [pc, #52]	; (800bd6c <xTaskPriorityDisinherit+0x108>)
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4a08      	ldr	r2, [pc, #32]	; (800bd68 <xTaskPriorityDisinherit+0x104>)
 800bd46:	441a      	add	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fe fe57 	bl	800aa02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd58:	697b      	ldr	r3, [r7, #20]
	}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000f2c 	.word	0x20000f2c
 800bd68:	20000f30 	.word	0x20000f30
 800bd6c:	20001034 	.word	0x20001034

0800bd70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd7a:	4b29      	ldr	r3, [pc, #164]	; (800be20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fe96 	bl	800aab8 <uxListRemove>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10b      	bne.n	800bdaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bd92:	4b24      	ldr	r3, [pc, #144]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	2201      	movs	r2, #1
 800bd9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9e:	43da      	mvns	r2, r3
 800bda0:	4b21      	ldr	r3, [pc, #132]	; (800be28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4013      	ands	r3, r2
 800bda6:	4a20      	ldr	r2, [pc, #128]	; (800be28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bda8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb0:	d10a      	bne.n	800bdc8 <prvAddCurrentTaskToDelayedList+0x58>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d007      	beq.n	800bdc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdb8:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	481a      	ldr	r0, [pc, #104]	; (800be2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bdc2:	f7fe fe1e 	bl	800aa02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdc6:	e026      	b.n	800be16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdd0:	4b14      	ldr	r3, [pc, #80]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d209      	bcs.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde0:	4b13      	ldr	r3, [pc, #76]	; (800be30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	4b0f      	ldr	r3, [pc, #60]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f7fe fe2b 	bl	800aa48 <vListInsert>
}
 800bdf2:	e010      	b.n	800be16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f7fe fe21 	bl	800aa48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be06:	4b0c      	ldr	r3, [pc, #48]	; (800be38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d202      	bcs.n	800be16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be10:	4a09      	ldr	r2, [pc, #36]	; (800be38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	6013      	str	r3, [r2, #0]
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20001030 	.word	0x20001030
 800be24:	20000f2c 	.word	0x20000f2c
 800be28:	20001034 	.word	0x20001034
 800be2c:	20001018 	.word	0x20001018
 800be30:	20000fe8 	.word	0x20000fe8
 800be34:	20000fe4 	.word	0x20000fe4
 800be38:	2000104c 	.word	0x2000104c

0800be3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3b04      	subs	r3, #4
 800be4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3b04      	subs	r3, #4
 800be5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f023 0201 	bic.w	r2, r3, #1
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3b04      	subs	r3, #4
 800be6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be6c:	4a08      	ldr	r2, [pc, #32]	; (800be90 <pxPortInitialiseStack+0x54>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3b14      	subs	r3, #20
 800be76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3b20      	subs	r3, #32
 800be82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be84:	68fb      	ldr	r3, [r7, #12]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr
 800be90:	0800be95 	.word	0x0800be95

0800be94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be9e:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <prvTaskExitError+0x54>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea6:	d00a      	beq.n	800bebe <prvTaskExitError+0x2a>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	60fb      	str	r3, [r7, #12]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <prvTaskExitError+0x28>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	60bb      	str	r3, [r7, #8]
}
 800bed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bed2:	bf00      	nop
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0fc      	beq.n	800bed4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beda:	bf00      	nop
 800bedc:	bf00      	nop
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bc80      	pop	{r7}
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20000950 	.word	0x20000950
 800beec:	00000000 	.word	0x00000000

0800bef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bef0:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <pxCurrentTCBConst2>)
 800bef2:	6819      	ldr	r1, [r3, #0]
 800bef4:	6808      	ldr	r0, [r1, #0]
 800bef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800befa:	f380 8809 	msr	PSP, r0
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f04f 0000 	mov.w	r0, #0
 800bf06:	f380 8811 	msr	BASEPRI, r0
 800bf0a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bf0e:	4770      	bx	lr

0800bf10 <pxCurrentTCBConst2>:
 800bf10:	20000f2c 	.word	0x20000f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop

0800bf18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bf18:	4806      	ldr	r0, [pc, #24]	; (800bf34 <prvPortStartFirstTask+0x1c>)
 800bf1a:	6800      	ldr	r0, [r0, #0]
 800bf1c:	6800      	ldr	r0, [r0, #0]
 800bf1e:	f380 8808 	msr	MSP, r0
 800bf22:	b662      	cpsie	i
 800bf24:	b661      	cpsie	f
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	df00      	svc	0
 800bf30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf32:	bf00      	nop
 800bf34:	e000ed08 	.word	0xe000ed08

0800bf38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf3e:	4b32      	ldr	r3, [pc, #200]	; (800c008 <xPortStartScheduler+0xd0>)
 800bf40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	22ff      	movs	r2, #255	; 0xff
 800bf4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	4b2a      	ldr	r3, [pc, #168]	; (800c00c <xPortStartScheduler+0xd4>)
 800bf64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf66:	4b2a      	ldr	r3, [pc, #168]	; (800c010 <xPortStartScheduler+0xd8>)
 800bf68:	2207      	movs	r2, #7
 800bf6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf6c:	e009      	b.n	800bf82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bf6e:	4b28      	ldr	r3, [pc, #160]	; (800c010 <xPortStartScheduler+0xd8>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	4a26      	ldr	r2, [pc, #152]	; (800c010 <xPortStartScheduler+0xd8>)
 800bf76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf8a:	2b80      	cmp	r3, #128	; 0x80
 800bf8c:	d0ef      	beq.n	800bf6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf8e:	4b20      	ldr	r3, [pc, #128]	; (800c010 <xPortStartScheduler+0xd8>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f1c3 0307 	rsb	r3, r3, #7
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d00a      	beq.n	800bfb0 <xPortStartScheduler+0x78>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	60bb      	str	r3, [r7, #8]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfb0:	4b17      	ldr	r3, [pc, #92]	; (800c010 <xPortStartScheduler+0xd8>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	4a16      	ldr	r2, [pc, #88]	; (800c010 <xPortStartScheduler+0xd8>)
 800bfb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfba:	4b15      	ldr	r3, [pc, #84]	; (800c010 <xPortStartScheduler+0xd8>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfc2:	4a13      	ldr	r2, [pc, #76]	; (800c010 <xPortStartScheduler+0xd8>)
 800bfc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfce:	4b11      	ldr	r3, [pc, #68]	; (800c014 <xPortStartScheduler+0xdc>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a10      	ldr	r2, [pc, #64]	; (800c014 <xPortStartScheduler+0xdc>)
 800bfd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <xPortStartScheduler+0xdc>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a0d      	ldr	r2, [pc, #52]	; (800c014 <xPortStartScheduler+0xdc>)
 800bfe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfe6:	f000 f8b9 	bl	800c15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfea:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <xPortStartScheduler+0xe0>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bff0:	f7ff ff92 	bl	800bf18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bff4:	f7ff fbda 	bl	800b7ac <vTaskSwitchContext>
	prvTaskExitError();
 800bff8:	f7ff ff4c 	bl	800be94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	e000e400 	.word	0xe000e400
 800c00c:	20001058 	.word	0x20001058
 800c010:	2000105c 	.word	0x2000105c
 800c014:	e000ed20 	.word	0xe000ed20
 800c018:	20000950 	.word	0x20000950

0800c01c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	607b      	str	r3, [r7, #4]
}
 800c034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <vPortEnterCritical+0x58>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3301      	adds	r3, #1
 800c03c:	4a0d      	ldr	r2, [pc, #52]	; (800c074 <vPortEnterCritical+0x58>)
 800c03e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c040:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <vPortEnterCritical+0x58>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d10f      	bne.n	800c068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c048:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <vPortEnterCritical+0x5c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <vPortEnterCritical+0x4c>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	603b      	str	r3, [r7, #0]
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <vPortEnterCritical+0x4a>
	}
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000950 	.word	0x20000950
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c082:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <vPortExitCritical+0x4c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10a      	bne.n	800c0a0 <vPortExitCritical+0x24>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	607b      	str	r3, [r7, #4]
}
 800c09c:	bf00      	nop
 800c09e:	e7fe      	b.n	800c09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <vPortExitCritical+0x4c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	4a08      	ldr	r2, [pc, #32]	; (800c0c8 <vPortExitCritical+0x4c>)
 800c0a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0aa:	4b07      	ldr	r3, [pc, #28]	; (800c0c8 <vPortExitCritical+0x4c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d105      	bne.n	800c0be <vPortExitCritical+0x42>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0be:	bf00      	nop
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bc80      	pop	{r7}
 800c0c6:	4770      	bx	lr
 800c0c8:	20000950 	.word	0x20000950
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0d0:	f3ef 8009 	mrs	r0, PSP
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <pxCurrentTCBConst>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c0e0:	6010      	str	r0, [r2, #0]
 800c0e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c0e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0ea:	f380 8811 	msr	BASEPRI, r0
 800c0ee:	f7ff fb5d 	bl	800b7ac <vTaskSwitchContext>
 800c0f2:	f04f 0000 	mov.w	r0, #0
 800c0f6:	f380 8811 	msr	BASEPRI, r0
 800c0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c106:	f380 8809 	msr	PSP, r0
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	4770      	bx	lr

0800c110 <pxCurrentTCBConst>:
 800c110:	20000f2c 	.word	0x20000f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
}
 800c130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c132:	f7ff fa7d 	bl	800b630 <xTaskIncrementTick>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c13c:	4b06      	ldr	r3, [pc, #24]	; (800c158 <xPortSysTickHandler+0x40>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f383 8811 	msr	BASEPRI, r3
}
 800c14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c160:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <vPortSetupTimerInterrupt+0x30>)
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c166:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <vPortSetupTimerInterrupt+0x34>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c16c:	4b09      	ldr	r3, [pc, #36]	; (800c194 <vPortSetupTimerInterrupt+0x38>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a09      	ldr	r2, [pc, #36]	; (800c198 <vPortSetupTimerInterrupt+0x3c>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	099b      	lsrs	r3, r3, #6
 800c178:	4a08      	ldr	r2, [pc, #32]	; (800c19c <vPortSetupTimerInterrupt+0x40>)
 800c17a:	3b01      	subs	r3, #1
 800c17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c17e:	4b03      	ldr	r3, [pc, #12]	; (800c18c <vPortSetupTimerInterrupt+0x30>)
 800c180:	2207      	movs	r2, #7
 800c182:	601a      	str	r2, [r3, #0]
}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	bc80      	pop	{r7}
 800c18a:	4770      	bx	lr
 800c18c:	e000e010 	.word	0xe000e010
 800c190:	e000e018 	.word	0xe000e018
 800c194:	20000944 	.word	0x20000944
 800c198:	10624dd3 	.word	0x10624dd3
 800c19c:	e000e014 	.word	0xe000e014

0800c1a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08a      	sub	sp, #40	; 0x28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1ac:	f7ff f996 	bl	800b4dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1b0:	4b58      	ldr	r3, [pc, #352]	; (800c314 <pvPortMalloc+0x174>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1b8:	f000 f910 	bl	800c3dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1bc:	4b56      	ldr	r3, [pc, #344]	; (800c318 <pvPortMalloc+0x178>)
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f040 808e 	bne.w	800c2e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01d      	beq.n	800c20c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1d0:	2208      	movs	r2, #8
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d014      	beq.n	800c20c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f023 0307 	bic.w	r3, r3, #7
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f003 0307 	and.w	r3, r3, #7
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00a      	beq.n	800c20c <pvPortMalloc+0x6c>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	617b      	str	r3, [r7, #20]
}
 800c208:	bf00      	nop
 800c20a:	e7fe      	b.n	800c20a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d069      	beq.n	800c2e6 <pvPortMalloc+0x146>
 800c212:	4b42      	ldr	r3, [pc, #264]	; (800c31c <pvPortMalloc+0x17c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d864      	bhi.n	800c2e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c21c:	4b40      	ldr	r3, [pc, #256]	; (800c320 <pvPortMalloc+0x180>)
 800c21e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c220:	4b3f      	ldr	r3, [pc, #252]	; (800c320 <pvPortMalloc+0x180>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c226:	e004      	b.n	800c232 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d903      	bls.n	800c244 <pvPortMalloc+0xa4>
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f1      	bne.n	800c228 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c244:	4b33      	ldr	r3, [pc, #204]	; (800c314 <pvPortMalloc+0x174>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d04b      	beq.n	800c2e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2208      	movs	r2, #8
 800c254:	4413      	add	r3, r2
 800c256:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	1ad2      	subs	r2, r2, r3
 800c268:	2308      	movs	r3, #8
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d91f      	bls.n	800c2b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4413      	add	r3, r2
 800c276:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <pvPortMalloc+0xf8>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	613b      	str	r3, [r7, #16]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2aa:	69b8      	ldr	r0, [r7, #24]
 800c2ac:	f000 f8f8 	bl	800c4a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2b0:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <pvPortMalloc+0x17c>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	4a18      	ldr	r2, [pc, #96]	; (800c31c <pvPortMalloc+0x17c>)
 800c2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2be:	4b17      	ldr	r3, [pc, #92]	; (800c31c <pvPortMalloc+0x17c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b18      	ldr	r3, [pc, #96]	; (800c324 <pvPortMalloc+0x184>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d203      	bcs.n	800c2d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2ca:	4b14      	ldr	r3, [pc, #80]	; (800c31c <pvPortMalloc+0x17c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a15      	ldr	r2, [pc, #84]	; (800c324 <pvPortMalloc+0x184>)
 800c2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	4b10      	ldr	r3, [pc, #64]	; (800c318 <pvPortMalloc+0x178>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2e6:	f7ff f907 	bl	800b4f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00a      	beq.n	800c30a <pvPortMalloc+0x16a>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	60fb      	str	r3, [r7, #12]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <pvPortMalloc+0x168>
	return pvReturn;
 800c30a:	69fb      	ldr	r3, [r7, #28]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3728      	adds	r7, #40	; 0x28
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20001c68 	.word	0x20001c68
 800c318:	20001c74 	.word	0x20001c74
 800c31c:	20001c6c 	.word	0x20001c6c
 800c320:	20001c60 	.word	0x20001c60
 800c324:	20001c70 	.word	0x20001c70

0800c328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d048      	beq.n	800c3cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c33a:	2308      	movs	r3, #8
 800c33c:	425b      	negs	r3, r3
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	4413      	add	r3, r2
 800c342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	4b21      	ldr	r3, [pc, #132]	; (800c3d4 <vPortFree+0xac>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4013      	ands	r3, r2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <vPortFree+0x44>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	60fb      	str	r3, [r7, #12]
}
 800c368:	bf00      	nop
 800c36a:	e7fe      	b.n	800c36a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <vPortFree+0x62>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	60bb      	str	r3, [r7, #8]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	4b11      	ldr	r3, [pc, #68]	; (800c3d4 <vPortFree+0xac>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4013      	ands	r3, r2
 800c394:	2b00      	cmp	r3, #0
 800c396:	d019      	beq.n	800c3cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d115      	bne.n	800c3cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <vPortFree+0xac>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	401a      	ands	r2, r3
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3b0:	f7ff f894 	bl	800b4dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <vPortFree+0xb0>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4413      	add	r3, r2
 800c3be:	4a06      	ldr	r2, [pc, #24]	; (800c3d8 <vPortFree+0xb0>)
 800c3c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3c2:	6938      	ldr	r0, [r7, #16]
 800c3c4:	f000 f86c 	bl	800c4a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c3c8:	f7ff f896 	bl	800b4f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3cc:	bf00      	nop
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20001c74 	.word	0x20001c74
 800c3d8:	20001c6c 	.word	0x20001c6c

0800c3dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c3e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3e8:	4b27      	ldr	r3, [pc, #156]	; (800c488 <prvHeapInit+0xac>)
 800c3ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00c      	beq.n	800c410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3307      	adds	r3, #7
 800c3fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	4a1f      	ldr	r2, [pc, #124]	; (800c488 <prvHeapInit+0xac>)
 800c40c:	4413      	add	r3, r2
 800c40e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c414:	4a1d      	ldr	r2, [pc, #116]	; (800c48c <prvHeapInit+0xb0>)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c41a:	4b1c      	ldr	r3, [pc, #112]	; (800c48c <prvHeapInit+0xb0>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c428:	2208      	movs	r2, #8
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f023 0307 	bic.w	r3, r3, #7
 800c436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4a15      	ldr	r2, [pc, #84]	; (800c490 <prvHeapInit+0xb4>)
 800c43c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <prvHeapInit+0xb4>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2200      	movs	r2, #0
 800c444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <prvHeapInit+0xb4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c45c:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <prvHeapInit+0xb4>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a0a      	ldr	r2, [pc, #40]	; (800c494 <prvHeapInit+0xb8>)
 800c46a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	4a09      	ldr	r2, [pc, #36]	; (800c498 <prvHeapInit+0xbc>)
 800c472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c474:	4b09      	ldr	r3, [pc, #36]	; (800c49c <prvHeapInit+0xc0>)
 800c476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	bc80      	pop	{r7}
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	20001060 	.word	0x20001060
 800c48c:	20001c60 	.word	0x20001c60
 800c490:	20001c68 	.word	0x20001c68
 800c494:	20001c70 	.word	0x20001c70
 800c498:	20001c6c 	.word	0x20001c6c
 800c49c:	20001c74 	.word	0x20001c74

0800c4a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <prvInsertBlockIntoFreeList+0xa8>)
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e002      	b.n	800c4b4 <prvInsertBlockIntoFreeList+0x14>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d8f7      	bhi.n	800c4ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d108      	bne.n	800c4e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	441a      	add	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d118      	bne.n	800c528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b14      	ldr	r3, [pc, #80]	; (800c54c <prvInsertBlockIntoFreeList+0xac>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d00d      	beq.n	800c51e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	441a      	add	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	e008      	b.n	800c530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c51e:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <prvInsertBlockIntoFreeList+0xac>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	e003      	b.n	800c530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d002      	beq.n	800c53e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	bc80      	pop	{r7}
 800c546:	4770      	bx	lr
 800c548:	20001c60 	.word	0x20001c60
 800c54c:	20001c68 	.word	0x20001c68

0800c550 <__itoa>:
 800c550:	1e93      	subs	r3, r2, #2
 800c552:	2b22      	cmp	r3, #34	; 0x22
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	d904      	bls.n	800c564 <__itoa+0x14>
 800c55a:	2300      	movs	r3, #0
 800c55c:	461c      	mov	r4, r3
 800c55e:	700b      	strb	r3, [r1, #0]
 800c560:	4620      	mov	r0, r4
 800c562:	bd10      	pop	{r4, pc}
 800c564:	2a0a      	cmp	r2, #10
 800c566:	d109      	bne.n	800c57c <__itoa+0x2c>
 800c568:	2800      	cmp	r0, #0
 800c56a:	da07      	bge.n	800c57c <__itoa+0x2c>
 800c56c:	232d      	movs	r3, #45	; 0x2d
 800c56e:	700b      	strb	r3, [r1, #0]
 800c570:	2101      	movs	r1, #1
 800c572:	4240      	negs	r0, r0
 800c574:	4421      	add	r1, r4
 800c576:	f000 f8b9 	bl	800c6ec <__utoa>
 800c57a:	e7f1      	b.n	800c560 <__itoa+0x10>
 800c57c:	2100      	movs	r1, #0
 800c57e:	e7f9      	b.n	800c574 <__itoa+0x24>

0800c580 <itoa>:
 800c580:	f7ff bfe6 	b.w	800c550 <__itoa>

0800c584 <malloc>:
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <malloc+0xc>)
 800c586:	4601      	mov	r1, r0
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	f000 b823 	b.w	800c5d4 <_malloc_r>
 800c58e:	bf00      	nop
 800c590:	200009a0 	.word	0x200009a0

0800c594 <sbrk_aligned>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	4e0e      	ldr	r6, [pc, #56]	; (800c5d0 <sbrk_aligned+0x3c>)
 800c598:	460c      	mov	r4, r1
 800c59a:	6831      	ldr	r1, [r6, #0]
 800c59c:	4605      	mov	r5, r0
 800c59e:	b911      	cbnz	r1, 800c5a6 <sbrk_aligned+0x12>
 800c5a0:	f000 f8ee 	bl	800c780 <_sbrk_r>
 800c5a4:	6030      	str	r0, [r6, #0]
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 f8e9 	bl	800c780 <_sbrk_r>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d00a      	beq.n	800c5c8 <sbrk_aligned+0x34>
 800c5b2:	1cc4      	adds	r4, r0, #3
 800c5b4:	f024 0403 	bic.w	r4, r4, #3
 800c5b8:	42a0      	cmp	r0, r4
 800c5ba:	d007      	beq.n	800c5cc <sbrk_aligned+0x38>
 800c5bc:	1a21      	subs	r1, r4, r0
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f000 f8de 	bl	800c780 <_sbrk_r>
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	d101      	bne.n	800c5cc <sbrk_aligned+0x38>
 800c5c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	20001c7c 	.word	0x20001c7c

0800c5d4 <_malloc_r>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	1ccd      	adds	r5, r1, #3
 800c5da:	f025 0503 	bic.w	r5, r5, #3
 800c5de:	3508      	adds	r5, #8
 800c5e0:	2d0c      	cmp	r5, #12
 800c5e2:	bf38      	it	cc
 800c5e4:	250c      	movcc	r5, #12
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	db01      	blt.n	800c5f0 <_malloc_r+0x1c>
 800c5ec:	42a9      	cmp	r1, r5
 800c5ee:	d905      	bls.n	800c5fc <_malloc_r+0x28>
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	2600      	movs	r6, #0
 800c5f4:	603b      	str	r3, [r7, #0]
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6d0 <_malloc_r+0xfc>
 800c600:	f000 f868 	bl	800c6d4 <__malloc_lock>
 800c604:	f8d8 3000 	ldr.w	r3, [r8]
 800c608:	461c      	mov	r4, r3
 800c60a:	bb5c      	cbnz	r4, 800c664 <_malloc_r+0x90>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4638      	mov	r0, r7
 800c610:	f7ff ffc0 	bl	800c594 <sbrk_aligned>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	4604      	mov	r4, r0
 800c618:	d155      	bne.n	800c6c6 <_malloc_r+0xf2>
 800c61a:	f8d8 4000 	ldr.w	r4, [r8]
 800c61e:	4626      	mov	r6, r4
 800c620:	2e00      	cmp	r6, #0
 800c622:	d145      	bne.n	800c6b0 <_malloc_r+0xdc>
 800c624:	2c00      	cmp	r4, #0
 800c626:	d048      	beq.n	800c6ba <_malloc_r+0xe6>
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	4631      	mov	r1, r6
 800c62c:	4638      	mov	r0, r7
 800c62e:	eb04 0903 	add.w	r9, r4, r3
 800c632:	f000 f8a5 	bl	800c780 <_sbrk_r>
 800c636:	4581      	cmp	r9, r0
 800c638:	d13f      	bne.n	800c6ba <_malloc_r+0xe6>
 800c63a:	6821      	ldr	r1, [r4, #0]
 800c63c:	4638      	mov	r0, r7
 800c63e:	1a6d      	subs	r5, r5, r1
 800c640:	4629      	mov	r1, r5
 800c642:	f7ff ffa7 	bl	800c594 <sbrk_aligned>
 800c646:	3001      	adds	r0, #1
 800c648:	d037      	beq.n	800c6ba <_malloc_r+0xe6>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	442b      	add	r3, r5
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	f8d8 3000 	ldr.w	r3, [r8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d038      	beq.n	800c6ca <_malloc_r+0xf6>
 800c658:	685a      	ldr	r2, [r3, #4]
 800c65a:	42a2      	cmp	r2, r4
 800c65c:	d12b      	bne.n	800c6b6 <_malloc_r+0xe2>
 800c65e:	2200      	movs	r2, #0
 800c660:	605a      	str	r2, [r3, #4]
 800c662:	e00f      	b.n	800c684 <_malloc_r+0xb0>
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	1b52      	subs	r2, r2, r5
 800c668:	d41f      	bmi.n	800c6aa <_malloc_r+0xd6>
 800c66a:	2a0b      	cmp	r2, #11
 800c66c:	d917      	bls.n	800c69e <_malloc_r+0xca>
 800c66e:	1961      	adds	r1, r4, r5
 800c670:	42a3      	cmp	r3, r4
 800c672:	6025      	str	r5, [r4, #0]
 800c674:	bf18      	it	ne
 800c676:	6059      	strne	r1, [r3, #4]
 800c678:	6863      	ldr	r3, [r4, #4]
 800c67a:	bf08      	it	eq
 800c67c:	f8c8 1000 	streq.w	r1, [r8]
 800c680:	5162      	str	r2, [r4, r5]
 800c682:	604b      	str	r3, [r1, #4]
 800c684:	4638      	mov	r0, r7
 800c686:	f104 060b 	add.w	r6, r4, #11
 800c68a:	f000 f829 	bl	800c6e0 <__malloc_unlock>
 800c68e:	f026 0607 	bic.w	r6, r6, #7
 800c692:	1d23      	adds	r3, r4, #4
 800c694:	1af2      	subs	r2, r6, r3
 800c696:	d0ae      	beq.n	800c5f6 <_malloc_r+0x22>
 800c698:	1b9b      	subs	r3, r3, r6
 800c69a:	50a3      	str	r3, [r4, r2]
 800c69c:	e7ab      	b.n	800c5f6 <_malloc_r+0x22>
 800c69e:	42a3      	cmp	r3, r4
 800c6a0:	6862      	ldr	r2, [r4, #4]
 800c6a2:	d1dd      	bne.n	800c660 <_malloc_r+0x8c>
 800c6a4:	f8c8 2000 	str.w	r2, [r8]
 800c6a8:	e7ec      	b.n	800c684 <_malloc_r+0xb0>
 800c6aa:	4623      	mov	r3, r4
 800c6ac:	6864      	ldr	r4, [r4, #4]
 800c6ae:	e7ac      	b.n	800c60a <_malloc_r+0x36>
 800c6b0:	4634      	mov	r4, r6
 800c6b2:	6876      	ldr	r6, [r6, #4]
 800c6b4:	e7b4      	b.n	800c620 <_malloc_r+0x4c>
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	e7cc      	b.n	800c654 <_malloc_r+0x80>
 800c6ba:	230c      	movs	r3, #12
 800c6bc:	4638      	mov	r0, r7
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	f000 f80e 	bl	800c6e0 <__malloc_unlock>
 800c6c4:	e797      	b.n	800c5f6 <_malloc_r+0x22>
 800c6c6:	6025      	str	r5, [r4, #0]
 800c6c8:	e7dc      	b.n	800c684 <_malloc_r+0xb0>
 800c6ca:	605b      	str	r3, [r3, #4]
 800c6cc:	deff      	udf	#255	; 0xff
 800c6ce:	bf00      	nop
 800c6d0:	20001c78 	.word	0x20001c78

0800c6d4 <__malloc_lock>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	; (800c6dc <__malloc_lock+0x8>)
 800c6d6:	f000 b88d 	b.w	800c7f4 <__retarget_lock_acquire_recursive>
 800c6da:	bf00      	nop
 800c6dc:	20001dbc 	.word	0x20001dbc

0800c6e0 <__malloc_unlock>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	; (800c6e8 <__malloc_unlock+0x8>)
 800c6e2:	f000 b888 	b.w	800c7f6 <__retarget_lock_release_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	20001dbc 	.word	0x20001dbc

0800c6ec <__utoa>:
 800c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ee:	b08b      	sub	sp, #44	; 0x2c
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	466e      	mov	r6, sp
 800c6f6:	4c1d      	ldr	r4, [pc, #116]	; (800c76c <__utoa+0x80>)
 800c6f8:	f104 0c20 	add.w	ip, r4, #32
 800c6fc:	4637      	mov	r7, r6
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	6861      	ldr	r1, [r4, #4]
 800c702:	3408      	adds	r4, #8
 800c704:	c703      	stmia	r7!, {r0, r1}
 800c706:	4564      	cmp	r4, ip
 800c708:	463e      	mov	r6, r7
 800c70a:	d1f7      	bne.n	800c6fc <__utoa+0x10>
 800c70c:	7921      	ldrb	r1, [r4, #4]
 800c70e:	6820      	ldr	r0, [r4, #0]
 800c710:	7139      	strb	r1, [r7, #4]
 800c712:	1e91      	subs	r1, r2, #2
 800c714:	2922      	cmp	r1, #34	; 0x22
 800c716:	6038      	str	r0, [r7, #0]
 800c718:	f04f 0100 	mov.w	r1, #0
 800c71c:	d904      	bls.n	800c728 <__utoa+0x3c>
 800c71e:	7019      	strb	r1, [r3, #0]
 800c720:	460b      	mov	r3, r1
 800c722:	4618      	mov	r0, r3
 800c724:	b00b      	add	sp, #44	; 0x2c
 800c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c728:	1e58      	subs	r0, r3, #1
 800c72a:	4684      	mov	ip, r0
 800c72c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c730:	fb02 5617 	mls	r6, r2, r7, r5
 800c734:	3628      	adds	r6, #40	; 0x28
 800c736:	446e      	add	r6, sp
 800c738:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c73c:	460c      	mov	r4, r1
 800c73e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c742:	462e      	mov	r6, r5
 800c744:	42b2      	cmp	r2, r6
 800c746:	463d      	mov	r5, r7
 800c748:	f101 0101 	add.w	r1, r1, #1
 800c74c:	d9ee      	bls.n	800c72c <__utoa+0x40>
 800c74e:	2200      	movs	r2, #0
 800c750:	545a      	strb	r2, [r3, r1]
 800c752:	1919      	adds	r1, r3, r4
 800c754:	1aa5      	subs	r5, r4, r2
 800c756:	42aa      	cmp	r2, r5
 800c758:	dae3      	bge.n	800c722 <__utoa+0x36>
 800c75a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c75e:	780e      	ldrb	r6, [r1, #0]
 800c760:	3201      	adds	r2, #1
 800c762:	7006      	strb	r6, [r0, #0]
 800c764:	f801 5901 	strb.w	r5, [r1], #-1
 800c768:	e7f4      	b.n	800c754 <__utoa+0x68>
 800c76a:	bf00      	nop
 800c76c:	0800d624 	.word	0x0800d624

0800c770 <memset>:
 800c770:	4603      	mov	r3, r0
 800c772:	4402      	add	r2, r0
 800c774:	4293      	cmp	r3, r2
 800c776:	d100      	bne.n	800c77a <memset+0xa>
 800c778:	4770      	bx	lr
 800c77a:	f803 1b01 	strb.w	r1, [r3], #1
 800c77e:	e7f9      	b.n	800c774 <memset+0x4>

0800c780 <_sbrk_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	2300      	movs	r3, #0
 800c784:	4d05      	ldr	r5, [pc, #20]	; (800c79c <_sbrk_r+0x1c>)
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	602b      	str	r3, [r5, #0]
 800c78c:	f7fa ffa2 	bl	80076d4 <_sbrk>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_sbrk_r+0x1a>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_sbrk_r+0x1a>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	20001db8 	.word	0x20001db8

0800c7a0 <__errno>:
 800c7a0:	4b01      	ldr	r3, [pc, #4]	; (800c7a8 <__errno+0x8>)
 800c7a2:	6818      	ldr	r0, [r3, #0]
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	200009a0 	.word	0x200009a0

0800c7ac <__libc_init_array>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	4d0c      	ldr	r5, [pc, #48]	; (800c7e4 <__libc_init_array+0x38>)
 800c7b2:	4c0d      	ldr	r4, [pc, #52]	; (800c7e8 <__libc_init_array+0x3c>)
 800c7b4:	1b64      	subs	r4, r4, r5
 800c7b6:	10a4      	asrs	r4, r4, #2
 800c7b8:	42a6      	cmp	r6, r4
 800c7ba:	d109      	bne.n	800c7d0 <__libc_init_array+0x24>
 800c7bc:	f000 f832 	bl	800c824 <_init>
 800c7c0:	2600      	movs	r6, #0
 800c7c2:	4d0a      	ldr	r5, [pc, #40]	; (800c7ec <__libc_init_array+0x40>)
 800c7c4:	4c0a      	ldr	r4, [pc, #40]	; (800c7f0 <__libc_init_array+0x44>)
 800c7c6:	1b64      	subs	r4, r4, r5
 800c7c8:	10a4      	asrs	r4, r4, #2
 800c7ca:	42a6      	cmp	r6, r4
 800c7cc:	d105      	bne.n	800c7da <__libc_init_array+0x2e>
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d4:	4798      	blx	r3
 800c7d6:	3601      	adds	r6, #1
 800c7d8:	e7ee      	b.n	800c7b8 <__libc_init_array+0xc>
 800c7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7de:	4798      	blx	r3
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	e7f2      	b.n	800c7ca <__libc_init_array+0x1e>
 800c7e4:	0800d64c 	.word	0x0800d64c
 800c7e8:	0800d64c 	.word	0x0800d64c
 800c7ec:	0800d64c 	.word	0x0800d64c
 800c7f0:	0800d650 	.word	0x0800d650

0800c7f4 <__retarget_lock_acquire_recursive>:
 800c7f4:	4770      	bx	lr

0800c7f6 <__retarget_lock_release_recursive>:
 800c7f6:	4770      	bx	lr

0800c7f8 <strcpy>:
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7fe:	f803 2b01 	strb.w	r2, [r3], #1
 800c802:	2a00      	cmp	r2, #0
 800c804:	d1f9      	bne.n	800c7fa <strcpy+0x2>
 800c806:	4770      	bx	lr

0800c808 <memcpy>:
 800c808:	440a      	add	r2, r1
 800c80a:	4291      	cmp	r1, r2
 800c80c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c810:	d100      	bne.n	800c814 <memcpy+0xc>
 800c812:	4770      	bx	lr
 800c814:	b510      	push	{r4, lr}
 800c816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c81a:	4291      	cmp	r1, r2
 800c81c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c820:	d1f9      	bne.n	800c816 <memcpy+0xe>
 800c822:	bd10      	pop	{r4, pc}

0800c824 <_init>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr

0800c830 <_fini>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr
